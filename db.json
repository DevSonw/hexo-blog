{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yelee/.gitignore","hash":"237760b38ce80bcc3a8b556566bef0295c145393","modified":1477897641174},{"_id":"themes/yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1477897641174},{"_id":"themes/yelee/_config.yml","hash":"8925ef159b585dad2545bf2b2805c4b65f4c64e5","modified":1478528388484},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1477897641176},{"_id":"source/_posts/VPS搭建高速VPN服务器.md","hash":"b0db406caf5a68b3ef00271867e65840d335ec21","modified":1478847175789},{"_id":"source/_posts/dumpdecrypted给App砸壳.md","hash":"c607cdfd9ceb46ae4723324fc5060fa480f9c1ec","modified":1477925436607},{"_id":"source/_posts/iPhone查找序列号生成函数.md","hash":"9730ab34dd7b92815d8bffb84e784af70fd78ba7","modified":1478011772187},{"_id":"source/_posts/手把手教你逆向微信之朋友圈小视频转发（上）.md","hash":"e9d5e0551f64d7fc4626b0e8796d8d5aeb779963","modified":1478858034692},{"_id":"source/_posts/手把手教你逆向微信之朋友圈小视频转发（下）.md","hash":"79f33f3012db68317a0f58bb3f2e3c35b697a833","modified":1478857322823},{"_id":"themes/yelee/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1477897641157},{"_id":"themes/yelee/.git/config","hash":"de8eaeefa12aa07502884e265b5e0d4c2262178f","modified":1477897641170},{"_id":"themes/yelee/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1477897638354},{"_id":"themes/yelee/.git/index","hash":"fc0f5ffb3ad5acd389650ccde99c8d32ce3fa88d","modified":1477899874206},{"_id":"themes/yelee/.git/packed-refs","hash":"fad6a43ad617793304d9241562a71596db559018","modified":1477897641156},{"_id":"themes/yelee/.github/ISSUE_TEMPLATE.md","hash":"09e2580d457ce93b4d7d554b75618036b45f8717","modified":1477897641174},{"_id":"themes/yelee/languages/default.yml","hash":"80cc17267333753accc0b1c85a73678fedcbce76","modified":1477897641174},{"_id":"themes/yelee/languages/en.yml","hash":"2c096d06c0af4ddf9c128fc8f77fb276b59a47fb","modified":1477897641174},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"b5b2d20cde04db3773962284a002d025b09134b0","modified":1477897641174},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"c38a95f5076ad951839aaf7748295d7eea277c61","modified":1477897641174},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"f372cc0d758a7d8bbb885aa9756d607bec26469a","modified":1477897641174},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1477897641176},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1477897641176},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1477897641176},{"_id":"themes/yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1477897641176},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1477897641176},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1477897641176},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1477897641176},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1477897641176},{"_id":"themes/yelee/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1477897638352},{"_id":"themes/yelee/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1477897638353},{"_id":"themes/yelee/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1477897638349},{"_id":"themes/yelee/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1477897638353},{"_id":"themes/yelee/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1477897638351},{"_id":"themes/yelee/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1477897638350},{"_id":"themes/yelee/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1477897638353},{"_id":"themes/yelee/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1477897638352},{"_id":"themes/yelee/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1477897638350},{"_id":"themes/yelee/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1477897638353},{"_id":"themes/yelee/.git/logs/HEAD","hash":"8c9eaa41c1f938728abd4969f2044e5081d44f1f","modified":1477897641170},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1477897641174},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1477897641174},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1477897641174},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"51a451ed7f60a6224794f6f48969e0d4edb36372","modified":1478358838500},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"3e5f2e41bbb1a5b93a8a7a6cb9ccd191ced54408","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a6046bc322ce9194faa9559c70e1618a7e1e4cbc","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1477897641176},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"1bebab6eb7a849319cd48fe051f3c71b9349a723","modified":1477897641176},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"432ded02bcc1f0d52cd833e8eeac688ee886169a","modified":1477897641176},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1477897641176},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1477897641178},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1477897641178},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1477897641179},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1477897641179},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1477897641181},{"_id":"themes/yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1477897641183},{"_id":"themes/yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1477897641183},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1477897641183},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1477897641183},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1477897641183},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1477897641183},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1477897641183},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1477897641183},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1477897641183},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1477897641183},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1477897641183},{"_id":"themes/yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1477897641183},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1477897641183},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1477897641183},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1477897641183},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1477897641183},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1477897641183},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1477897641183},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1477897641183},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1477897641183},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1477897641183},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1477897641183},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1477897641183},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1477897641183},{"_id":"themes/yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1477897641184},{"_id":"themes/yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1477897641184},{"_id":"themes/yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1477897641184},{"_id":"themes/yelee/source/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1477897641184},{"_id":"themes/yelee/source/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1477897641184},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1477897641180},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1477897641181},{"_id":"themes/yelee/.git/refs/heads/master","hash":"a098c9ba7d644627d0ba7fb675f0168faedeb258","modified":1477897641170},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"678f3aec2980d378ea44be60eec3eb504c8ba668","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"d3c1b0b31db9d80e857f3054d010ea49c0f88134","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"b2fe5a2b5b66d1c1ad2c042b5f8b812680a1c676","modified":1478527730144},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"bcf2070587645afd20a4eb046b9c8bb9c44d1cf5","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1477897641176},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1477897641176},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1477897641176},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1477897641176},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1477897641176},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1477897641176},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1477897641177},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1477897641177},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1477897641178},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1477897641181},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1477897641181},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"fcaa5deaa654aaec69e267e23b49df07f84f633a","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"eb19bbd37fc2c1abd238e2ed96b22cb1aae41ab7","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1477897641183},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1477897641183},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1477897641183},{"_id":"themes/yelee/.git/objects/pack/pack-564350b1154dca17a11cb57148f37e7786aace7b.idx","hash":"c73d8c9abaac591a58a75f0695e90fda77545b89","modified":1477897641153},{"_id":"themes/yelee/.git/logs/refs/heads/master","hash":"8c9eaa41c1f938728abd4969f2044e5081d44f1f","modified":1477897641170},{"_id":"themes/yelee/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1477897641157},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1477897641181},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1477897641181},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1477897641181},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"f309241c1daa9b6c04aa04063307537c219fdd59","modified":1477897641181},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1477897641181},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"b1e564ed76d6e892556b61b4278270fc9eeea961","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1477897641182},{"_id":"themes/yelee/.git/logs/refs/remotes/origin/HEAD","hash":"8c9eaa41c1f938728abd4969f2044e5081d44f1f","modified":1477897641157},{"_id":"themes/yelee/.git/objects/pack/pack-564350b1154dca17a11cb57148f37e7786aace7b.pack","hash":"5f34a8b4306c63db33e5059fbdae4f5dcff33c9f","modified":1477897641152},{"_id":"public/archives/2015/index.html","hash":"7f658a2f1bdf7a93ba44ee90f51b40796ce59979","modified":1478850516870},{"_id":"public/archives/2015/08/index.html","hash":"b2571044bad8507ba945ed11a69e0c0c6845773f","modified":1478850516870},{"_id":"public/archives/2016/05/index.html","hash":"d047e60804bc103e25b9c9086937b9963612bf2c","modified":1478850516871},{"_id":"public/archives/2016/07/index.html","hash":"5dbd8c2f8f1349b110b6c732360db80ba2a27f30","modified":1478850516871},{"_id":"public/archives/2016/11/index.html","hash":"604bfa6891cd150d6366c3f7a539336e18b3ce14","modified":1478850516871},{"_id":"public/categories/实用工具/index.html","hash":"4d8ab61cb9570fae7dea35da7f7ec0f5c36f95f8","modified":1478850516871},{"_id":"public/categories/iOS逆向/index.html","hash":"4eef3f69218b2ea1d9a5f2d6365218df7d921fcb","modified":1478850516871},{"_id":"public/categories/逆向工程/index.html","hash":"7f29de5bccc64cc4afd51125c41ceadcc6bc9f37","modified":1478850516871},{"_id":"public/tags/VPS/index.html","hash":"2e2e14697fb501fa046355d373692bb14fe7e4b1","modified":1478850516871},{"_id":"public/tags/VPN/index.html","hash":"1fe88d19663af78c8f95a1b3ebaa83a7074814da","modified":1478850516871},{"_id":"public/tags/Shadowsockts/index.html","hash":"aee4edf49488e63e2245c4459a33b18bde54648e","modified":1478850516871},{"_id":"public/tags/serial-Number/index.html","hash":"4dcc4005918e8cafc1974dfa26e637348daaeec8","modified":1478850516872},{"_id":"public/tags/UDID/index.html","hash":"c0288d759100b013aaea55a440df5af39bb4961f","modified":1478850516872},{"_id":"public/tags/微信/index.html","hash":"5a0c9adf02f2d43d0bb0bc69ee295062ae3cee00","modified":1478850516872},{"_id":"public/tags/逆向工程/index.html","hash":"c65d3ef4dbb979cb8d18209f62e9c0426dab54d2","modified":1478850516872},{"_id":"public/tags/重签名/index.html","hash":"21d0ae06d081003732e6247935a5120c2c246080","modified":1478850516873},{"_id":"public/2016/11/10/手把手教你逆向微信之朋友圈小视频转发（下）/index.html","hash":"80e4b76550eda70264669bfed50fe9eb475ba40a","modified":1478857346031},{"_id":"public/2016/11/09/手把手教你逆向微信之朋友圈小视频转发（上）/index.html","hash":"40d2d549659db653e74fd0e992c05d34b9a43356","modified":1478858043241},{"_id":"public/2016/07/17/dumpdecrypted给App砸壳/index.html","hash":"dcf5b9c94038fbe4a589b986f559b0ab771791bf","modified":1478850516873},{"_id":"public/2016/05/19/blog-building/index.html","hash":"5288dd12799d14529a4e2f696ed5385b1096a1ba","modified":1478850516874},{"_id":"public/2015/08/02/iPhone查找序列号生成函数/index.html","hash":"9f3a8da5c3338f29ceebce78adbf6bf049aa86a2","modified":1478850516874},{"_id":"public/archives/index.html","hash":"2d9291811230fd033d0ea041e469e66b519c94ce","modified":1478850516874},{"_id":"public/archives/2016/index.html","hash":"9c07183f97cdcbd304add3bc88a8b8ad82afa698","modified":1478850516874},{"_id":"public/index.html","hash":"2528aee7910170711a7bc6f3050acf3077d2fe45","modified":1478857052824},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1478850516887},{"_id":"public/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1478850516887},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1478850516887},{"_id":"public/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1478850516887},{"_id":"public/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1478850516887},{"_id":"public/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1478850516887},{"_id":"public/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1478850516887},{"_id":"public/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1478850516887},{"_id":"public/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1478850516887},{"_id":"public/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1478850516888},{"_id":"public/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1478850516888},{"_id":"public/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1478850516888},{"_id":"public/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1478850516888},{"_id":"public/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1478850516888},{"_id":"public/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1478850516888},{"_id":"public/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1478850516888},{"_id":"public/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1478850516888},{"_id":"public/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1478850516888},{"_id":"public/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1478850516888},{"_id":"public/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1478850516888},{"_id":"public/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1478850516888},{"_id":"public/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1478850516888},{"_id":"public/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1478850516888},{"_id":"public/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1478850516888},{"_id":"public/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1478850516888},{"_id":"public/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1478850516888},{"_id":"public/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1478850516888},{"_id":"public/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1478850516889},{"_id":"public/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1478850516889},{"_id":"public/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1478850518569},{"_id":"public/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1478850518572},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1478850518574},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1478850518575},{"_id":"public/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1478850518575},{"_id":"public/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1478850518575},{"_id":"public/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1478850518575},{"_id":"public/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1478850518575},{"_id":"public/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1478850518575},{"_id":"public/css/style.css","hash":"df6b7973ff2c45d123f33a904c4a6051f87c23c9","modified":1478850518575},{"_id":"source/_posts/Xcode编译报错Undefined symbols解决方案","hash":"83cb4cfccd645d06dcbcf75b1a3cf48d70375c96","modified":1478860431769}],"Category":[{"name":"实用工具","_id":"civdhewvi00024h6qzr0ukktc"},{"name":"iOS逆向","_id":"civdheww100074h6qjzemeueo"},{"name":"逆向工程","_id":"civdheww3000a4h6q8nifqk9l"}],"Data":[],"Page":[],"Post":[{"title":"VPS搭建高速VPN服务器","date":"2016-05-19T16:00:00.000Z","top":1,"_content":"\n##\t\t前言：(废话较多，不想看的略过直接看后面的教程)  \n*\t作为一名有着远大理想和抱负的codeMonkey，平时查资料必须Google，百度一下会真的死啊！不是黑百度，确实百度出来的资料内容看一下大致是相同的，搜到的内容就是copy+paste，花了很多时间结果找不到我们想要的东西，最最重要的是搜索结果有一半是广告，这个时候只能求助于Google，无奈天朝的GFW，一直追求自由明主的Google早在10年就被GCD轰出了墙外，所以VPN成了连接我们和整个世界的桥梁。\n<!-- more -->\n*\t作为一名有着远大理想和抱负的codeMonkey，平时查资料必须Google，百度一下会真的死啊！不是黑百度，确实百度出来的资料内容看一下大致是相同的，搜到的内容就是copy+paste，花了很多时间结果找不到我们想要的东西，最最重要的是搜索结果有一半是广告，这个时候只能求助于Google，无奈天朝的GFW，一直追求自由明主的Google早在10年就被GCD轰出了墙外，所以VPN成了连接我们和整个世界的桥梁。  \n*\t现在市面上的VPN产品满天飞，有不少是开张几个月就卷款跑路，然后重新弄个网站换个名字继续骗钱，市面上常见的VPN还有一个很大的缺点就是速度不稳定，只能够全局加速（至少在Mac上市这样），访问国内网站都很卡，因为这些VPN都是共享一条线路，用户少速度会快一点，人一多就卡成了龟速。当然也有部分VPN推出了专线套餐，便宜的一个月也要100大洋左右，我等屌丝“何德何能”能消费得起这样的产品啊（鬼魅的微笑）。  \n*\t在用了几年这种VPN产品之后，我终于发现了一块新大陆，自己购买主机搭建VPN服务器，不论是速度还是用户体验，不要太爽的好伐，关键是价格很亲民，最便宜的一年20刀，折合人民币才100多大洋。接下来就给大家分享我搭建VPN的过程，搭建完成之后的VPN观看YouTube高清720P毫无压力（当然还要取决于运营商给你的带宽）。我购买的是VPS界享有“盛誉”的搬瓦工，价格亲民、速度快，有智能后台一键搭建VPN省去很多繁琐的命令行输入，大家可以在官网首页看到机型配置和价格，最便宜的2.99刀一个月，一年20刀。而且搬瓦工是30天无条件退款的，意思就是你可以用了29天，然后申请退款，审核之后就会把钱退给你。因为一开始不了解这个东西，所以购买了一个月2.99刀试试水，用了20天感觉速度和体验都非常不错，所以就买个一年的。非常可耻的是，我把之前购买的一个月的2.99刀退款了，然后购买了一个19.99刀一年的。\n\n##\t教程  \n###\t一.\t购买VPS  \n> VPS有点像VirtualBox、Parallels创建出来的主机，可以理解成一台独立的主机。我们需要购买的就是这样一台独立的主机，不过一定要购买海外的，否则搭建了VPN也无法访问海外的网站。  \n   \n因为我用的是搬瓦工，并且感觉不错，推荐给大家，还有其他的海外VPS提供商也都是可以的。\n##### 搬瓦工官网链接：[https://bandwagonhost.com](https://bandwagonhost.com/aff.php?aff=10505)  \n（*不挂VPN访问不是很稳定，如果访问不了的话先借个VPN用一下吧，哈哈！*）  \n\n进入之后要注册，之后就可以购买主机了，根据你自己的经济情况来选择。（*其实不同主机的带宽都是一样的，只不过在配置上有差别，如果不是搭建大型的网站对配置有要求，只是想有个专线VPN的话，$19.99一年就足够用了。*）  \n\n> **我在购买主机的时候有一个小坑要提一下，搬瓦工的支付方式只支持PayPal，国内强大的支付宝居然不能支付！所以又去注册一个PayPal，坑来了：**  \nPayPal分国内版和国际版，国内版是不支持美元支付的，而且两者的账户是不通的，所以你注册了国内版是无法支付的，国际版的地址是：[https://www.paypal.com](https://www.paypal.com/c2/webapps/mpp/home)，虽然是中文，但是货币是USD美元，绑定一张银联的卡就可以购物了。\n<img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNPayPal.png\" width=\"500\"/>   \n \n**这里做个修正：搬瓦工已经推出支付宝支付了，check out的时候选择alipay就可以了**\n\n###\t二.\t配置服务器  \n####\t1.\t进入控制面板，修改当前的root密码  \n进入账户之后我们可以在MyServices中看到服务器列表：\n![服务器列表](http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%97%E8%A1%A8.png)  \n进入KiwiVM管理后台，我们可以看到左侧有个菜单栏，点击Root Shell-interactive，此时会以H5的形式打开一个terminal窗口，执行`passwd`命令修改root密码  \n（*如果你不嫌系统分配的root密码不好记、每次ssh进主机都要复制粘贴密码，那么略过这步，***如果你忘记了root密码也可以直接通过这里修改，什么？！你忘记搬瓦工的账号密码无法进入后台面板？用你注册填写的邮箱或者手机号找回吧！**）\n![修改root密码](http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E4%BF%AE%E6%94%B9root%E5%AF%86%E7%A0%81.png)\n\n####\t2.\t安装一个你喜欢的Linux OS  \n左侧菜单栏找到Install New OS，选一个你喜欢的系统吧（*系统默认安装的是32位CentOS6，如果你不想换其他系统这步也可以略过，***需要注意每次安装系统，主机所有数据都会丢失**）  \n<img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E5%AE%89%E8%A3%85%E6%96%B0%E7%B3%BB%E7%BB%9F.png\" width=\"500\"/>  \n####\t3.\t安装Shadowsocks Server  \n> 搬瓦工也提供了openVPN一键安装，个人感觉Shadowsocks更好用，有两种加速模式，访问会更快速。  \n**其实这篇文章介绍的是SS的安装，它跟VPN的原理差不多，因为SS采用的是自由协议，一般被墙的可能性要小得多，所以更加稳定！一般不需要区分SS跟VPN的差别，SS在稳定性上更有优势，你值得拥有！**\n\n左侧菜单栏找到Shadowsocks Server，点进去安装就好了（**注意：搬瓦工提供的一键安装功能只支持CentOS6**，你也可以通过命令行的方式安装），安装好的Shadowsocks Server界面是这样的：  \n<img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server.png\" width=\"500\"/>  \n此时VPN已经可以用了，不过还差一个客户端，Windows版本的客户端在后台面板就有链接，Mac用户请[点击这里下载](https://sourceforge.net/projects/shadowsocksgui/)如果无法访问，我已经下载好放到我的网盘了[ShadowsocksX-2.6.3.dmg](https://pan.baidu.com/s/1boXspQJ)，安装好打开Shadowsocks Server，在Mac的工具栏会有一个小飞机的图标  \n<img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server%E4%BD%BF%E7%94%A8%E7%95%8C%E9%9D%A2.png\" width=\"300\" height=\"400\" />  \n点开服务器，配置IP和密码，只需要修改地址和密码，其他不用改就OK了。\n<img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server%E8%AE%BE%E7%BD%AE.png\" width=\"500\" height=\"300\"/>  \n上两张图显示Shadowsocks Server有两种加速模式 ，**一般情况下勾选自动代理模式就可以了，这个这个模式下会自动判断你当前访问的域名是否在GFW名单里面，如果是就启用代理，如果不是就正常访问，这样我们在访问墙内网站的时候也不会受到任何影响** ，如果你遇到网站无法访问，有可能是这个网站近期被墙了，你没有更新本地的GFW名单，如果你确定这个网站是可以打开的，切换到全局模式就可以访问了 \n> Shadowsocks Server自动代理模式原理是根据GFWList配置了一个PAC文件，名单中的域名全部走代理，你可以手动修改这个配置文件，添加你要访问的被墙的网站，它就是一个js文件，你点击编辑自动模式的PAC文件便会跳转到这个js所在的位置，那个GFWList自动更新功能坏掉了，作者一直也没更新，不过不影响平时使用。  \n  \n###\t三.\t加速VPN（很重要！很重要！很重要！）\n完成上面的步骤，你确实是可以访问墙外网站了，但是下载速度一般只有100多KB，YouTube视频240P都感觉不流畅，此时就要用到Net-Speeder给VPN加速了，具体步骤请看：  \n#####\t1.\t先连上远程主机\n`ssh -l root -p 12830 192.243.112.242`  \n把端口和IP换成你自己主机的，然后需要输入root密码，输入在第一步我们设置的密码就可以了。  \n#####\t2.\t安装Net-Speeder  \n输入下面的命令进行安装：  \n`wget https://coding.net/u/njzhenghao/p/download/git/raw/master/net_speeder-installer.sh`\n这里我用的是别人git上的sh脚本，有现成的为何不用呢，是吧？！\n#####\t3.\t编译并安装  \n输入下面的命令编译Net-Speeder：  \n`bash net_speeder-installer.sh`   \n命令执行成功之后，执行reboot重启主机，或者在后台面板重启主机也行。（**此时远程主机的连接会断开，需要重新连接**） \n#####\t4.\t端口加速  \n最后一步，加速端口：  \n`nohup /usr/local/net_speeder/net_speeder venet0 \"ip\" >/dev/null 2>&1 &`  \n执行完这个命令应该会有一个端口号打印出来，证明加速成功了！别着急还有最后一步，点开Shadowsocks Server菜单点击退出，*不要点退出Shadowsocks Server*，然后再次打开App，现在打开YouTube看个视频试试吧！现在墙外网站下载速度一般都在500KB左右，当然这个速度也受到你所在运营商的网络环境影响。（**注意：加速端口这个命令每次重启主机都需要执行一次，因为这个脚本没有加到开机自启动，反正我们没事也不重启主机，我懒得弄了，大家自己Google吧，哈哈！**）  \n","source":"_posts/VPS搭建高速VPN服务器.md","raw":"title: VPS搭建高速VPN服务器\ndate: 2016-05-20\ncategories:\n- 实用工具\ntags:\n- VPS\n- VPN\n- Shadowsockts\npermalink: blog-building\ntop: 1\n\n---\n\n##\t\t前言：(废话较多，不想看的略过直接看后面的教程)  \n*\t作为一名有着远大理想和抱负的codeMonkey，平时查资料必须Google，百度一下会真的死啊！不是黑百度，确实百度出来的资料内容看一下大致是相同的，搜到的内容就是copy+paste，花了很多时间结果找不到我们想要的东西，最最重要的是搜索结果有一半是广告，这个时候只能求助于Google，无奈天朝的GFW，一直追求自由明主的Google早在10年就被GCD轰出了墙外，所以VPN成了连接我们和整个世界的桥梁。\n<!-- more -->\n*\t作为一名有着远大理想和抱负的codeMonkey，平时查资料必须Google，百度一下会真的死啊！不是黑百度，确实百度出来的资料内容看一下大致是相同的，搜到的内容就是copy+paste，花了很多时间结果找不到我们想要的东西，最最重要的是搜索结果有一半是广告，这个时候只能求助于Google，无奈天朝的GFW，一直追求自由明主的Google早在10年就被GCD轰出了墙外，所以VPN成了连接我们和整个世界的桥梁。  \n*\t现在市面上的VPN产品满天飞，有不少是开张几个月就卷款跑路，然后重新弄个网站换个名字继续骗钱，市面上常见的VPN还有一个很大的缺点就是速度不稳定，只能够全局加速（至少在Mac上市这样），访问国内网站都很卡，因为这些VPN都是共享一条线路，用户少速度会快一点，人一多就卡成了龟速。当然也有部分VPN推出了专线套餐，便宜的一个月也要100大洋左右，我等屌丝“何德何能”能消费得起这样的产品啊（鬼魅的微笑）。  \n*\t在用了几年这种VPN产品之后，我终于发现了一块新大陆，自己购买主机搭建VPN服务器，不论是速度还是用户体验，不要太爽的好伐，关键是价格很亲民，最便宜的一年20刀，折合人民币才100多大洋。接下来就给大家分享我搭建VPN的过程，搭建完成之后的VPN观看YouTube高清720P毫无压力（当然还要取决于运营商给你的带宽）。我购买的是VPS界享有“盛誉”的搬瓦工，价格亲民、速度快，有智能后台一键搭建VPN省去很多繁琐的命令行输入，大家可以在官网首页看到机型配置和价格，最便宜的2.99刀一个月，一年20刀。而且搬瓦工是30天无条件退款的，意思就是你可以用了29天，然后申请退款，审核之后就会把钱退给你。因为一开始不了解这个东西，所以购买了一个月2.99刀试试水，用了20天感觉速度和体验都非常不错，所以就买个一年的。非常可耻的是，我把之前购买的一个月的2.99刀退款了，然后购买了一个19.99刀一年的。\n\n##\t教程  \n###\t一.\t购买VPS  \n> VPS有点像VirtualBox、Parallels创建出来的主机，可以理解成一台独立的主机。我们需要购买的就是这样一台独立的主机，不过一定要购买海外的，否则搭建了VPN也无法访问海外的网站。  \n   \n因为我用的是搬瓦工，并且感觉不错，推荐给大家，还有其他的海外VPS提供商也都是可以的。\n##### 搬瓦工官网链接：[https://bandwagonhost.com](https://bandwagonhost.com/aff.php?aff=10505)  \n（*不挂VPN访问不是很稳定，如果访问不了的话先借个VPN用一下吧，哈哈！*）  \n\n进入之后要注册，之后就可以购买主机了，根据你自己的经济情况来选择。（*其实不同主机的带宽都是一样的，只不过在配置上有差别，如果不是搭建大型的网站对配置有要求，只是想有个专线VPN的话，$19.99一年就足够用了。*）  \n\n> **我在购买主机的时候有一个小坑要提一下，搬瓦工的支付方式只支持PayPal，国内强大的支付宝居然不能支付！所以又去注册一个PayPal，坑来了：**  \nPayPal分国内版和国际版，国内版是不支持美元支付的，而且两者的账户是不通的，所以你注册了国内版是无法支付的，国际版的地址是：[https://www.paypal.com](https://www.paypal.com/c2/webapps/mpp/home)，虽然是中文，但是货币是USD美元，绑定一张银联的卡就可以购物了。\n<img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNPayPal.png\" width=\"500\"/>   \n \n**这里做个修正：搬瓦工已经推出支付宝支付了，check out的时候选择alipay就可以了**\n\n###\t二.\t配置服务器  \n####\t1.\t进入控制面板，修改当前的root密码  \n进入账户之后我们可以在MyServices中看到服务器列表：\n![服务器列表](http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%97%E8%A1%A8.png)  \n进入KiwiVM管理后台，我们可以看到左侧有个菜单栏，点击Root Shell-interactive，此时会以H5的形式打开一个terminal窗口，执行`passwd`命令修改root密码  \n（*如果你不嫌系统分配的root密码不好记、每次ssh进主机都要复制粘贴密码，那么略过这步，***如果你忘记了root密码也可以直接通过这里修改，什么？！你忘记搬瓦工的账号密码无法进入后台面板？用你注册填写的邮箱或者手机号找回吧！**）\n![修改root密码](http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E4%BF%AE%E6%94%B9root%E5%AF%86%E7%A0%81.png)\n\n####\t2.\t安装一个你喜欢的Linux OS  \n左侧菜单栏找到Install New OS，选一个你喜欢的系统吧（*系统默认安装的是32位CentOS6，如果你不想换其他系统这步也可以略过，***需要注意每次安装系统，主机所有数据都会丢失**）  \n<img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E5%AE%89%E8%A3%85%E6%96%B0%E7%B3%BB%E7%BB%9F.png\" width=\"500\"/>  \n####\t3.\t安装Shadowsocks Server  \n> 搬瓦工也提供了openVPN一键安装，个人感觉Shadowsocks更好用，有两种加速模式，访问会更快速。  \n**其实这篇文章介绍的是SS的安装，它跟VPN的原理差不多，因为SS采用的是自由协议，一般被墙的可能性要小得多，所以更加稳定！一般不需要区分SS跟VPN的差别，SS在稳定性上更有优势，你值得拥有！**\n\n左侧菜单栏找到Shadowsocks Server，点进去安装就好了（**注意：搬瓦工提供的一键安装功能只支持CentOS6**，你也可以通过命令行的方式安装），安装好的Shadowsocks Server界面是这样的：  \n<img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server.png\" width=\"500\"/>  \n此时VPN已经可以用了，不过还差一个客户端，Windows版本的客户端在后台面板就有链接，Mac用户请[点击这里下载](https://sourceforge.net/projects/shadowsocksgui/)如果无法访问，我已经下载好放到我的网盘了[ShadowsocksX-2.6.3.dmg](https://pan.baidu.com/s/1boXspQJ)，安装好打开Shadowsocks Server，在Mac的工具栏会有一个小飞机的图标  \n<img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server%E4%BD%BF%E7%94%A8%E7%95%8C%E9%9D%A2.png\" width=\"300\" height=\"400\" />  \n点开服务器，配置IP和密码，只需要修改地址和密码，其他不用改就OK了。\n<img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server%E8%AE%BE%E7%BD%AE.png\" width=\"500\" height=\"300\"/>  \n上两张图显示Shadowsocks Server有两种加速模式 ，**一般情况下勾选自动代理模式就可以了，这个这个模式下会自动判断你当前访问的域名是否在GFW名单里面，如果是就启用代理，如果不是就正常访问，这样我们在访问墙内网站的时候也不会受到任何影响** ，如果你遇到网站无法访问，有可能是这个网站近期被墙了，你没有更新本地的GFW名单，如果你确定这个网站是可以打开的，切换到全局模式就可以访问了 \n> Shadowsocks Server自动代理模式原理是根据GFWList配置了一个PAC文件，名单中的域名全部走代理，你可以手动修改这个配置文件，添加你要访问的被墙的网站，它就是一个js文件，你点击编辑自动模式的PAC文件便会跳转到这个js所在的位置，那个GFWList自动更新功能坏掉了，作者一直也没更新，不过不影响平时使用。  \n  \n###\t三.\t加速VPN（很重要！很重要！很重要！）\n完成上面的步骤，你确实是可以访问墙外网站了，但是下载速度一般只有100多KB，YouTube视频240P都感觉不流畅，此时就要用到Net-Speeder给VPN加速了，具体步骤请看：  \n#####\t1.\t先连上远程主机\n`ssh -l root -p 12830 192.243.112.242`  \n把端口和IP换成你自己主机的，然后需要输入root密码，输入在第一步我们设置的密码就可以了。  \n#####\t2.\t安装Net-Speeder  \n输入下面的命令进行安装：  \n`wget https://coding.net/u/njzhenghao/p/download/git/raw/master/net_speeder-installer.sh`\n这里我用的是别人git上的sh脚本，有现成的为何不用呢，是吧？！\n#####\t3.\t编译并安装  \n输入下面的命令编译Net-Speeder：  \n`bash net_speeder-installer.sh`   \n命令执行成功之后，执行reboot重启主机，或者在后台面板重启主机也行。（**此时远程主机的连接会断开，需要重新连接**） \n#####\t4.\t端口加速  \n最后一步，加速端口：  \n`nohup /usr/local/net_speeder/net_speeder venet0 \"ip\" >/dev/null 2>&1 &`  \n执行完这个命令应该会有一个端口号打印出来，证明加速成功了！别着急还有最后一步，点开Shadowsocks Server菜单点击退出，*不要点退出Shadowsocks Server*，然后再次打开App，现在打开YouTube看个视频试试吧！现在墙外网站下载速度一般都在500KB左右，当然这个速度也受到你所在运营商的网络环境影响。（**注意：加速端口这个命令每次重启主机都需要执行一次，因为这个脚本没有加到开机自启动，反正我们没事也不重启主机，我懒得弄了，大家自己Google吧，哈哈！**）  \n","slug":"blog-building","published":1,"updated":"2016-11-11T06:52:55.789Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civdhewv000004h6qr192n5f2","content":"<h2 id=\"前言：-废话较多，不想看的略过直接看后面的教程\"><a href=\"#前言：-废话较多，不想看的略过直接看后面的教程\" class=\"headerlink\" title=\"前言：(废话较多，不想看的略过直接看后面的教程)\"></a>前言：(废话较多，不想看的略过直接看后面的教程)</h2><ul>\n<li>作为一名有着远大理想和抱负的codeMonkey，平时查资料必须Google，百度一下会真的死啊！不是黑百度，确实百度出来的资料内容看一下大致是相同的，搜到的内容就是copy+paste，花了很多时间结果找不到我们想要的东西，最最重要的是搜索结果有一半是广告，这个时候只能求助于Google，无奈天朝的GFW，一直追求自由明主的Google早在10年就被GCD轰出了墙外，所以VPN成了连接我们和整个世界的桥梁。<a id=\"more\"></a></li>\n<li>作为一名有着远大理想和抱负的codeMonkey，平时查资料必须Google，百度一下会真的死啊！不是黑百度，确实百度出来的资料内容看一下大致是相同的，搜到的内容就是copy+paste，花了很多时间结果找不到我们想要的东西，最最重要的是搜索结果有一半是广告，这个时候只能求助于Google，无奈天朝的GFW，一直追求自由明主的Google早在10年就被GCD轰出了墙外，所以VPN成了连接我们和整个世界的桥梁。  </li>\n<li>现在市面上的VPN产品满天飞，有不少是开张几个月就卷款跑路，然后重新弄个网站换个名字继续骗钱，市面上常见的VPN还有一个很大的缺点就是速度不稳定，只能够全局加速（至少在Mac上市这样），访问国内网站都很卡，因为这些VPN都是共享一条线路，用户少速度会快一点，人一多就卡成了龟速。当然也有部分VPN推出了专线套餐，便宜的一个月也要100大洋左右，我等屌丝“何德何能”能消费得起这样的产品啊（鬼魅的微笑）。  </li>\n<li>在用了几年这种VPN产品之后，我终于发现了一块新大陆，自己购买主机搭建VPN服务器，不论是速度还是用户体验，不要太爽的好伐，关键是价格很亲民，最便宜的一年20刀，折合人民币才100多大洋。接下来就给大家分享我搭建VPN的过程，搭建完成之后的VPN观看YouTube高清720P毫无压力（当然还要取决于运营商给你的带宽）。我购买的是VPS界享有“盛誉”的搬瓦工，价格亲民、速度快，有智能后台一键搭建VPN省去很多繁琐的命令行输入，大家可以在官网首页看到机型配置和价格，最便宜的2.99刀一个月，一年20刀。而且搬瓦工是30天无条件退款的，意思就是你可以用了29天，然后申请退款，审核之后就会把钱退给你。因为一开始不了解这个东西，所以购买了一个月2.99刀试试水，用了20天感觉速度和体验都非常不错，所以就买个一年的。非常可耻的是，我把之前购买的一个月的2.99刀退款了，然后购买了一个19.99刀一年的。</li>\n</ul>\n<h2 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h2><h3 id=\"一-购买VPS\"><a href=\"#一-购买VPS\" class=\"headerlink\" title=\"一.    购买VPS\"></a>一.    购买VPS</h3><blockquote>\n<p>VPS有点像VirtualBox、Parallels创建出来的主机，可以理解成一台独立的主机。我们需要购买的就是这样一台独立的主机，不过一定要购买海外的，否则搭建了VPN也无法访问海外的网站。  </p>\n</blockquote>\n<p>因为我用的是搬瓦工，并且感觉不错，推荐给大家，还有其他的海外VPS提供商也都是可以的。</p>\n<h5 id=\"搬瓦工官网链接：https-bandwagonhost-com\"><a href=\"#搬瓦工官网链接：https-bandwagonhost-com\" class=\"headerlink\" title=\"搬瓦工官网链接：https://bandwagonhost.com\"></a>搬瓦工官网链接：<a href=\"https://bandwagonhost.com/aff.php?aff=10505\" target=\"_blank\" rel=\"external\">https://bandwagonhost.com</a></h5><p>（<em>不挂VPN访问不是很稳定，如果访问不了的话先借个VPN用一下吧，哈哈！</em>）  </p>\n<p>进入之后要注册，之后就可以购买主机了，根据你自己的经济情况来选择。（<em>其实不同主机的带宽都是一样的，只不过在配置上有差别，如果不是搭建大型的网站对配置有要求，只是想有个专线VPN的话，$19.99一年就足够用了。</em>）  </p>\n<blockquote>\n<p><strong>我在购买主机的时候有一个小坑要提一下，搬瓦工的支付方式只支持PayPal，国内强大的支付宝居然不能支付！所以又去注册一个PayPal，坑来了：</strong><br>PayPal分国内版和国际版，国内版是不支持美元支付的，而且两者的账户是不通的，所以你注册了国内版是无法支付的，国际版的地址是：<a href=\"https://www.paypal.com/c2/webapps/mpp/home\" target=\"_blank\" rel=\"external\">https://www.paypal.com</a>，虽然是中文，但是货币是USD美元，绑定一张银联的卡就可以购物了。<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNPayPal.png\" width=\"500\">   </p>\n</blockquote>\n<p><strong>这里做个修正：搬瓦工已经推出支付宝支付了，check out的时候选择alipay就可以了</strong></p>\n<h3 id=\"二-配置服务器\"><a href=\"#二-配置服务器\" class=\"headerlink\" title=\"二.    配置服务器\"></a>二.    配置服务器</h3><h4 id=\"1-进入控制面板，修改当前的root密码\"><a href=\"#1-进入控制面板，修改当前的root密码\" class=\"headerlink\" title=\"1.    进入控制面板，修改当前的root密码\"></a>1.    进入控制面板，修改当前的root密码</h4><p>进入账户之后我们可以在MyServices中看到服务器列表：<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%97%E8%A1%A8.png\" alt=\"服务器列表\"><br>进入KiwiVM管理后台，我们可以看到左侧有个菜单栏，点击Root Shell-interactive，此时会以H5的形式打开一个terminal窗口，执行<code>passwd</code>命令修改root密码<br>（<em>如果你不嫌系统分配的root密码不好记、每次ssh进主机都要复制粘贴密码，那么略过这步，**</em>如果你忘记了root密码也可以直接通过这里修改，什么？！你忘记搬瓦工的账号密码无法进入后台面板？用你注册填写的邮箱或者手机号找回吧！**）<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E4%BF%AE%E6%94%B9root%E5%AF%86%E7%A0%81.png\" alt=\"修改root密码\"></p>\n<h4 id=\"2-安装一个你喜欢的Linux-OS\"><a href=\"#2-安装一个你喜欢的Linux-OS\" class=\"headerlink\" title=\"2.    安装一个你喜欢的Linux OS\"></a>2.    安装一个你喜欢的Linux OS</h4><p>左侧菜单栏找到Install New OS，选一个你喜欢的系统吧（<em>系统默认安装的是32位CentOS6，如果你不想换其他系统这步也可以略过，**</em>需要注意每次安装系统，主机所有数据都会丢失**）<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E5%AE%89%E8%A3%85%E6%96%B0%E7%B3%BB%E7%BB%9F.png\" width=\"500\">  </p>\n<h4 id=\"3-安装Shadowsocks-Server\"><a href=\"#3-安装Shadowsocks-Server\" class=\"headerlink\" title=\"3.    安装Shadowsocks Server\"></a>3.    安装Shadowsocks Server</h4><blockquote>\n<p>搬瓦工也提供了openVPN一键安装，个人感觉Shadowsocks更好用，有两种加速模式，访问会更快速。<br><strong>其实这篇文章介绍的是SS的安装，它跟VPN的原理差不多，因为SS采用的是自由协议，一般被墙的可能性要小得多，所以更加稳定！一般不需要区分SS跟VPN的差别，SS在稳定性上更有优势，你值得拥有！</strong></p>\n</blockquote>\n<p>左侧菜单栏找到Shadowsocks Server，点进去安装就好了（<strong>注意：搬瓦工提供的一键安装功能只支持CentOS6</strong>，你也可以通过命令行的方式安装），安装好的Shadowsocks Server界面是这样的：<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server.png\" width=\"500\"><br>此时VPN已经可以用了，不过还差一个客户端，Windows版本的客户端在后台面板就有链接，Mac用户请<a href=\"https://sourceforge.net/projects/shadowsocksgui/\" target=\"_blank\" rel=\"external\">点击这里下载</a>如果无法访问，我已经下载好放到我的网盘了<a href=\"https://pan.baidu.com/s/1boXspQJ\" target=\"_blank\" rel=\"external\">ShadowsocksX-2.6.3.dmg</a>，安装好打开Shadowsocks Server，在Mac的工具栏会有一个小飞机的图标<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server%E4%BD%BF%E7%94%A8%E7%95%8C%E9%9D%A2.png\" width=\"300\" height=\"400\"><br>点开服务器，配置IP和密码，只需要修改地址和密码，其他不用改就OK了。<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server%E8%AE%BE%E7%BD%AE.png\" width=\"500\" height=\"300\"><br>上两张图显示Shadowsocks Server有两种加速模式 ，<strong>一般情况下勾选自动代理模式就可以了，这个这个模式下会自动判断你当前访问的域名是否在GFW名单里面，如果是就启用代理，如果不是就正常访问，这样我们在访问墙内网站的时候也不会受到任何影响</strong> ，如果你遇到网站无法访问，有可能是这个网站近期被墙了，你没有更新本地的GFW名单，如果你确定这个网站是可以打开的，切换到全局模式就可以访问了 </p>\n<blockquote>\n<p>Shadowsocks Server自动代理模式原理是根据GFWList配置了一个PAC文件，名单中的域名全部走代理，你可以手动修改这个配置文件，添加你要访问的被墙的网站，它就是一个js文件，你点击编辑自动模式的PAC文件便会跳转到这个js所在的位置，那个GFWList自动更新功能坏掉了，作者一直也没更新，不过不影响平时使用。  </p>\n</blockquote>\n<h3 id=\"三-加速VPN（很重要！很重要！很重要！）\"><a href=\"#三-加速VPN（很重要！很重要！很重要！）\" class=\"headerlink\" title=\"三.    加速VPN（很重要！很重要！很重要！）\"></a>三.    加速VPN（很重要！很重要！很重要！）</h3><p>完成上面的步骤，你确实是可以访问墙外网站了，但是下载速度一般只有100多KB，YouTube视频240P都感觉不流畅，此时就要用到Net-Speeder给VPN加速了，具体步骤请看：  </p>\n<h5 id=\"1-先连上远程主机\"><a href=\"#1-先连上远程主机\" class=\"headerlink\" title=\"1.    先连上远程主机\"></a>1.    先连上远程主机</h5><p><code>ssh -l root -p 12830 192.243.112.242</code><br>把端口和IP换成你自己主机的，然后需要输入root密码，输入在第一步我们设置的密码就可以了。  </p>\n<h5 id=\"2-安装Net-Speeder\"><a href=\"#2-安装Net-Speeder\" class=\"headerlink\" title=\"2.    安装Net-Speeder\"></a>2.    安装Net-Speeder</h5><p>输入下面的命令进行安装：<br><code>wget https://coding.net/u/njzhenghao/p/download/git/raw/master/net_speeder-installer.sh</code><br>这里我用的是别人git上的sh脚本，有现成的为何不用呢，是吧？！</p>\n<h5 id=\"3-编译并安装\"><a href=\"#3-编译并安装\" class=\"headerlink\" title=\"3.    编译并安装\"></a>3.    编译并安装</h5><p>输入下面的命令编译Net-Speeder：<br><code>bash net_speeder-installer.sh</code><br>命令执行成功之后，执行reboot重启主机，或者在后台面板重启主机也行。（<strong>此时远程主机的连接会断开，需要重新连接</strong>） </p>\n<h5 id=\"4-端口加速\"><a href=\"#4-端口加速\" class=\"headerlink\" title=\"4.    端口加速\"></a>4.    端口加速</h5><p>最后一步，加速端口：<br><code>nohup /usr/local/net_speeder/net_speeder venet0 &quot;ip&quot; &gt;/dev/null 2&gt;&amp;1 &amp;</code><br>执行完这个命令应该会有一个端口号打印出来，证明加速成功了！别着急还有最后一步，点开Shadowsocks Server菜单点击退出，<em>不要点退出Shadowsocks Server</em>，然后再次打开App，现在打开YouTube看个视频试试吧！现在墙外网站下载速度一般都在500KB左右，当然这个速度也受到你所在运营商的网络环境影响。（<strong>注意：加速端口这个命令每次重启主机都需要执行一次，因为这个脚本没有加到开机自启动，反正我们没事也不重启主机，我懒得弄了，大家自己Google吧，哈哈！</strong>）  </p>\n","excerpt":"<h2 id=\"前言：-废话较多，不想看的略过直接看后面的教程\"><a href=\"#前言：-废话较多，不想看的略过直接看后面的教程\" class=\"headerlink\" title=\"前言：(废话较多，不想看的略过直接看后面的教程)\"></a>前言：(废话较多，不想看的略过直接看后面的教程)</h2><ul>\n<li>作为一名有着远大理想和抱负的codeMonkey，平时查资料必须Google，百度一下会真的死啊！不是黑百度，确实百度出来的资料内容看一下大致是相同的，搜到的内容就是copy+paste，花了很多时间结果找不到我们想要的东西，最最重要的是搜索结果有一半是广告，这个时候只能求助于Google，无奈天朝的GFW，一直追求自由明主的Google早在10年就被GCD轰出了墙外，所以VPN成了连接我们和整个世界的桥梁。","more":"</li>\n<li>作为一名有着远大理想和抱负的codeMonkey，平时查资料必须Google，百度一下会真的死啊！不是黑百度，确实百度出来的资料内容看一下大致是相同的，搜到的内容就是copy+paste，花了很多时间结果找不到我们想要的东西，最最重要的是搜索结果有一半是广告，这个时候只能求助于Google，无奈天朝的GFW，一直追求自由明主的Google早在10年就被GCD轰出了墙外，所以VPN成了连接我们和整个世界的桥梁。  </li>\n<li>现在市面上的VPN产品满天飞，有不少是开张几个月就卷款跑路，然后重新弄个网站换个名字继续骗钱，市面上常见的VPN还有一个很大的缺点就是速度不稳定，只能够全局加速（至少在Mac上市这样），访问国内网站都很卡，因为这些VPN都是共享一条线路，用户少速度会快一点，人一多就卡成了龟速。当然也有部分VPN推出了专线套餐，便宜的一个月也要100大洋左右，我等屌丝“何德何能”能消费得起这样的产品啊（鬼魅的微笑）。  </li>\n<li>在用了几年这种VPN产品之后，我终于发现了一块新大陆，自己购买主机搭建VPN服务器，不论是速度还是用户体验，不要太爽的好伐，关键是价格很亲民，最便宜的一年20刀，折合人民币才100多大洋。接下来就给大家分享我搭建VPN的过程，搭建完成之后的VPN观看YouTube高清720P毫无压力（当然还要取决于运营商给你的带宽）。我购买的是VPS界享有“盛誉”的搬瓦工，价格亲民、速度快，有智能后台一键搭建VPN省去很多繁琐的命令行输入，大家可以在官网首页看到机型配置和价格，最便宜的2.99刀一个月，一年20刀。而且搬瓦工是30天无条件退款的，意思就是你可以用了29天，然后申请退款，审核之后就会把钱退给你。因为一开始不了解这个东西，所以购买了一个月2.99刀试试水，用了20天感觉速度和体验都非常不错，所以就买个一年的。非常可耻的是，我把之前购买的一个月的2.99刀退款了，然后购买了一个19.99刀一年的。</li>\n</ul>\n<h2 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h2><h3 id=\"一-购买VPS\"><a href=\"#一-购买VPS\" class=\"headerlink\" title=\"一.    购买VPS\"></a>一.    购买VPS</h3><blockquote>\n<p>VPS有点像VirtualBox、Parallels创建出来的主机，可以理解成一台独立的主机。我们需要购买的就是这样一台独立的主机，不过一定要购买海外的，否则搭建了VPN也无法访问海外的网站。  </p>\n</blockquote>\n<p>因为我用的是搬瓦工，并且感觉不错，推荐给大家，还有其他的海外VPS提供商也都是可以的。</p>\n<h5 id=\"搬瓦工官网链接：https-bandwagonhost-com\"><a href=\"#搬瓦工官网链接：https-bandwagonhost-com\" class=\"headerlink\" title=\"搬瓦工官网链接：https://bandwagonhost.com\"></a>搬瓦工官网链接：<a href=\"https://bandwagonhost.com/aff.php?aff=10505\">https://bandwagonhost.com</a></h5><p>（<em>不挂VPN访问不是很稳定，如果访问不了的话先借个VPN用一下吧，哈哈！</em>）  </p>\n<p>进入之后要注册，之后就可以购买主机了，根据你自己的经济情况来选择。（<em>其实不同主机的带宽都是一样的，只不过在配置上有差别，如果不是搭建大型的网站对配置有要求，只是想有个专线VPN的话，$19.99一年就足够用了。</em>）  </p>\n<blockquote>\n<p><strong>我在购买主机的时候有一个小坑要提一下，搬瓦工的支付方式只支持PayPal，国内强大的支付宝居然不能支付！所以又去注册一个PayPal，坑来了：</strong><br>PayPal分国内版和国际版，国内版是不支持美元支付的，而且两者的账户是不通的，所以你注册了国内版是无法支付的，国际版的地址是：<a href=\"https://www.paypal.com/c2/webapps/mpp/home\">https://www.paypal.com</a>，虽然是中文，但是货币是USD美元，绑定一张银联的卡就可以购物了。<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNPayPal.png\" width=\"500\"/>   </p>\n</blockquote>\n<p><strong>这里做个修正：搬瓦工已经推出支付宝支付了，check out的时候选择alipay就可以了</strong></p>\n<h3 id=\"二-配置服务器\"><a href=\"#二-配置服务器\" class=\"headerlink\" title=\"二.    配置服务器\"></a>二.    配置服务器</h3><h4 id=\"1-进入控制面板，修改当前的root密码\"><a href=\"#1-进入控制面板，修改当前的root密码\" class=\"headerlink\" title=\"1.    进入控制面板，修改当前的root密码\"></a>1.    进入控制面板，修改当前的root密码</h4><p>进入账户之后我们可以在MyServices中看到服务器列表：<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%97%E8%A1%A8.png\" alt=\"服务器列表\"><br>进入KiwiVM管理后台，我们可以看到左侧有个菜单栏，点击Root Shell-interactive，此时会以H5的形式打开一个terminal窗口，执行<code>passwd</code>命令修改root密码<br>（<em>如果你不嫌系统分配的root密码不好记、每次ssh进主机都要复制粘贴密码，那么略过这步，**</em>如果你忘记了root密码也可以直接通过这里修改，什么？！你忘记搬瓦工的账号密码无法进入后台面板？用你注册填写的邮箱或者手机号找回吧！**）<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E4%BF%AE%E6%94%B9root%E5%AF%86%E7%A0%81.png\" alt=\"修改root密码\"></p>\n<h4 id=\"2-安装一个你喜欢的Linux-OS\"><a href=\"#2-安装一个你喜欢的Linux-OS\" class=\"headerlink\" title=\"2.    安装一个你喜欢的Linux OS\"></a>2.    安装一个你喜欢的Linux OS</h4><p>左侧菜单栏找到Install New OS，选一个你喜欢的系统吧（<em>系统默认安装的是32位CentOS6，如果你不想换其他系统这步也可以略过，**</em>需要注意每次安装系统，主机所有数据都会丢失**）<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E5%AE%89%E8%A3%85%E6%96%B0%E7%B3%BB%E7%BB%9F.png\" width=\"500\"/>  </p>\n<h4 id=\"3-安装Shadowsocks-Server\"><a href=\"#3-安装Shadowsocks-Server\" class=\"headerlink\" title=\"3.    安装Shadowsocks Server\"></a>3.    安装Shadowsocks Server</h4><blockquote>\n<p>搬瓦工也提供了openVPN一键安装，个人感觉Shadowsocks更好用，有两种加速模式，访问会更快速。<br><strong>其实这篇文章介绍的是SS的安装，它跟VPN的原理差不多，因为SS采用的是自由协议，一般被墙的可能性要小得多，所以更加稳定！一般不需要区分SS跟VPN的差别，SS在稳定性上更有优势，你值得拥有！</strong></p>\n</blockquote>\n<p>左侧菜单栏找到Shadowsocks Server，点进去安装就好了（<strong>注意：搬瓦工提供的一键安装功能只支持CentOS6</strong>，你也可以通过命令行的方式安装），安装好的Shadowsocks Server界面是这样的：<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server.png\" width=\"500\"/><br>此时VPN已经可以用了，不过还差一个客户端，Windows版本的客户端在后台面板就有链接，Mac用户请<a href=\"https://sourceforge.net/projects/shadowsocksgui/\">点击这里下载</a>如果无法访问，我已经下载好放到我的网盘了<a href=\"https://pan.baidu.com/s/1boXspQJ\">ShadowsocksX-2.6.3.dmg</a>，安装好打开Shadowsocks Server，在Mac的工具栏会有一个小飞机的图标<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server%E4%BD%BF%E7%94%A8%E7%95%8C%E9%9D%A2.png\" width=\"300\" height=\"400\" /><br>点开服务器，配置IP和密码，只需要修改地址和密码，其他不用改就OK了。<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server%E8%AE%BE%E7%BD%AE.png\" width=\"500\" height=\"300\"/><br>上两张图显示Shadowsocks Server有两种加速模式 ，<strong>一般情况下勾选自动代理模式就可以了，这个这个模式下会自动判断你当前访问的域名是否在GFW名单里面，如果是就启用代理，如果不是就正常访问，这样我们在访问墙内网站的时候也不会受到任何影响</strong> ，如果你遇到网站无法访问，有可能是这个网站近期被墙了，你没有更新本地的GFW名单，如果你确定这个网站是可以打开的，切换到全局模式就可以访问了 </p>\n<blockquote>\n<p>Shadowsocks Server自动代理模式原理是根据GFWList配置了一个PAC文件，名单中的域名全部走代理，你可以手动修改这个配置文件，添加你要访问的被墙的网站，它就是一个js文件，你点击编辑自动模式的PAC文件便会跳转到这个js所在的位置，那个GFWList自动更新功能坏掉了，作者一直也没更新，不过不影响平时使用。  </p>\n</blockquote>\n<h3 id=\"三-加速VPN（很重要！很重要！很重要！）\"><a href=\"#三-加速VPN（很重要！很重要！很重要！）\" class=\"headerlink\" title=\"三.    加速VPN（很重要！很重要！很重要！）\"></a>三.    加速VPN（很重要！很重要！很重要！）</h3><p>完成上面的步骤，你确实是可以访问墙外网站了，但是下载速度一般只有100多KB，YouTube视频240P都感觉不流畅，此时就要用到Net-Speeder给VPN加速了，具体步骤请看：  </p>\n<h5 id=\"1-先连上远程主机\"><a href=\"#1-先连上远程主机\" class=\"headerlink\" title=\"1.    先连上远程主机\"></a>1.    先连上远程主机</h5><p><code>ssh -l root -p 12830 192.243.112.242</code><br>把端口和IP换成你自己主机的，然后需要输入root密码，输入在第一步我们设置的密码就可以了。  </p>\n<h5 id=\"2-安装Net-Speeder\"><a href=\"#2-安装Net-Speeder\" class=\"headerlink\" title=\"2.    安装Net-Speeder\"></a>2.    安装Net-Speeder</h5><p>输入下面的命令进行安装：<br><code>wget https://coding.net/u/njzhenghao/p/download/git/raw/master/net_speeder-installer.sh</code><br>这里我用的是别人git上的sh脚本，有现成的为何不用呢，是吧？！</p>\n<h5 id=\"3-编译并安装\"><a href=\"#3-编译并安装\" class=\"headerlink\" title=\"3.    编译并安装\"></a>3.    编译并安装</h5><p>输入下面的命令编译Net-Speeder：<br><code>bash net_speeder-installer.sh</code><br>命令执行成功之后，执行reboot重启主机，或者在后台面板重启主机也行。（<strong>此时远程主机的连接会断开，需要重新连接</strong>） </p>\n<h5 id=\"4-端口加速\"><a href=\"#4-端口加速\" class=\"headerlink\" title=\"4.    端口加速\"></a>4.    端口加速</h5><p>最后一步，加速端口：<br><code>nohup /usr/local/net_speeder/net_speeder venet0 &quot;ip&quot; &gt;/dev/null 2&gt;&amp;1 &amp;</code><br>执行完这个命令应该会有一个端口号打印出来，证明加速成功了！别着急还有最后一步，点开Shadowsocks Server菜单点击退出，<em>不要点退出Shadowsocks Server</em>，然后再次打开App，现在打开YouTube看个视频试试吧！现在墙外网站下载速度一般都在500KB左右，当然这个速度也受到你所在运营商的网络环境影响。（<strong>注意：加速端口这个命令每次重启主机都需要执行一次，因为这个脚本没有加到开机自启动，反正我们没事也不重启主机，我懒得弄了，大家自己Google吧，哈哈！</strong>）  </p>"},{"title":"dumpdecrypted给App砸壳","date":"2016-07-17T16:00:00.000Z","_content":"#### 1.前言\n> 我们都知道从AppStore下载的应用二进制文件被苹果进行了加密处理，也就是我们俗称的*壳*，我们要想对目标App进行逆向分析，必须解密目标二进制文件，俗称*砸壳*。  \n> long long ago有一种傻瓜式的砸壳方式，利用iPhoneCake源的AppCrackr进行一键砸壳，这种方式简单粗暴，省时省力，但正是因为它过于方便，导致几乎所有用户都可轻松上手，随便亵玩，所以不少用户都拿它来破解程序，这也导致了iOS越狱开发社区普遍认为这个软件助长了盗版的气焰，对iPhoneCake源进行了强烈谴责。迫于压力，iPhoneCake将AppCrackr下架。从此利用纯UI方式砸壳的行为已经走入绝路，只能利用更加geek更加niubility的方式来砸壳，这也是这篇文章介绍的主角**dumpdecrypted**  \n\n<!-- more --> \n#### 2.准备工作\n1. 一部已经越狱的手机 `我这里用的是iPhone 5S; iOS 9.1`\n2. 已经安装了OpenSSH\n3. 已经安装了[Cycript](http://www.cycript.org)\n4. [dumpdecrypted源码](https://github.com/stefanesser/dumpdecrypted/archive/master.zip)  \n\n#### 3.编译dumpdecrypted\n下载好之后将文件放到你自己的文件夹中，下面开始编译：  \n \n```  \nLeonLei-MBP:~ gaoshilei$ cd /Users/gaoshilei/Desktop/reverse/dumpdecrypted  \nLeonLei-MBP:dumpdecrypted gaoshilei$ make\n`xcrun --sdk iphoneos --find gcc` -Os  -Wimplicit -isysroot `xcrun --sdk iphoneos --show-sdk-path` -F`xcrun --sdk iphoneos --show-sdk-path`/System/Library/Frameworks -F`xcrun --sdk iphoneos --show-sdk-path`/System/Library/PrivateFrameworks -arch armv7 -arch armv7s -arch arm64 -dynamiclib -o dumpdecrypted.dylib dumpdecrypted.o\n```\n进入dumpdecrypted目录下之后，执行make命令，此时目录下会生成一个`dumpdecrypted.dylib`，这个文件生成一次即可，下次砸壳可以直接使用。\n\n#### 4.开始砸壳  \n##### 定位目标App可执行文件的位置  \n\n```  \nLeonLei-MBP:~ gaoshilei$ ssh root@192.168.0.115\niPhone-5S:~ root# ps -e\n  PID TTY           TIME CMD\n    1 ??         5:23.51 /sbin/launchd\n   23 ??         0:00.81 /usr/libexec/amfid\n   34 ??         1:28.92 /usr/sbin/mediaserverd\n   36 ??         4:23.49 /usr/libexec/fseventsd\n   38 ??         1:21.05 /System/Library/PrivateFrameworks/AssistantServices.framework/assistantd\n   40 ??         0:01.13 /System/Library/PrivateFrameworks/FileProvider.framework/Support/fileproviderd\n   42 ??         1:56.46 /usr/libexec/routined\n   46 ??         0:03.34 /System/Library/PrivateFrameworks/MediaRemote.framework/Support/mediaremoted\n   48 ??         0:00.86 /usr/libexec/misd\n   50 ??         0:18.48 /System/Library/Frameworks/HealthKit.framework/healthd\n   52 ??        19:18.39 /usr/libexec/configd\n   54 ??         3:30.26 /System/Library/CoreServices/powerd.bundle/powerd\n   58 ??         0:50.73 /usr/libexec/atc\n   60 ??        13:47.50 /usr/sbin/wifid\n   ···              ···\n 5673 ??         0:04.41 /var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat\n 5732 ??         0:00.32 /usr/libexec/ptpd -t usb\n 5735 ??         0:00.07 /usr/libexec/webinspectord\n 5741 ??         0:00.18 sshd: root@ttys000 \n 5770 ??         0:00.16 /System/Library/PrivateFrameworks/SyncedDefaults.framework/Support/syncdefaultsd\n 5785 ??         0:00.05 /System/Library/CoreServices/CFNetworkAgent\n```\n可以看到目前手机运行的进程中有微信的影子`/var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat` 我们已经找到微信可执行文件的位置\n##### 目标锁定，定位到目标App的Documents位置  \n \n```  \niPhone-5S:~ root# cycript -p WeChat  \ncy# [[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask][0]\n#file:///var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents/  \n```\n\n执行到这里我们已经找到了微信的Documents位置，正式开始砸壳！\n> 这里有两种方式，一种是scp命令行拷贝  \n> 另一种是iFunBox工具操作  \n\n我这里采用的是第一种scp命令行  \n \n```  \nLeonLei-MBP:~ gaoshilei$ scp /Users/gaoshilei/Desktop/reverse/dumpdecrypted/dumpdecrypted.dylib   root@192.168.0.115:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents  \ndumpdecrypted.dylib                                                              100%  193KB 192.9KB/s   00:00 \n```  \n\n我们已经将dumpdecrypted.dylib拷贝到了微信沙盒的Document目录中，可以砸壳了：  \n  \n```  \niPhone-5S:~ root# cd /var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents/\niPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root# DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib /var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat\nmach-o decryption dumper\nDISCLAIMER: This tool is only meant for security research purposes, not for application crackers.\n[+] detected 64bit ARM binary in memory.\n[+] offset to cryptid found: @0x100024ca8(from 0x100024000) = ca8\n[+] Found encrypted data at address 00004000 of length 45678592 bytes - type 1.\n[+] Opening /private/var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat for reading.\n[+] Reading header\n[+] Detecting header type\n[+] Executable is a plain MACH-O image\n[+] Opening WeChat.decrypted for writing.\n[+] Copying the not encrypted start of the file\n[+] Dumping the decrypted data into the file\n[+] Copying the not encrypted remainder of the file\n[+] Setting the LC_ENCRYPTION_INFO->cryptid to 0 at offset ca8\n[+] Closing original file\n[+] Closing dump file\niPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root#  \n```\n等待命令执行完，此时已经完成砸壳，我们看一下当前目录都有啥：  \n  \n```  \niPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root# ls -o\ntotal 55272\ndrwxr-xr-x  6 mobile      272 Aug 26 13:48 00000000000000000000000000000000\ndrwxr-xr-x 20 mobile     1122 Oct 10 15:28 6f696a1b596ce2499419d844f90418aa\ndrwxr-xr-x  3 mobile      136 Oct  9 10:56 CrashReport\n-rw-r--r--  1 mobile      310 Aug 26 13:49 Ksid\n-rw-r--r--  1 mobile     1036 Oct 10 13:40 LocalInfo.lst\ndrwxr-xr-x  5 mobile      272 Aug 26 13:49 MMResourceMgr\ndrwxr-xr-x  2 mobile      748 Aug 26 13:51 MMappedKV\n-rw-r--r--  1 mobile       15 Oct 10 13:40 SafeMode.dat\n-rw-r--r--  1 root   56380816 Oct 10 15:37 WeChat.decrypted\n-rwxr-xr-x  1 root     197528 Oct 10 15:34 dumpdecrypted.dylib\n-rw-r--r--  1 mobile      448 Aug 26 13:49 mmupdateinfo.archive\n```  \n砸好壳的微信可执行文件`WeChat.decrypted`已经生成，现在就可以把文件拷到Mac上利用IDA或者Hopper的分析了。\n","source":"_posts/dumpdecrypted给App砸壳.md","raw":"title: dumpdecrypted给App砸壳\ndate: 2016-07-18 00:00:00\n---\n#### 1.前言\n> 我们都知道从AppStore下载的应用二进制文件被苹果进行了加密处理，也就是我们俗称的*壳*，我们要想对目标App进行逆向分析，必须解密目标二进制文件，俗称*砸壳*。  \n> long long ago有一种傻瓜式的砸壳方式，利用iPhoneCake源的AppCrackr进行一键砸壳，这种方式简单粗暴，省时省力，但正是因为它过于方便，导致几乎所有用户都可轻松上手，随便亵玩，所以不少用户都拿它来破解程序，这也导致了iOS越狱开发社区普遍认为这个软件助长了盗版的气焰，对iPhoneCake源进行了强烈谴责。迫于压力，iPhoneCake将AppCrackr下架。从此利用纯UI方式砸壳的行为已经走入绝路，只能利用更加geek更加niubility的方式来砸壳，这也是这篇文章介绍的主角**dumpdecrypted**  \n\n<!-- more --> \n#### 2.准备工作\n1. 一部已经越狱的手机 `我这里用的是iPhone 5S; iOS 9.1`\n2. 已经安装了OpenSSH\n3. 已经安装了[Cycript](http://www.cycript.org)\n4. [dumpdecrypted源码](https://github.com/stefanesser/dumpdecrypted/archive/master.zip)  \n\n#### 3.编译dumpdecrypted\n下载好之后将文件放到你自己的文件夹中，下面开始编译：  \n \n```  \nLeonLei-MBP:~ gaoshilei$ cd /Users/gaoshilei/Desktop/reverse/dumpdecrypted  \nLeonLei-MBP:dumpdecrypted gaoshilei$ make\n`xcrun --sdk iphoneos --find gcc` -Os  -Wimplicit -isysroot `xcrun --sdk iphoneos --show-sdk-path` -F`xcrun --sdk iphoneos --show-sdk-path`/System/Library/Frameworks -F`xcrun --sdk iphoneos --show-sdk-path`/System/Library/PrivateFrameworks -arch armv7 -arch armv7s -arch arm64 -dynamiclib -o dumpdecrypted.dylib dumpdecrypted.o\n```\n进入dumpdecrypted目录下之后，执行make命令，此时目录下会生成一个`dumpdecrypted.dylib`，这个文件生成一次即可，下次砸壳可以直接使用。\n\n#### 4.开始砸壳  \n##### 定位目标App可执行文件的位置  \n\n```  \nLeonLei-MBP:~ gaoshilei$ ssh root@192.168.0.115\niPhone-5S:~ root# ps -e\n  PID TTY           TIME CMD\n    1 ??         5:23.51 /sbin/launchd\n   23 ??         0:00.81 /usr/libexec/amfid\n   34 ??         1:28.92 /usr/sbin/mediaserverd\n   36 ??         4:23.49 /usr/libexec/fseventsd\n   38 ??         1:21.05 /System/Library/PrivateFrameworks/AssistantServices.framework/assistantd\n   40 ??         0:01.13 /System/Library/PrivateFrameworks/FileProvider.framework/Support/fileproviderd\n   42 ??         1:56.46 /usr/libexec/routined\n   46 ??         0:03.34 /System/Library/PrivateFrameworks/MediaRemote.framework/Support/mediaremoted\n   48 ??         0:00.86 /usr/libexec/misd\n   50 ??         0:18.48 /System/Library/Frameworks/HealthKit.framework/healthd\n   52 ??        19:18.39 /usr/libexec/configd\n   54 ??         3:30.26 /System/Library/CoreServices/powerd.bundle/powerd\n   58 ??         0:50.73 /usr/libexec/atc\n   60 ??        13:47.50 /usr/sbin/wifid\n   ···              ···\n 5673 ??         0:04.41 /var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat\n 5732 ??         0:00.32 /usr/libexec/ptpd -t usb\n 5735 ??         0:00.07 /usr/libexec/webinspectord\n 5741 ??         0:00.18 sshd: root@ttys000 \n 5770 ??         0:00.16 /System/Library/PrivateFrameworks/SyncedDefaults.framework/Support/syncdefaultsd\n 5785 ??         0:00.05 /System/Library/CoreServices/CFNetworkAgent\n```\n可以看到目前手机运行的进程中有微信的影子`/var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat` 我们已经找到微信可执行文件的位置\n##### 目标锁定，定位到目标App的Documents位置  \n \n```  \niPhone-5S:~ root# cycript -p WeChat  \ncy# [[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask][0]\n#file:///var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents/  \n```\n\n执行到这里我们已经找到了微信的Documents位置，正式开始砸壳！\n> 这里有两种方式，一种是scp命令行拷贝  \n> 另一种是iFunBox工具操作  \n\n我这里采用的是第一种scp命令行  \n \n```  \nLeonLei-MBP:~ gaoshilei$ scp /Users/gaoshilei/Desktop/reverse/dumpdecrypted/dumpdecrypted.dylib   root@192.168.0.115:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents  \ndumpdecrypted.dylib                                                              100%  193KB 192.9KB/s   00:00 \n```  \n\n我们已经将dumpdecrypted.dylib拷贝到了微信沙盒的Document目录中，可以砸壳了：  \n  \n```  \niPhone-5S:~ root# cd /var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents/\niPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root# DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib /var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat\nmach-o decryption dumper\nDISCLAIMER: This tool is only meant for security research purposes, not for application crackers.\n[+] detected 64bit ARM binary in memory.\n[+] offset to cryptid found: @0x100024ca8(from 0x100024000) = ca8\n[+] Found encrypted data at address 00004000 of length 45678592 bytes - type 1.\n[+] Opening /private/var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat for reading.\n[+] Reading header\n[+] Detecting header type\n[+] Executable is a plain MACH-O image\n[+] Opening WeChat.decrypted for writing.\n[+] Copying the not encrypted start of the file\n[+] Dumping the decrypted data into the file\n[+] Copying the not encrypted remainder of the file\n[+] Setting the LC_ENCRYPTION_INFO->cryptid to 0 at offset ca8\n[+] Closing original file\n[+] Closing dump file\niPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root#  \n```\n等待命令执行完，此时已经完成砸壳，我们看一下当前目录都有啥：  \n  \n```  \niPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root# ls -o\ntotal 55272\ndrwxr-xr-x  6 mobile      272 Aug 26 13:48 00000000000000000000000000000000\ndrwxr-xr-x 20 mobile     1122 Oct 10 15:28 6f696a1b596ce2499419d844f90418aa\ndrwxr-xr-x  3 mobile      136 Oct  9 10:56 CrashReport\n-rw-r--r--  1 mobile      310 Aug 26 13:49 Ksid\n-rw-r--r--  1 mobile     1036 Oct 10 13:40 LocalInfo.lst\ndrwxr-xr-x  5 mobile      272 Aug 26 13:49 MMResourceMgr\ndrwxr-xr-x  2 mobile      748 Aug 26 13:51 MMappedKV\n-rw-r--r--  1 mobile       15 Oct 10 13:40 SafeMode.dat\n-rw-r--r--  1 root   56380816 Oct 10 15:37 WeChat.decrypted\n-rwxr-xr-x  1 root     197528 Oct 10 15:34 dumpdecrypted.dylib\n-rw-r--r--  1 mobile      448 Aug 26 13:49 mmupdateinfo.archive\n```  \n砸好壳的微信可执行文件`WeChat.decrypted`已经生成，现在就可以把文件拷到Mac上利用IDA或者Hopper的分析了。\n","slug":"dumpdecrypted给App砸壳","published":1,"updated":"2016-10-31T14:50:36.607Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civdhewvd00014h6qrece5ec3","content":"<h4 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h4><blockquote>\n<p>我们都知道从AppStore下载的应用二进制文件被苹果进行了加密处理，也就是我们俗称的<em>壳</em>，我们要想对目标App进行逆向分析，必须解密目标二进制文件，俗称<em>砸壳</em>。<br>long long ago有一种傻瓜式的砸壳方式，利用iPhoneCake源的AppCrackr进行一键砸壳，这种方式简单粗暴，省时省力，但正是因为它过于方便，导致几乎所有用户都可轻松上手，随便亵玩，所以不少用户都拿它来破解程序，这也导致了iOS越狱开发社区普遍认为这个软件助长了盗版的气焰，对iPhoneCake源进行了强烈谴责。迫于压力，iPhoneCake将AppCrackr下架。从此利用纯UI方式砸壳的行为已经走入绝路，只能利用更加geek更加niubility的方式来砸壳，这也是这篇文章介绍的主角<strong>dumpdecrypted</strong>  </p>\n</blockquote>\n<a id=\"more\"></a> \n<h4 id=\"2-准备工作\"><a href=\"#2-准备工作\" class=\"headerlink\" title=\"2.准备工作\"></a>2.准备工作</h4><ol>\n<li>一部已经越狱的手机 <code>我这里用的是iPhone 5S; iOS 9.1</code></li>\n<li>已经安装了OpenSSH</li>\n<li>已经安装了<a href=\"http://www.cycript.org\" target=\"_blank\" rel=\"external\">Cycript</a></li>\n<li><a href=\"https://github.com/stefanesser/dumpdecrypted/archive/master.zip\" target=\"_blank\" rel=\"external\">dumpdecrypted源码</a>  </li>\n</ol>\n<h4 id=\"3-编译dumpdecrypted\"><a href=\"#3-编译dumpdecrypted\" class=\"headerlink\" title=\"3.编译dumpdecrypted\"></a>3.编译dumpdecrypted</h4><p>下载好之后将文件放到你自己的文件夹中，下面开始编译：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ cd /Users/gaoshilei/Desktop/reverse/dumpdecrypted  </div><div class=\"line\">LeonLei-MBP:dumpdecrypted gaoshilei$ make</div><div class=\"line\">`xcrun --sdk iphoneos --find gcc` -Os  -Wimplicit -isysroot `xcrun --sdk iphoneos --show-sdk-path` -F`xcrun --sdk iphoneos --show-sdk-path`/System/Library/Frameworks -F`xcrun --sdk iphoneos --show-sdk-path`/System/Library/PrivateFrameworks -arch armv7 -arch armv7s -arch arm64 -dynamiclib -o dumpdecrypted.dylib dumpdecrypted.o</div></pre></td></tr></table></figure>\n<p>进入dumpdecrypted目录下之后，执行make命令，此时目录下会生成一个<code>dumpdecrypted.dylib</code>，这个文件生成一次即可，下次砸壳可以直接使用。</p>\n<h4 id=\"4-开始砸壳\"><a href=\"#4-开始砸壳\" class=\"headerlink\" title=\"4.开始砸壳\"></a>4.开始砸壳</h4><h5 id=\"定位目标App可执行文件的位置\"><a href=\"#定位目标App可执行文件的位置\" class=\"headerlink\" title=\"定位目标App可执行文件的位置\"></a>定位目标App可执行文件的位置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ ssh root@192.168.0.115</div><div class=\"line\">iPhone-5S:~ root# ps -e</div><div class=\"line\">  PID TTY           TIME CMD</div><div class=\"line\">    1 ??         5:23.51 /sbin/launchd</div><div class=\"line\">   23 ??         0:00.81 /usr/libexec/amfid</div><div class=\"line\">   34 ??         1:28.92 /usr/sbin/mediaserverd</div><div class=\"line\">   36 ??         4:23.49 /usr/libexec/fseventsd</div><div class=\"line\">   38 ??         1:21.05 /System/Library/PrivateFrameworks/AssistantServices.framework/assistantd</div><div class=\"line\">   40 ??         0:01.13 /System/Library/PrivateFrameworks/FileProvider.framework/Support/fileproviderd</div><div class=\"line\">   42 ??         1:56.46 /usr/libexec/routined</div><div class=\"line\">   46 ??         0:03.34 /System/Library/PrivateFrameworks/MediaRemote.framework/Support/mediaremoted</div><div class=\"line\">   48 ??         0:00.86 /usr/libexec/misd</div><div class=\"line\">   50 ??         0:18.48 /System/Library/Frameworks/HealthKit.framework/healthd</div><div class=\"line\">   52 ??        19:18.39 /usr/libexec/configd</div><div class=\"line\">   54 ??         3:30.26 /System/Library/CoreServices/powerd.bundle/powerd</div><div class=\"line\">   58 ??         0:50.73 /usr/libexec/atc</div><div class=\"line\">   60 ??        13:47.50 /usr/sbin/wifid</div><div class=\"line\">   ···              ···</div><div class=\"line\"> 5673 ??         0:04.41 /var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat</div><div class=\"line\"> 5732 ??         0:00.32 /usr/libexec/ptpd -t usb</div><div class=\"line\"> 5735 ??         0:00.07 /usr/libexec/webinspectord</div><div class=\"line\"> 5741 ??         0:00.18 sshd: root@ttys000 </div><div class=\"line\"> 5770 ??         0:00.16 /System/Library/PrivateFrameworks/SyncedDefaults.framework/Support/syncdefaultsd</div><div class=\"line\"> 5785 ??         0:00.05 /System/Library/CoreServices/CFNetworkAgent</div></pre></td></tr></table></figure>\n<p>可以看到目前手机运行的进程中有微信的影子<code>/var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat</code> 我们已经找到微信可执行文件的位置</p>\n<h5 id=\"目标锁定，定位到目标App的Documents位置\"><a href=\"#目标锁定，定位到目标App的Documents位置\" class=\"headerlink\" title=\"目标锁定，定位到目标App的Documents位置\"></a>目标锁定，定位到目标App的Documents位置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">iPhone-5S:~ root# cycript -p WeChat  </div><div class=\"line\">cy# [[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask][0]</div><div class=\"line\">#file:///var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents/</div></pre></td></tr></table></figure>\n<p>执行到这里我们已经找到了微信的Documents位置，正式开始砸壳！</p>\n<blockquote>\n<p>这里有两种方式，一种是scp命令行拷贝<br>另一种是iFunBox工具操作  </p>\n</blockquote>\n<p>我这里采用的是第一种scp命令行  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ scp /Users/gaoshilei/Desktop/reverse/dumpdecrypted/dumpdecrypted.dylib   root@192.168.0.115:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents  </div><div class=\"line\">dumpdecrypted.dylib                                                              100%  193KB 192.9KB/s   00:00 </div><div class=\"line\">```  </div><div class=\"line\"></div><div class=\"line\">我们已经将dumpdecrypted.dylib拷贝到了微信沙盒的Document目录中，可以砸壳了：  </div><div class=\"line\">  </div><div class=\"line\">```  </div><div class=\"line\">iPhone-5S:~ root# cd /var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents/</div><div class=\"line\">iPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root# DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib /var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat</div><div class=\"line\">mach-o decryption dumper</div><div class=\"line\">DISCLAIMER: This tool is only meant for security research purposes, not for application crackers.</div><div class=\"line\">[+] detected 64bit ARM binary in memory.</div><div class=\"line\">[+] offset to cryptid found: @0x100024ca8(from 0x100024000) = ca8</div><div class=\"line\">[+] Found encrypted data at address 00004000 of length 45678592 bytes - type 1.</div><div class=\"line\">[+] Opening /private/var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat for reading.</div><div class=\"line\">[+] Reading header</div><div class=\"line\">[+] Detecting header type</div><div class=\"line\">[+] Executable is a plain MACH-O image</div><div class=\"line\">[+] Opening WeChat.decrypted for writing.</div><div class=\"line\">[+] Copying the not encrypted start of the file</div><div class=\"line\">[+] Dumping the decrypted data into the file</div><div class=\"line\">[+] Copying the not encrypted remainder of the file</div><div class=\"line\">[+] Setting the LC_ENCRYPTION_INFO-&gt;cryptid to 0 at offset ca8</div><div class=\"line\">[+] Closing original file</div><div class=\"line\">[+] Closing dump file</div><div class=\"line\">iPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root#</div></pre></td></tr></table></figure>\n<p>等待命令执行完，此时已经完成砸壳，我们看一下当前目录都有啥：  </p>\n<pre><code>iPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root# ls -o\ntotal 55272\ndrwxr-xr-x  6 mobile      272 Aug 26 13:48 00000000000000000000000000000000\ndrwxr-xr-x 20 mobile     1122 Oct 10 15:28 6f696a1b596ce2499419d844f90418aa\ndrwxr-xr-x  3 mobile      136 Oct  9 10:56 CrashReport\n-rw-r--r--  1 mobile      310 Aug 26 13:49 Ksid\n-rw-r--r--  1 mobile     1036 Oct 10 13:40 LocalInfo.lst\ndrwxr-xr-x  5 mobile      272 Aug 26 13:49 MMResourceMgr\ndrwxr-xr-x  2 mobile      748 Aug 26 13:51 MMappedKV\n-rw-r--r--  1 mobile       15 Oct 10 13:40 SafeMode.dat\n-rw-r--r--  1 root   56380816 Oct 10 15:37 WeChat.decrypted\n-rwxr-xr-x  1 root     197528 Oct 10 15:34 dumpdecrypted.dylib\n-rw-r--r--  1 mobile      448 Aug 26 13:49 mmupdateinfo.archive\n</code></pre><p>砸好壳的微信可执行文件<code>WeChat.decrypted</code>已经生成，现在就可以把文件拷到Mac上利用IDA或者Hopper的分析了。</p>\n","excerpt":"<h4 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h4><blockquote>\n<p>我们都知道从AppStore下载的应用二进制文件被苹果进行了加密处理，也就是我们俗称的<em>壳</em>，我们要想对目标App进行逆向分析，必须解密目标二进制文件，俗称<em>砸壳</em>。<br>long long ago有一种傻瓜式的砸壳方式，利用iPhoneCake源的AppCrackr进行一键砸壳，这种方式简单粗暴，省时省力，但正是因为它过于方便，导致几乎所有用户都可轻松上手，随便亵玩，所以不少用户都拿它来破解程序，这也导致了iOS越狱开发社区普遍认为这个软件助长了盗版的气焰，对iPhoneCake源进行了强烈谴责。迫于压力，iPhoneCake将AppCrackr下架。从此利用纯UI方式砸壳的行为已经走入绝路，只能利用更加geek更加niubility的方式来砸壳，这也是这篇文章介绍的主角<strong>dumpdecrypted</strong>  </p>\n</blockquote>","more":"<h4 id=\"2-准备工作\"><a href=\"#2-准备工作\" class=\"headerlink\" title=\"2.准备工作\"></a>2.准备工作</h4><ol>\n<li>一部已经越狱的手机 <code>我这里用的是iPhone 5S; iOS 9.1</code></li>\n<li>已经安装了OpenSSH</li>\n<li>已经安装了<a href=\"http://www.cycript.org\">Cycript</a></li>\n<li><a href=\"https://github.com/stefanesser/dumpdecrypted/archive/master.zip\">dumpdecrypted源码</a>  </li>\n</ol>\n<h4 id=\"3-编译dumpdecrypted\"><a href=\"#3-编译dumpdecrypted\" class=\"headerlink\" title=\"3.编译dumpdecrypted\"></a>3.编译dumpdecrypted</h4><p>下载好之后将文件放到你自己的文件夹中，下面开始编译：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ cd /Users/gaoshilei/Desktop/reverse/dumpdecrypted  </div><div class=\"line\">LeonLei-MBP:dumpdecrypted gaoshilei$ make</div><div class=\"line\">`xcrun --sdk iphoneos --find gcc` -Os  -Wimplicit -isysroot `xcrun --sdk iphoneos --show-sdk-path` -F`xcrun --sdk iphoneos --show-sdk-path`/System/Library/Frameworks -F`xcrun --sdk iphoneos --show-sdk-path`/System/Library/PrivateFrameworks -arch armv7 -arch armv7s -arch arm64 -dynamiclib -o dumpdecrypted.dylib dumpdecrypted.o</div></pre></td></tr></table></figure>\n<p>进入dumpdecrypted目录下之后，执行make命令，此时目录下会生成一个<code>dumpdecrypted.dylib</code>，这个文件生成一次即可，下次砸壳可以直接使用。</p>\n<h4 id=\"4-开始砸壳\"><a href=\"#4-开始砸壳\" class=\"headerlink\" title=\"4.开始砸壳\"></a>4.开始砸壳</h4><h5 id=\"定位目标App可执行文件的位置\"><a href=\"#定位目标App可执行文件的位置\" class=\"headerlink\" title=\"定位目标App可执行文件的位置\"></a>定位目标App可执行文件的位置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ ssh root@192.168.0.115</div><div class=\"line\">iPhone-5S:~ root# ps -e</div><div class=\"line\">  PID TTY           TIME CMD</div><div class=\"line\">    1 ??         5:23.51 /sbin/launchd</div><div class=\"line\">   23 ??         0:00.81 /usr/libexec/amfid</div><div class=\"line\">   34 ??         1:28.92 /usr/sbin/mediaserverd</div><div class=\"line\">   36 ??         4:23.49 /usr/libexec/fseventsd</div><div class=\"line\">   38 ??         1:21.05 /System/Library/PrivateFrameworks/AssistantServices.framework/assistantd</div><div class=\"line\">   40 ??         0:01.13 /System/Library/PrivateFrameworks/FileProvider.framework/Support/fileproviderd</div><div class=\"line\">   42 ??         1:56.46 /usr/libexec/routined</div><div class=\"line\">   46 ??         0:03.34 /System/Library/PrivateFrameworks/MediaRemote.framework/Support/mediaremoted</div><div class=\"line\">   48 ??         0:00.86 /usr/libexec/misd</div><div class=\"line\">   50 ??         0:18.48 /System/Library/Frameworks/HealthKit.framework/healthd</div><div class=\"line\">   52 ??        19:18.39 /usr/libexec/configd</div><div class=\"line\">   54 ??         3:30.26 /System/Library/CoreServices/powerd.bundle/powerd</div><div class=\"line\">   58 ??         0:50.73 /usr/libexec/atc</div><div class=\"line\">   60 ??        13:47.50 /usr/sbin/wifid</div><div class=\"line\">   ···              ···</div><div class=\"line\"> 5673 ??         0:04.41 /var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat</div><div class=\"line\"> 5732 ??         0:00.32 /usr/libexec/ptpd -t usb</div><div class=\"line\"> 5735 ??         0:00.07 /usr/libexec/webinspectord</div><div class=\"line\"> 5741 ??         0:00.18 sshd: root@ttys000 </div><div class=\"line\"> 5770 ??         0:00.16 /System/Library/PrivateFrameworks/SyncedDefaults.framework/Support/syncdefaultsd</div><div class=\"line\"> 5785 ??         0:00.05 /System/Library/CoreServices/CFNetworkAgent</div></pre></td></tr></table></figure>\n<p>可以看到目前手机运行的进程中有微信的影子<code>/var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat</code> 我们已经找到微信可执行文件的位置</p>\n<h5 id=\"目标锁定，定位到目标App的Documents位置\"><a href=\"#目标锁定，定位到目标App的Documents位置\" class=\"headerlink\" title=\"目标锁定，定位到目标App的Documents位置\"></a>目标锁定，定位到目标App的Documents位置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">iPhone-5S:~ root# cycript -p WeChat  </div><div class=\"line\">cy# [[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask][0]</div><div class=\"line\">#file:///var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents/</div></pre></td></tr></table></figure>\n<p>执行到这里我们已经找到了微信的Documents位置，正式开始砸壳！</p>\n<blockquote>\n<p>这里有两种方式，一种是scp命令行拷贝<br>另一种是iFunBox工具操作  </p>\n</blockquote>\n<p>我这里采用的是第一种scp命令行  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ scp /Users/gaoshilei/Desktop/reverse/dumpdecrypted/dumpdecrypted.dylib   root@192.168.0.115:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents  </div><div class=\"line\">dumpdecrypted.dylib                                                              100%  193KB 192.9KB/s   00:00 </div><div class=\"line\">```  </div><div class=\"line\"></div><div class=\"line\">我们已经将dumpdecrypted.dylib拷贝到了微信沙盒的Document目录中，可以砸壳了：  </div><div class=\"line\">  </div><div class=\"line\">```  </div><div class=\"line\">iPhone-5S:~ root# cd /var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents/</div><div class=\"line\">iPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root# DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib /var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat</div><div class=\"line\">mach-o decryption dumper</div><div class=\"line\">DISCLAIMER: This tool is only meant for security research purposes, not for application crackers.</div><div class=\"line\">[+] detected 64bit ARM binary in memory.</div><div class=\"line\">[+] offset to cryptid found: @0x100024ca8(from 0x100024000) = ca8</div><div class=\"line\">[+] Found encrypted data at address 00004000 of length 45678592 bytes - type 1.</div><div class=\"line\">[+] Opening /private/var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat for reading.</div><div class=\"line\">[+] Reading header</div><div class=\"line\">[+] Detecting header type</div><div class=\"line\">[+] Executable is a plain MACH-O image</div><div class=\"line\">[+] Opening WeChat.decrypted for writing.</div><div class=\"line\">[+] Copying the not encrypted start of the file</div><div class=\"line\">[+] Dumping the decrypted data into the file</div><div class=\"line\">[+] Copying the not encrypted remainder of the file</div><div class=\"line\">[+] Setting the LC_ENCRYPTION_INFO-&gt;cryptid to 0 at offset ca8</div><div class=\"line\">[+] Closing original file</div><div class=\"line\">[+] Closing dump file</div><div class=\"line\">iPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root#</div></pre></td></tr></table></figure>\n<p>等待命令执行完，此时已经完成砸壳，我们看一下当前目录都有啥：  </p>\n<pre><code>iPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root# ls -o\ntotal 55272\ndrwxr-xr-x  6 mobile      272 Aug 26 13:48 00000000000000000000000000000000\ndrwxr-xr-x 20 mobile     1122 Oct 10 15:28 6f696a1b596ce2499419d844f90418aa\ndrwxr-xr-x  3 mobile      136 Oct  9 10:56 CrashReport\n-rw-r--r--  1 mobile      310 Aug 26 13:49 Ksid\n-rw-r--r--  1 mobile     1036 Oct 10 13:40 LocalInfo.lst\ndrwxr-xr-x  5 mobile      272 Aug 26 13:49 MMResourceMgr\ndrwxr-xr-x  2 mobile      748 Aug 26 13:51 MMappedKV\n-rw-r--r--  1 mobile       15 Oct 10 13:40 SafeMode.dat\n-rw-r--r--  1 root   56380816 Oct 10 15:37 WeChat.decrypted\n-rwxr-xr-x  1 root     197528 Oct 10 15:34 dumpdecrypted.dylib\n-rw-r--r--  1 mobile      448 Aug 26 13:49 mmupdateinfo.archive\n</code></pre><p>砸好壳的微信可执行文件<code>WeChat.decrypted</code>已经生成，现在就可以把文件拷到Mac上利用IDA或者Hopper的分析了。</p>"},{"title":"iPhone查找序列号生成函数","date":"2015-08-02T16:00:00.000Z","_content":"\n##  前言  \n在iOS7之前我们可以通过`- (NSString *)uniqueIdentifier`这个方法获取iPhone的唯一标识符，也叫作UDID。不过自从iOS7苹果就把这个方法给禁了，此时我们想要获取iPhone的唯一标识符就很困难。  \n不过苹果提供一个叫做IDFA的标识符，这个IDFA是广告标识符用来追踪广告投放的，不过用户可以在设置中手动重置IDFA，可靠性很低，目前常见的两种标记iPhone的方式为  \n*  openUDID  \n*  IDFA或UUID+keychain  \n\n这两种模式都有个弊端，用户重置手机或者刷机唯一标识符会发生变化，不过对于大多数情况是够用了。看来苹果是把路给封死了，有没有办法拿到之前的UDID呢？我们注意到iPhone的设置通用关于里面有手机的硬件信息，其中有一个serialNumber，这个serialnumber就是我们查询手机是否过保的依据，那么它肯定是唯一的，所以下文是围绕这个进行的探索。最终是可以拿到这个serialNumber的， 不过由于苹果的沙盒限制，所以只能在越狱机中拿到，如果想在非越狱机中拿到必须添加entitlements文件来获取权限，可想而知这个应用是无法上架的。**下文仅作为逆向工程的一种思路和探索，请勿用于非法用途。** \n<!-- more -->\n##  正文\n###\t一、SSH连接手机（USB模式）\n####\t1.映射端口\n```shell\nLeonLei-MBP:~ gaoshilei$ /Users/gaoshilei/Desktop/reverse/USBSSH/tcprelay.py -t 22:6666\nForwarding local port 6666 to remote port 22\n```\n####\t2.连接手机，并且用grep命令快速筛选当前我们要调试的应用Preferences，附加debugserver开始1234端口等待lldb调试\n```OC\nLeonLei-MBP:~ gaoshilei$ ssh root@localhost -p 6666\niPhone-5S:~ root# ps -e | grep Pre\n  270 ??         0:00.29 /System/Library/PrivateFrameworks/MobileSoftwareUpdate.framework/XPCServices/com.apple.MobileSoftwareUpdate.CleanupPreparePathService.xpc/com.apple.MobileSoftwareUpdate.CleanupPreparePathService\n 1192 ??         0:14.26 /var/db/stash/_.fP74Fg/Applications/Preferences.app/Preferences\n 1289 ttys000    0:00.01 grep Pre\niPhone-5S:~ root# debugserver *:1234 -a \"Preferences\"\ndebugserver-@(#)PROGRAM:debugserver  PROJECT:debugserver-340.3.51.1\n for arm64.\nAttaching to process Preferences...\nListening to port 1234 for a connection from *...\n```\n####\t3.完成以上两步接下来就可以进行lldb调试了，首先要把远端（手机）的1234端口映射到本地，跟前面提到的SSH端口映射一样\n```Object-C\nLeonLei-MBP:~ gaoshilei$ /Users/gaoshilei/Desktop/reverse/USBSSH/tcprelay.py -t 1234:1234\nForwarding local port 1234 to remote port 1234\n```\n###\t二、通过LLDB、IDA寻找线索\nlldb的调试端口已经打开，此时我们可以进入调试\n\n```js\nLeonLei-MBP:~ gaoshilei$ lldb\n(lldb) process connect connect://localhost:1234\nProcess 1192 stopped  \n* thread #1: tid = 0x523a6, 0x000000019a3c8a40 libsystem_kernel.dylib`mach_msg_trap + 8, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP  \n    frame #0: 0x000000019a3c8a40 libsystem_kernel.dylib`mach_msg_trap + 8\nlibsystem_kernel.dylib`mach_msg_trap:\n->  0x19a3c8a40 <+8>: ret    \nlibsystem_kernel.dylib`mach_msg_overwrite_trap:\n    0x19a3c8a44 <+0>: movn   x16, #0x1f\n    0x19a3c8a48 <+4>: svc    #0x80\n    0x19a3c8a4c <+8>: ret    \n```\n此时我们已经成功进入Preferences的调试阶段，先c一下，让程序继续运行\n  \n```shell\n(lldb) c\nProcess 1192 resuming\n```\n这么做的原因是我们待会要打印image的基地址偏移，有可能在我们打印的image list中没有我们想要的image。\n此时我们已经找到到Preference.framework的基地址偏移，见下图\n\n```\n(lldb) im li -o -f\n[  0] 0x00000000000dc000 /var/db/stash/_.fP74Fg/Applications/Preferences.app/Preferences(0x00000001000dc000)\n[  1] 0x0000000100100000 /Library/MobileSubstrate/MobileSubstrate.dylib(0x0000000100100000)\n[  2] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/PrivateFrameworks/BulletinBoard.framework/BulletinBoard\n[  3] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation\n[  4] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/Frameworks/IOKit.framework/Versions/A/IOKit\n…\n[ 44] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/PrivateFrameworks/Preferences.framework/Preferences\n…  \n```\n我们要找的image的序号在这里是44，它的基地址偏移为0x2e50000，我们把从iPhone中导出的PrivateFrameworks中的Preferences.framework丢到IDA中进行分析，这个二进制文件比较小，很快就分析完成，在前面我们已经知道iPhone的唯一序列号serial number是通过PSListController生成的，并且我们知道这是一个cell，我们要去调试`[PSListController tableView:cellForRowAtIndexPath:]`这个方法，从中找到cell值的来源，从而找到获取序列号的方法。\n\n```\n__text:00000001908040C8 ; -[PSListController tableView:cellForRowAtIndexPath:]\n__text:00000001908040C8 __PSListController_tableView_cellForRowAtIndexPath__\n__text:00000001908040C8                                         ; DATA XREF: __objc_const:000000019C069B88\u0019o\n__text:00000001908040C8\n__text:00000001908040C8 var_80          = -0x80\n__text:00000001908040C8 var_78          = -0x78\n__text:00000001908040C8 var_70          = -0x70\n__text:00000001908040C8 var_68          = -0x68\n__text:00000001908040C8 var_60          = -0x60\n__text:00000001908040C8 var_50          = -0x50\n__text:00000001908040C8 var_40          = -0x40\n__text:00000001908040C8 var_30          = -0x30\n__text:00000001908040C8 var_20          = -0x20\n__text:00000001908040C8 var_10          = -0x10\n__text:00000001908040C8\n__text:00000001908040C8                 STP             X28, X27, [SP,#var_60]!\n__text:00000001908040CC                 STP             X26, X25, [SP,#0x60+var_50]\n__text:00000001908040D0                 STP             X24, X23, [SP,#0x60+var_40]\n__text:00000001908040D4                 STP             X22, X21, [SP,#0x60+var_30]\n__text:00000001908040D8                 STP             X20, X19, [SP,#0x60+var_20]\n__text:00000001908040DC                 STP             X29, X30, [SP,#0x60+var_10]\n__text:00000001908040E0                 ADD             X29, SP, #0x60+var_10\n__text:00000001908040E4                 SUB             SP, SP, #0x20\n__text:00000001908040E8                 MOV             X21, X3\n__text:00000001908040EC                 MOV             X20, X0\n__text:00000001908040F0                 MOV             X0, X2\n__text:00000001908040F4                 BL              0x96C400A0\n__text:00000001908040F8                 MOV             X26, X0\n__text:00000001908040FC                 ADRP            X8, #off_19DACC568@PAGE\n__text:0000000190804100                 LDR             X1, [X8,#off_19DACC568@PAGEOFF]\n__text:0000000190804104                 MOV             X0, X20\n__text:0000000190804108                 MOV             X2, X21\n__text:000000019080410C                 BL              0x96C39BC0\n__text:0000000190804110                 MOV             X2, X0\n__text:0000000190804114                 ADRP            X8, #_OBJC_IVAR_$_PSListController._specifiers@PAGE ; NSArray *_specifiers;\n__text:0000000190804118                 LDRSW           X27, [X8,#_OBJC_IVAR_$_PSListController._specifiers@PAGEOFF] ; NSArray *_specifiers;\n__text:000000019080411C                 LDR             X0, [X20,X27]\n__text:0000000190804120                 ADRP            X8, #off_19DACC558@PAGE\n……\n```\n我们在Preference.framework中基地址为0x190804114的位置打个断点，具体的做法是：\n\n```\n(lldb) br s -a 0x190804114+0x2e50000\nBreakpoint 1: where = Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76, address = 0x0000000193654114\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x0000000193654114 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x0000000193654114 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76\nPreferences`-[PSListController tableView:cellForRowAtIndexPath:]:\n->  0x193654114 <+76>: adrp   x8, 53965\n    0x193654118 <+80>: ldrsw  x27, [x8, #516]\n    0x19365411c <+84>: ldr    x0, [x20, x27]\n    0x193654120 <+88>: adrp   x8, 53960\n```\n这里断点这样打是因为系统加载可执行文件和各种framework的时候会有一个地址偏移，我们在打断点的时候要把这个偏移量加上，这样我们打的断点才是准确的。\n可以看到我们已经成功打了一个断点，断点的address = 0x193654114。此时我们打印变量x0和x27的值\n\n```\n(lldb) po $x0\n13\n(lldb) po $x27\n1104\n```\n我们执行ni让程序继续（这里的`ni`命令相当于Xcode的那个下箭头命令，也就是下一行）\n\n```\n(lldb) ni\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x0000000193654118 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 80, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x0000000193654118 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 80\nPreferences`-[PSListController tableView:cellForRowAtIndexPath:]:\n->  0x193654118 <+80>: ldrsw  x27, [x8, #516]\n    0x19365411c <+84>: ldr    x0, [x20, x27]\n    0x193654120 <+88>: adrp   x8, 53960\n    0x193654124 <+92>: ldr    x22, [x8, #1368]\n(lldb) ni\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x000000019365411c Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 84, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x000000019365411c Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 84\nPreferences`-[PSListController tableView:cellForRowAtIndexPath:]:\n->  0x19365411c <+84>: ldr    x0, [x20, x27]\n    0x193654120 <+88>: adrp   x8, 53960\n    0x193654124 <+92>: ldr    x22, [x8, #1368]\n    0x193654128 <+96>: mov    x1, x22\n(lldb) po $x27\n848\n\n(lldb) po $x0\n13\n```\n我们ni的两次，程序已经走到0x19080411C的位置，然后我们继续打印变量x0和x27的值\n\n```\n(lldb) po $x0\n13\n(lldb) po $x27\n1104\n```\n打印出来的x0和x27都是随机数，还是没有什么收获，我们继续\n\n```\n(lldb) ni\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x0000000193654120 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 88, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x0000000193654120 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 88\nPreferences`-[PSListController tableView:cellForRowAtIndexPath:]:\n->  0x193654120 <+88>:  adrp   x8, 53960\n    0x193654124 <+92>:  ldr    x22, [x8, #1368]\n    0x193654128 <+96>:  mov    x1, x22\n    0x19365412c <+100>: bl     0x199a89bc0               ; objc_msgSend\n(lldb) po $x0\n<__NSArrayI 0x13105a780>(\nG: <PSSpecifier 0x12ff50cf0: ID 0, Name '' target <(null): 0x0>> 0x12ff50cf0,\n<PSSpecifier 0x12ff50f50: ID NAME_CELL_ID, Name 'Name' target <AboutDataSource: 0x131028390>>,\nG: <PSSpecifier 0x12ff51680: ID 2, Name '' target <(null): 0x0>> 0x12ff51680,\n<PSSpecifier 0x12ff52360: ID NETWORK, Name 'Network' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff52420: ID SONGS, Name 'Songs' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff519f0: ID VIDEOS, Name 'Videos' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff51ab0: ID PHOTOS, Name 'Photos' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff51b70: ID APPLICATIONS, Name 'Applications' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff524e0: ID User Data Capacity, Name 'Capacity' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff525a0: ID User Data Available, Name 'Available' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff526a0: ID ProductVersion, Name 'Version' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff52850: ID CARRIER_VERSION, Name 'Carrier' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff52980: ID ProductModel, Name 'Model' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff52a60: ID SerialNumber, Name 'Serial Number' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff52b90: ID MACAddress, Name 'Wi-Fi Address' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff51050: ID BTMACAddress, Name 'Bluetooth' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12fde95d0: ID ModemVersion, Name 'Modem Firmware' target <AboutDataSource: 0x131028390>>,\nG: <PSSpecifier 0x131031e90: ID 17, Name '' target <(null): 0x0>> 0x131031e90,\n<PSSpecifier 0x12fde9c40: ID LEGAL_AND_REGULATORY, Name 'Legal' target <(null): 0x0>>,\nG: <PSSpecifier 0x131029dc0: ID TRUST_STORE_GROUP, Name '' target <(null): 0x0>> 0x131029dc0,\n<PSSpecifier 0x131033520: ID TRUST_STORE, Name 'Trust Store' target <AboutDataSource: 0x131028390>>\n)\n```\n我们让程序执行下一步，发现此时x0已经有值了，可以明显的看出，x0的值是在0x190804114~0x19080411C这段代码生成的，下面我们的工作重点就是寻找这段代码干了什么，胜利就在眼前！下面我们验证一下这里面到底有没有我们要的序列号：\n\n```\n(lldb) po [[$x0 objectAtIndex:13] class]\nPSSpecifier\n(lldb) po [[$x0 objectAtIndex:13] properties]\n{\n    cellObject = \"<PSTableCell: 0x130800000; baseClass = UITableViewCell; frame = (0 565; 320 45); text = 'Serial Number'; hidden = YES; autoresize = W; tag = 4; gestureRecognizers = <NSArray: 0x12ff821c0>; layer = <CALayer: 0x12fd7d340>>\";\n    id = SerialNumber;\n    isCopyable = 1;\n    value = DNPMVG0EFF9V;\n}\n```\n我们打印数组中存放cell数据的object属于哪个类，发现是`PSSpecifier`，我们找到之前导出的类的头文件，发现这个类有一个叫做`properties`的实例方法，我们调用一下发现我们要的序列号就在里面`value = DNPMVG0EFF9V`，这跟iPhone设置中看到的序列号是一致的。猜测这个数组里面存放着系统设置中`PSUIAboutController`中所有cel的数据，这个数组下一个肯定要传递到cell生成的方法中，这个就不做验证了，大事重要，我们继续找序列号的生成方法。\n这个`PSSpecifier`中有一个`AboutDataSource`对象，这个非常可疑，从名称上可以判断，这个类是专门用于数据处理的，不过在这之前我们还是先验证一下，在0x190804114~0x19080411C这段地址中，执行了`_PSListController._specifiers`，我们从`PSListController`的头文件（下文有讲怎么获取）中可以看到有一个specifiers属性，我们在IDA分析的文件中找到`[PSListController specifiers]`，我们先定位到方法在二进制文件中的位置：\n\n```\n__text:00000001907FE4A8 ; -[PSListController specifiers]\n__text:00000001907FE4A8 __PSListController_specifiers_          ; DATA XREF: __objc_const:000000019C069A08\u0019o\n__text:00000001907FE4A8\n__text:00000001907FE4A8 var_40          = -0x40\n__text:00000001907FE4A8 var_30          = -0x30\n__text:00000001907FE4A8 var_20          = -0x20\n__text:00000001907FE4A8 var_10          = -0x10\n__text:00000001907FE4A8\n__text:00000001907FE4A8                 STP             X24, X23, [SP,#var_40]!\n__text:00000001907FE4AC                 STP             X22, X21, [SP,#0x40+var_30]\n__text:00000001907FE4B0                 STP             X20, X19, [SP,#0x40+var_20]\n__text:00000001907FE4B4                 STP             X29, X30, [SP,#0x40+var_10]\n__text:00000001907FE4B8                 ADD             X29, SP, #0x40+var_10\n__text:00000001907FE4BC                 MOV             X19, X0\n__text:00000001907FE4C0                 ADRP            X8, #_OBJC_IVAR_$_PSListController._specifiers@PAGE ; NSArray *_specifiers;\n__text:00000001907FE4C4                 LDRSW           X22, [X8,#_OBJC_IVAR_$_PSListController._specifiers@PAGEOFF] ; NSArray *_specifiers;\n__text:00000001907FE4C8                 LDR             X8, [X19,X22]\n__text:00000001907FE4CC                 CBNZ            X8, loc_1907FE5E0\n__text:00000001907FE4D0                 ADRP            X8, #_OBJC_IVAR_$_PSListController._dataSource@PAGE ; id <PSSpecifierDataSource> _dataSource;\n__text:00000001907FE4D4                 LDRSW           X8, [X8,#_OBJC_IVAR_$_PSListController._dataSource@PAGEOFF] ; id <PSSpecifierDataSource> _dataSource;\n__text:00000001907FE4D8                 LDR             X9, [X19,X8]\n__text:00000001907FE4DC                 CBZ             X9, loc_1907FE550\n__text:00000001907FE4E0                 ADRP            X9, #_OBJC_IVAR_$_PSListController._requestingSpecifiersFromDataSource@PAGE ; bool _requestingSpecifiersFromDataSource;\n__text:00000001907FE4E4                 LDRSW           X23, [X9,#_OBJC_IVAR_$_PSListController._requestingSpecifiersFromDataSource@PAGEOFF] ; bool _requestingSpecifiersFromDataSource;\n__text:00000001907FE4E8                 MOV             W9, #1\n__text:00000001907FE4EC                 STRB            W9, [X19,X23]\n__text:00000001907FE4F0                 LDR             X20, [X19,X8]\n__text:00000001907FE4F4                 ADRP            X8, #selRef_specifier@PAGE\n__text:00000001907FE4F8                 LDR             X1, [X8,#selRef_specifier@PAGEOFF]\n__text:00000001907FE4FC                 MOV             X0, X19\n__text:00000001907FE500                 BL              0x96C39BC0\n__text:00000001907FE504                 MOV             X29, X29\n__text:00000001907FE508                 BL              0x96C41EF0\n__text:00000001907FE50C                 MOV             X21, X0\n__text:00000001907FE510                 ADRP            X8, #selRef_specifiersForSpecifier_observer_@PAGE\n__text:00000001907FE514                 LDR             X1, \n……\n```\n然后在这里面下个断点看看会发生什么\n\n```\n(lldb) br s -a 0x1907FE4D0+0x198e58640\nBreakpoint 9: where = Preferences`-[PSListController specifiers] + 40, address = 0x000000019364e4d0\n```\n我们从设置中进入通用>关于，发现一开始就走到了这个断点，我们猜测，一进入关于页面，系统会首先把所有cell的数据都准备好，然后加载UI\n\n```\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x000000019364e4d0 Preferences`-[PSListController specifiers] + 40, queue = 'com.apple.main-thread', stop reason = breakpoint 9.1\n    frame #0: 0x000000019364e4d0 Preferences`-[PSListController specifiers] + 40\nPreferences`-[PSListController specifiers]:\n->  0x19364e4d0 <+40>: adrp   x8, 53971\n    0x19364e4d4 <+44>: ldrsw  x8, [x8, #536]\n    0x19364e4d8 <+48>: ldr    x9, [x19, x8]\n    0x19364e4dc <+52>: cbz    x9, 0x19364e550           ; <+168>\n```\n我们打印变量x8和x9的值，看一下系统做了什么\n\n```\n(lldb) po $x8\n<nil>\n(lldb) po $x9\nPSUIAboutController\n```\n并没有数据之类的东西值得我们关注，让断点继续往下走，走到0x19364e4dc的位置，我们再次打印变量x8和x9的值\n\n```\n(lldb) n\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x000000019364e4dc Preferences`-[PSListController specifiers] + 52, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x000000019364e4dc Preferences`-[PSListController specifiers] + 52\nPreferences`-[PSListController specifiers]:\n->  0x19364e4dc <+52>: cbz    x9, 0x19364e550           ; <+168>\n    0x19364e4e0 <+56>: adrp   x9, 53971\n    0x19364e4e4 <+60>: ldrsw  x23, [x9, #540]\n    0x19364e4e8 <+64>: orr    w9, wzr, #0x1\n(lldb) po $x8\n952\n(lldb) po $x9\n<AboutDataSource: 0x131130730>\n```\n此时的变量x9已经变成了`AboutDataSource`，这里验证了我们上一步的猜想，所以我们重点来研究它，我们先找到这个类在哪个framework中，这里使用的是grep命令\n\n```\nLeonLei-MBP:~ gaoshilei$ grep AboutDataSource -r /Users/gaoshilei/Desktop/reverse/iOS-Runtime-Headers-9.1 \n/Users/gaoshilei/Desktop/reverse/iOS-Runtime-Headers-9.1/PrivateFrameworks/PreferencesUI.framework/AboutDataSource.h:@interface AboutDataSource : PSSpecifierDataSource {\n```\n这里要说明一下iOS-Runtime-Headers-9.1这个文件夹是iOS9.1系统的所有头文件（共有+私有），这个你可以自己导（iOS9之后只能用runtime导，class-dump已经不行了），你也可以拿现成的用，github上面已经有雷锋把所有系统的头文件都导出来了，直接下载就可以了。我们发现`AboutDataSource`这个类在`PrivateFrameworks/PreferencesUI.framework`中，先看一下这个类里面有什么方法和属性，有一个方法`- (void)_loadValues;` 我们对它进行分析。这里又要借助IDA分析，把PreferencesUI这个二进制文件丢到IDA里面，在0x19091EBB8这个位置打个断点\n\n```\n(lldb) br s -a 0x19091EBB8+0x2e50000\nBreakpoint 3: where = PreferencesUI`-[AboutDataSource _loadValues] + 1956, address = 0x000000019376ebb8\n```\n接下来我们进入关于来触发断点\n\n```\n(lldb) po (char *) $x28\n\"_setValue:forSpecifierWithKey:\"\n```\n在这里打印变量x28的值，发现它是一个方法名，从名称来看是给`specifier`赋值的，看来我们要寻找的真相已经很近了，让代码走到下面的位置0x19376ebd8\n\n```\nProcess 2107 stopped\n* thread #1: tid = 0xe8e23, 0x000000019376ebd8 PreferencesUI`-[AboutDataSource _loadValues] + 1988, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x000000019376ebd8 PreferencesUI`-[AboutDataSource _loadValues] + 1988\nPreferencesUI`-[AboutDataSource _loadValues]:\n->  0x19376ebd8 <+1988>: bl     0x198e58640               ; MGCopyAnswer\n    0x19376ebdc <+1992>: mov    x22, x0\n    0x19376ebe0 <+1996>: mov    x1, x19\n    0x19376ebe4 <+2000>: bl     0x199a89bc0               ; objc_msgSend\n(lldb) po $x0\nSerialNumber\n```\n此时我们打印的x0是一个`NSCFConstantString`，本质就是一个`NSString`，继续`ni`让程序运行到0x19376ebdc\n\n```\nProcess 2107 stopped\n* thread #1: tid = 0xe8e23, 0x000000019376ebdc PreferencesUI`-[AboutDataSource _loadValues] + 1992, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x000000019376ebdc PreferencesUI`-[AboutDataSource _loadValues] + 1992\nPreferencesUI`-[AboutDataSource _loadValues]:\n->  0x19376ebdc <+1992>: mov    x22, x0\n    0x19376ebe0 <+1996>: mov    x1, x19\n    0x19376ebe4 <+2000>: bl     0x199a89bc0               ; objc_msgSend\n    0x19376ebe8 <+2004>: cbnz   x0, 0x19376ec4c           ; <+2104>\n(lldb) po $x0\nDNPMVG0EFF9V\n```\n在这里我们打印了变量x0的值为**DNPMVG0EFF9V**，这就是我们苦苦寻找的序列号。不难看出，序列号就是在0x19376ebd8这行拿到的，范围越来越小，敌人无路可逃！下面我们就要对这行进行分析，我们按照之前的步骤，再次走到0x19376ebd8这个位置，这不过这次我们不要`step-over`，我们用`si`跳入看看\n\n```\n(lldb) si\nProcess 2107 stopped\n* thread #1: tid = 0xe8e23, 0x0000000198e58640 libMobileGestalt.dylib`MGCopyAnswer, queue = 'com.apple.main-thread', stop reason = instruction step into\n    frame #0: 0x0000000198e58640 libMobileGestalt.dylib`MGCopyAnswer\nlibMobileGestalt.dylib`MGCopyAnswer:\n->  0x198e58640 <+0>: movz   x1, #0\n    0x198e58644 <+4>: b      0x198e58648               ; ___lldb_unnamed_symbol64$$libMobileGestalt.dylib\n\nlibMobileGestalt.dylib`___lldb_unnamed_symbol64$$libMobileGestalt.dylib:\n    0x198e58648 <+0>: stp    x24, x23, [sp, #-64]!\n    0x198e5864c <+4>: stp    x22, x21, [sp, #16]\n此时跳入了一个静态库libMobileGestalt.dylib，我们可以在usr/lib/ibMobileGestalt.dylib找到它，我们将它扔进IDA，用当前的addr减去libMobileGestalt.dylib的基地址偏移得到它的静态地址0x196008640，对应的是一个函数MGCopyAnswer\n__text:0000000196008640\n__text:0000000196008640 ; =============== S U B R O U T I N E =======================================\n__text:0000000196008640\n__text:0000000196008640\n__text:0000000196008640                 EXPORT _MGCopyAnswer\n__text:0000000196008640 _MGCopyAnswer                           ; CODE XREF: sub_196005958+30\u0018p\n__text:0000000196008640                                         ; sub_196006258+28\u0018p ...\n__text:0000000196008640                 MOV             X1, #0\n__text:0000000196008644                 B               sub_196008648\n__text:0000000196008644 ; End of function _MGCopyAnswer\n```\n这个函数最外层只有两行代码，将立即数0赋给x1，然后跳进了子程序sub_196008648，跳进去之后进行了一些很复杂的运算，这里就不做介绍了，里面的实现大概是这样的：\nx0是作为一个参数传入的，并且这里x0的值为`SerialNumber`，在地址为0x196008678的地方，这个函数中x1变成了一串随机数，有点像MD5加密之后的东西，应该是“钥匙”\n\n```\n(lldb) po (char*) $x1\n\"l92SaBpqIvQs+KBljuwGA\"\n```\n在0x196008690这里，我们`setp-into`这个函数，在函数的末尾返回值的地方0x196007474打个断点，打印返回值x0\n\n```\n(lldb) po $x0\nDNPMVG0EFF9V\n```\n这里的x0由`SerialNumber`变成了真正的序列号，并且就是在0x196008690对应的子程序sub_19600738C里面拿到的，所以我们就这样一个猜测，在`MGCopyAnswer`函数中，x0作为一个参数传入，并且在内部进行了一系列复杂的运算，拿到了获取序列号的“钥匙”x1，然后在sub_19600738C中拿到了最终的序列号。这里笔者也没有对序列号的拿到在进行进一步的深究，这里苹果做了很大的限制，再继续研究恐怕也是收获不大，而且我们在这里已经能拿到序列号了。  \n###\t三、验证结果  \n接下来就是验证的过程了，我们写一个tweak来验证，当然也可以用其他方式来验证：\ntweak的创建这里就不赘述了，我把我的tweak和makefile文件内容贴一下：\n> tweak文件：\n\n```\ntweak.xm:\nextern \"C\" NSString *MGCopyAnswer(NSString*);\n%hook SpringBoard\n- (void)applicationDidFinishLaunching:(id)application {\n%orig;\nNSString *serialNumber = [NSString stringWithFormat:@\"%@\",[MGCopyAnswer(@\"SerialNumber\") autorelease]];\nUIAlertView *alert = [[UIAlertView alloc] initWithTitle:serialNumber message:nil delegate:self cancelButtonTitle:@\"OK\" otherButtonTitles:nil];\n[alert show];\n}\n%end\n```\n这里注入系统的SpringBoard，在SB启动的时候hook住applicationDidFinishLaunching：函数，并且在这个函数里面添加获取序列号的代码，并且以弹框的形式展现出来。  \n> makefile文件:\n\n```\nTHEOS_DEVICE_IP = 192.168.0.115\ninclude $(THEOS)/makefiles/common.mk\nTWEAK_NAME = SerialNumber\nSerialNumber_FILES = Tweak.xm\ninclude $(THEOS_MAKE_PATH)/tweak.mk\nSerialNumber_LDFLAGS = -lMobileGestalt\nafter-install::\n\tinstall.exec \"killall -9 SpringBoard\"\n```\n其中有一行`SerialNumber_LDFLAGS = -lMobileGestalt`千万要注意，使用的时候要加载这个静态库，因为SpringBoard加载的时候我也不确定是否有加载这个库，然后我们验证一下吧！\n![序列号验证-获取](http://oeat6c2zg.bkt.clouddn.com/%E6%9F%A5%E6%89%BE%E5%BA%8F%E5%88%97%E5%8F%B7%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B01.jpg)![序列号验证-系统](http://oeat6c2zg.bkt.clouddn.com/%E6%9F%A5%E6%89%BE%E5%BA%8F%E5%88%97%E5%8F%B7%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B02.jpg)  \n\n [此文参考了《iOS逆向工程（第二版）》](https://www.amazon.cn/iOS应用逆向工程-沙梓社/dp/B00VFDVY7E/ref=sr_1_1?ie=UTF8&qid=1477453672&sr=8-1&keywords=iOS逆向工程)\n","source":"_posts/iPhone查找序列号生成函数.md","raw":"title: iPhone查找序列号生成函数\ndate: 2015-08-03 \ncategories:\n- iOS逆向\ntags:\n- serial Number\n- UDID\n---\n\n##  前言  \n在iOS7之前我们可以通过`- (NSString *)uniqueIdentifier`这个方法获取iPhone的唯一标识符，也叫作UDID。不过自从iOS7苹果就把这个方法给禁了，此时我们想要获取iPhone的唯一标识符就很困难。  \n不过苹果提供一个叫做IDFA的标识符，这个IDFA是广告标识符用来追踪广告投放的，不过用户可以在设置中手动重置IDFA，可靠性很低，目前常见的两种标记iPhone的方式为  \n*  openUDID  \n*  IDFA或UUID+keychain  \n\n这两种模式都有个弊端，用户重置手机或者刷机唯一标识符会发生变化，不过对于大多数情况是够用了。看来苹果是把路给封死了，有没有办法拿到之前的UDID呢？我们注意到iPhone的设置通用关于里面有手机的硬件信息，其中有一个serialNumber，这个serialnumber就是我们查询手机是否过保的依据，那么它肯定是唯一的，所以下文是围绕这个进行的探索。最终是可以拿到这个serialNumber的， 不过由于苹果的沙盒限制，所以只能在越狱机中拿到，如果想在非越狱机中拿到必须添加entitlements文件来获取权限，可想而知这个应用是无法上架的。**下文仅作为逆向工程的一种思路和探索，请勿用于非法用途。** \n<!-- more -->\n##  正文\n###\t一、SSH连接手机（USB模式）\n####\t1.映射端口\n```shell\nLeonLei-MBP:~ gaoshilei$ /Users/gaoshilei/Desktop/reverse/USBSSH/tcprelay.py -t 22:6666\nForwarding local port 6666 to remote port 22\n```\n####\t2.连接手机，并且用grep命令快速筛选当前我们要调试的应用Preferences，附加debugserver开始1234端口等待lldb调试\n```OC\nLeonLei-MBP:~ gaoshilei$ ssh root@localhost -p 6666\niPhone-5S:~ root# ps -e | grep Pre\n  270 ??         0:00.29 /System/Library/PrivateFrameworks/MobileSoftwareUpdate.framework/XPCServices/com.apple.MobileSoftwareUpdate.CleanupPreparePathService.xpc/com.apple.MobileSoftwareUpdate.CleanupPreparePathService\n 1192 ??         0:14.26 /var/db/stash/_.fP74Fg/Applications/Preferences.app/Preferences\n 1289 ttys000    0:00.01 grep Pre\niPhone-5S:~ root# debugserver *:1234 -a \"Preferences\"\ndebugserver-@(#)PROGRAM:debugserver  PROJECT:debugserver-340.3.51.1\n for arm64.\nAttaching to process Preferences...\nListening to port 1234 for a connection from *...\n```\n####\t3.完成以上两步接下来就可以进行lldb调试了，首先要把远端（手机）的1234端口映射到本地，跟前面提到的SSH端口映射一样\n```Object-C\nLeonLei-MBP:~ gaoshilei$ /Users/gaoshilei/Desktop/reverse/USBSSH/tcprelay.py -t 1234:1234\nForwarding local port 1234 to remote port 1234\n```\n###\t二、通过LLDB、IDA寻找线索\nlldb的调试端口已经打开，此时我们可以进入调试\n\n```js\nLeonLei-MBP:~ gaoshilei$ lldb\n(lldb) process connect connect://localhost:1234\nProcess 1192 stopped  \n* thread #1: tid = 0x523a6, 0x000000019a3c8a40 libsystem_kernel.dylib`mach_msg_trap + 8, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP  \n    frame #0: 0x000000019a3c8a40 libsystem_kernel.dylib`mach_msg_trap + 8\nlibsystem_kernel.dylib`mach_msg_trap:\n->  0x19a3c8a40 <+8>: ret    \nlibsystem_kernel.dylib`mach_msg_overwrite_trap:\n    0x19a3c8a44 <+0>: movn   x16, #0x1f\n    0x19a3c8a48 <+4>: svc    #0x80\n    0x19a3c8a4c <+8>: ret    \n```\n此时我们已经成功进入Preferences的调试阶段，先c一下，让程序继续运行\n  \n```shell\n(lldb) c\nProcess 1192 resuming\n```\n这么做的原因是我们待会要打印image的基地址偏移，有可能在我们打印的image list中没有我们想要的image。\n此时我们已经找到到Preference.framework的基地址偏移，见下图\n\n```\n(lldb) im li -o -f\n[  0] 0x00000000000dc000 /var/db/stash/_.fP74Fg/Applications/Preferences.app/Preferences(0x00000001000dc000)\n[  1] 0x0000000100100000 /Library/MobileSubstrate/MobileSubstrate.dylib(0x0000000100100000)\n[  2] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/PrivateFrameworks/BulletinBoard.framework/BulletinBoard\n[  3] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation\n[  4] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/Frameworks/IOKit.framework/Versions/A/IOKit\n…\n[ 44] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/PrivateFrameworks/Preferences.framework/Preferences\n…  \n```\n我们要找的image的序号在这里是44，它的基地址偏移为0x2e50000，我们把从iPhone中导出的PrivateFrameworks中的Preferences.framework丢到IDA中进行分析，这个二进制文件比较小，很快就分析完成，在前面我们已经知道iPhone的唯一序列号serial number是通过PSListController生成的，并且我们知道这是一个cell，我们要去调试`[PSListController tableView:cellForRowAtIndexPath:]`这个方法，从中找到cell值的来源，从而找到获取序列号的方法。\n\n```\n__text:00000001908040C8 ; -[PSListController tableView:cellForRowAtIndexPath:]\n__text:00000001908040C8 __PSListController_tableView_cellForRowAtIndexPath__\n__text:00000001908040C8                                         ; DATA XREF: __objc_const:000000019C069B88\u0019o\n__text:00000001908040C8\n__text:00000001908040C8 var_80          = -0x80\n__text:00000001908040C8 var_78          = -0x78\n__text:00000001908040C8 var_70          = -0x70\n__text:00000001908040C8 var_68          = -0x68\n__text:00000001908040C8 var_60          = -0x60\n__text:00000001908040C8 var_50          = -0x50\n__text:00000001908040C8 var_40          = -0x40\n__text:00000001908040C8 var_30          = -0x30\n__text:00000001908040C8 var_20          = -0x20\n__text:00000001908040C8 var_10          = -0x10\n__text:00000001908040C8\n__text:00000001908040C8                 STP             X28, X27, [SP,#var_60]!\n__text:00000001908040CC                 STP             X26, X25, [SP,#0x60+var_50]\n__text:00000001908040D0                 STP             X24, X23, [SP,#0x60+var_40]\n__text:00000001908040D4                 STP             X22, X21, [SP,#0x60+var_30]\n__text:00000001908040D8                 STP             X20, X19, [SP,#0x60+var_20]\n__text:00000001908040DC                 STP             X29, X30, [SP,#0x60+var_10]\n__text:00000001908040E0                 ADD             X29, SP, #0x60+var_10\n__text:00000001908040E4                 SUB             SP, SP, #0x20\n__text:00000001908040E8                 MOV             X21, X3\n__text:00000001908040EC                 MOV             X20, X0\n__text:00000001908040F0                 MOV             X0, X2\n__text:00000001908040F4                 BL              0x96C400A0\n__text:00000001908040F8                 MOV             X26, X0\n__text:00000001908040FC                 ADRP            X8, #off_19DACC568@PAGE\n__text:0000000190804100                 LDR             X1, [X8,#off_19DACC568@PAGEOFF]\n__text:0000000190804104                 MOV             X0, X20\n__text:0000000190804108                 MOV             X2, X21\n__text:000000019080410C                 BL              0x96C39BC0\n__text:0000000190804110                 MOV             X2, X0\n__text:0000000190804114                 ADRP            X8, #_OBJC_IVAR_$_PSListController._specifiers@PAGE ; NSArray *_specifiers;\n__text:0000000190804118                 LDRSW           X27, [X8,#_OBJC_IVAR_$_PSListController._specifiers@PAGEOFF] ; NSArray *_specifiers;\n__text:000000019080411C                 LDR             X0, [X20,X27]\n__text:0000000190804120                 ADRP            X8, #off_19DACC558@PAGE\n……\n```\n我们在Preference.framework中基地址为0x190804114的位置打个断点，具体的做法是：\n\n```\n(lldb) br s -a 0x190804114+0x2e50000\nBreakpoint 1: where = Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76, address = 0x0000000193654114\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x0000000193654114 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x0000000193654114 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76\nPreferences`-[PSListController tableView:cellForRowAtIndexPath:]:\n->  0x193654114 <+76>: adrp   x8, 53965\n    0x193654118 <+80>: ldrsw  x27, [x8, #516]\n    0x19365411c <+84>: ldr    x0, [x20, x27]\n    0x193654120 <+88>: adrp   x8, 53960\n```\n这里断点这样打是因为系统加载可执行文件和各种framework的时候会有一个地址偏移，我们在打断点的时候要把这个偏移量加上，这样我们打的断点才是准确的。\n可以看到我们已经成功打了一个断点，断点的address = 0x193654114。此时我们打印变量x0和x27的值\n\n```\n(lldb) po $x0\n13\n(lldb) po $x27\n1104\n```\n我们执行ni让程序继续（这里的`ni`命令相当于Xcode的那个下箭头命令，也就是下一行）\n\n```\n(lldb) ni\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x0000000193654118 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 80, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x0000000193654118 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 80\nPreferences`-[PSListController tableView:cellForRowAtIndexPath:]:\n->  0x193654118 <+80>: ldrsw  x27, [x8, #516]\n    0x19365411c <+84>: ldr    x0, [x20, x27]\n    0x193654120 <+88>: adrp   x8, 53960\n    0x193654124 <+92>: ldr    x22, [x8, #1368]\n(lldb) ni\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x000000019365411c Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 84, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x000000019365411c Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 84\nPreferences`-[PSListController tableView:cellForRowAtIndexPath:]:\n->  0x19365411c <+84>: ldr    x0, [x20, x27]\n    0x193654120 <+88>: adrp   x8, 53960\n    0x193654124 <+92>: ldr    x22, [x8, #1368]\n    0x193654128 <+96>: mov    x1, x22\n(lldb) po $x27\n848\n\n(lldb) po $x0\n13\n```\n我们ni的两次，程序已经走到0x19080411C的位置，然后我们继续打印变量x0和x27的值\n\n```\n(lldb) po $x0\n13\n(lldb) po $x27\n1104\n```\n打印出来的x0和x27都是随机数，还是没有什么收获，我们继续\n\n```\n(lldb) ni\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x0000000193654120 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 88, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x0000000193654120 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 88\nPreferences`-[PSListController tableView:cellForRowAtIndexPath:]:\n->  0x193654120 <+88>:  adrp   x8, 53960\n    0x193654124 <+92>:  ldr    x22, [x8, #1368]\n    0x193654128 <+96>:  mov    x1, x22\n    0x19365412c <+100>: bl     0x199a89bc0               ; objc_msgSend\n(lldb) po $x0\n<__NSArrayI 0x13105a780>(\nG: <PSSpecifier 0x12ff50cf0: ID 0, Name '' target <(null): 0x0>> 0x12ff50cf0,\n<PSSpecifier 0x12ff50f50: ID NAME_CELL_ID, Name 'Name' target <AboutDataSource: 0x131028390>>,\nG: <PSSpecifier 0x12ff51680: ID 2, Name '' target <(null): 0x0>> 0x12ff51680,\n<PSSpecifier 0x12ff52360: ID NETWORK, Name 'Network' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff52420: ID SONGS, Name 'Songs' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff519f0: ID VIDEOS, Name 'Videos' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff51ab0: ID PHOTOS, Name 'Photos' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff51b70: ID APPLICATIONS, Name 'Applications' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff524e0: ID User Data Capacity, Name 'Capacity' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff525a0: ID User Data Available, Name 'Available' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff526a0: ID ProductVersion, Name 'Version' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff52850: ID CARRIER_VERSION, Name 'Carrier' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff52980: ID ProductModel, Name 'Model' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff52a60: ID SerialNumber, Name 'Serial Number' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff52b90: ID MACAddress, Name 'Wi-Fi Address' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff51050: ID BTMACAddress, Name 'Bluetooth' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12fde95d0: ID ModemVersion, Name 'Modem Firmware' target <AboutDataSource: 0x131028390>>,\nG: <PSSpecifier 0x131031e90: ID 17, Name '' target <(null): 0x0>> 0x131031e90,\n<PSSpecifier 0x12fde9c40: ID LEGAL_AND_REGULATORY, Name 'Legal' target <(null): 0x0>>,\nG: <PSSpecifier 0x131029dc0: ID TRUST_STORE_GROUP, Name '' target <(null): 0x0>> 0x131029dc0,\n<PSSpecifier 0x131033520: ID TRUST_STORE, Name 'Trust Store' target <AboutDataSource: 0x131028390>>\n)\n```\n我们让程序执行下一步，发现此时x0已经有值了，可以明显的看出，x0的值是在0x190804114~0x19080411C这段代码生成的，下面我们的工作重点就是寻找这段代码干了什么，胜利就在眼前！下面我们验证一下这里面到底有没有我们要的序列号：\n\n```\n(lldb) po [[$x0 objectAtIndex:13] class]\nPSSpecifier\n(lldb) po [[$x0 objectAtIndex:13] properties]\n{\n    cellObject = \"<PSTableCell: 0x130800000; baseClass = UITableViewCell; frame = (0 565; 320 45); text = 'Serial Number'; hidden = YES; autoresize = W; tag = 4; gestureRecognizers = <NSArray: 0x12ff821c0>; layer = <CALayer: 0x12fd7d340>>\";\n    id = SerialNumber;\n    isCopyable = 1;\n    value = DNPMVG0EFF9V;\n}\n```\n我们打印数组中存放cell数据的object属于哪个类，发现是`PSSpecifier`，我们找到之前导出的类的头文件，发现这个类有一个叫做`properties`的实例方法，我们调用一下发现我们要的序列号就在里面`value = DNPMVG0EFF9V`，这跟iPhone设置中看到的序列号是一致的。猜测这个数组里面存放着系统设置中`PSUIAboutController`中所有cel的数据，这个数组下一个肯定要传递到cell生成的方法中，这个就不做验证了，大事重要，我们继续找序列号的生成方法。\n这个`PSSpecifier`中有一个`AboutDataSource`对象，这个非常可疑，从名称上可以判断，这个类是专门用于数据处理的，不过在这之前我们还是先验证一下，在0x190804114~0x19080411C这段地址中，执行了`_PSListController._specifiers`，我们从`PSListController`的头文件（下文有讲怎么获取）中可以看到有一个specifiers属性，我们在IDA分析的文件中找到`[PSListController specifiers]`，我们先定位到方法在二进制文件中的位置：\n\n```\n__text:00000001907FE4A8 ; -[PSListController specifiers]\n__text:00000001907FE4A8 __PSListController_specifiers_          ; DATA XREF: __objc_const:000000019C069A08\u0019o\n__text:00000001907FE4A8\n__text:00000001907FE4A8 var_40          = -0x40\n__text:00000001907FE4A8 var_30          = -0x30\n__text:00000001907FE4A8 var_20          = -0x20\n__text:00000001907FE4A8 var_10          = -0x10\n__text:00000001907FE4A8\n__text:00000001907FE4A8                 STP             X24, X23, [SP,#var_40]!\n__text:00000001907FE4AC                 STP             X22, X21, [SP,#0x40+var_30]\n__text:00000001907FE4B0                 STP             X20, X19, [SP,#0x40+var_20]\n__text:00000001907FE4B4                 STP             X29, X30, [SP,#0x40+var_10]\n__text:00000001907FE4B8                 ADD             X29, SP, #0x40+var_10\n__text:00000001907FE4BC                 MOV             X19, X0\n__text:00000001907FE4C0                 ADRP            X8, #_OBJC_IVAR_$_PSListController._specifiers@PAGE ; NSArray *_specifiers;\n__text:00000001907FE4C4                 LDRSW           X22, [X8,#_OBJC_IVAR_$_PSListController._specifiers@PAGEOFF] ; NSArray *_specifiers;\n__text:00000001907FE4C8                 LDR             X8, [X19,X22]\n__text:00000001907FE4CC                 CBNZ            X8, loc_1907FE5E0\n__text:00000001907FE4D0                 ADRP            X8, #_OBJC_IVAR_$_PSListController._dataSource@PAGE ; id <PSSpecifierDataSource> _dataSource;\n__text:00000001907FE4D4                 LDRSW           X8, [X8,#_OBJC_IVAR_$_PSListController._dataSource@PAGEOFF] ; id <PSSpecifierDataSource> _dataSource;\n__text:00000001907FE4D8                 LDR             X9, [X19,X8]\n__text:00000001907FE4DC                 CBZ             X9, loc_1907FE550\n__text:00000001907FE4E0                 ADRP            X9, #_OBJC_IVAR_$_PSListController._requestingSpecifiersFromDataSource@PAGE ; bool _requestingSpecifiersFromDataSource;\n__text:00000001907FE4E4                 LDRSW           X23, [X9,#_OBJC_IVAR_$_PSListController._requestingSpecifiersFromDataSource@PAGEOFF] ; bool _requestingSpecifiersFromDataSource;\n__text:00000001907FE4E8                 MOV             W9, #1\n__text:00000001907FE4EC                 STRB            W9, [X19,X23]\n__text:00000001907FE4F0                 LDR             X20, [X19,X8]\n__text:00000001907FE4F4                 ADRP            X8, #selRef_specifier@PAGE\n__text:00000001907FE4F8                 LDR             X1, [X8,#selRef_specifier@PAGEOFF]\n__text:00000001907FE4FC                 MOV             X0, X19\n__text:00000001907FE500                 BL              0x96C39BC0\n__text:00000001907FE504                 MOV             X29, X29\n__text:00000001907FE508                 BL              0x96C41EF0\n__text:00000001907FE50C                 MOV             X21, X0\n__text:00000001907FE510                 ADRP            X8, #selRef_specifiersForSpecifier_observer_@PAGE\n__text:00000001907FE514                 LDR             X1, \n……\n```\n然后在这里面下个断点看看会发生什么\n\n```\n(lldb) br s -a 0x1907FE4D0+0x198e58640\nBreakpoint 9: where = Preferences`-[PSListController specifiers] + 40, address = 0x000000019364e4d0\n```\n我们从设置中进入通用>关于，发现一开始就走到了这个断点，我们猜测，一进入关于页面，系统会首先把所有cell的数据都准备好，然后加载UI\n\n```\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x000000019364e4d0 Preferences`-[PSListController specifiers] + 40, queue = 'com.apple.main-thread', stop reason = breakpoint 9.1\n    frame #0: 0x000000019364e4d0 Preferences`-[PSListController specifiers] + 40\nPreferences`-[PSListController specifiers]:\n->  0x19364e4d0 <+40>: adrp   x8, 53971\n    0x19364e4d4 <+44>: ldrsw  x8, [x8, #536]\n    0x19364e4d8 <+48>: ldr    x9, [x19, x8]\n    0x19364e4dc <+52>: cbz    x9, 0x19364e550           ; <+168>\n```\n我们打印变量x8和x9的值，看一下系统做了什么\n\n```\n(lldb) po $x8\n<nil>\n(lldb) po $x9\nPSUIAboutController\n```\n并没有数据之类的东西值得我们关注，让断点继续往下走，走到0x19364e4dc的位置，我们再次打印变量x8和x9的值\n\n```\n(lldb) n\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x000000019364e4dc Preferences`-[PSListController specifiers] + 52, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x000000019364e4dc Preferences`-[PSListController specifiers] + 52\nPreferences`-[PSListController specifiers]:\n->  0x19364e4dc <+52>: cbz    x9, 0x19364e550           ; <+168>\n    0x19364e4e0 <+56>: adrp   x9, 53971\n    0x19364e4e4 <+60>: ldrsw  x23, [x9, #540]\n    0x19364e4e8 <+64>: orr    w9, wzr, #0x1\n(lldb) po $x8\n952\n(lldb) po $x9\n<AboutDataSource: 0x131130730>\n```\n此时的变量x9已经变成了`AboutDataSource`，这里验证了我们上一步的猜想，所以我们重点来研究它，我们先找到这个类在哪个framework中，这里使用的是grep命令\n\n```\nLeonLei-MBP:~ gaoshilei$ grep AboutDataSource -r /Users/gaoshilei/Desktop/reverse/iOS-Runtime-Headers-9.1 \n/Users/gaoshilei/Desktop/reverse/iOS-Runtime-Headers-9.1/PrivateFrameworks/PreferencesUI.framework/AboutDataSource.h:@interface AboutDataSource : PSSpecifierDataSource {\n```\n这里要说明一下iOS-Runtime-Headers-9.1这个文件夹是iOS9.1系统的所有头文件（共有+私有），这个你可以自己导（iOS9之后只能用runtime导，class-dump已经不行了），你也可以拿现成的用，github上面已经有雷锋把所有系统的头文件都导出来了，直接下载就可以了。我们发现`AboutDataSource`这个类在`PrivateFrameworks/PreferencesUI.framework`中，先看一下这个类里面有什么方法和属性，有一个方法`- (void)_loadValues;` 我们对它进行分析。这里又要借助IDA分析，把PreferencesUI这个二进制文件丢到IDA里面，在0x19091EBB8这个位置打个断点\n\n```\n(lldb) br s -a 0x19091EBB8+0x2e50000\nBreakpoint 3: where = PreferencesUI`-[AboutDataSource _loadValues] + 1956, address = 0x000000019376ebb8\n```\n接下来我们进入关于来触发断点\n\n```\n(lldb) po (char *) $x28\n\"_setValue:forSpecifierWithKey:\"\n```\n在这里打印变量x28的值，发现它是一个方法名，从名称来看是给`specifier`赋值的，看来我们要寻找的真相已经很近了，让代码走到下面的位置0x19376ebd8\n\n```\nProcess 2107 stopped\n* thread #1: tid = 0xe8e23, 0x000000019376ebd8 PreferencesUI`-[AboutDataSource _loadValues] + 1988, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x000000019376ebd8 PreferencesUI`-[AboutDataSource _loadValues] + 1988\nPreferencesUI`-[AboutDataSource _loadValues]:\n->  0x19376ebd8 <+1988>: bl     0x198e58640               ; MGCopyAnswer\n    0x19376ebdc <+1992>: mov    x22, x0\n    0x19376ebe0 <+1996>: mov    x1, x19\n    0x19376ebe4 <+2000>: bl     0x199a89bc0               ; objc_msgSend\n(lldb) po $x0\nSerialNumber\n```\n此时我们打印的x0是一个`NSCFConstantString`，本质就是一个`NSString`，继续`ni`让程序运行到0x19376ebdc\n\n```\nProcess 2107 stopped\n* thread #1: tid = 0xe8e23, 0x000000019376ebdc PreferencesUI`-[AboutDataSource _loadValues] + 1992, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x000000019376ebdc PreferencesUI`-[AboutDataSource _loadValues] + 1992\nPreferencesUI`-[AboutDataSource _loadValues]:\n->  0x19376ebdc <+1992>: mov    x22, x0\n    0x19376ebe0 <+1996>: mov    x1, x19\n    0x19376ebe4 <+2000>: bl     0x199a89bc0               ; objc_msgSend\n    0x19376ebe8 <+2004>: cbnz   x0, 0x19376ec4c           ; <+2104>\n(lldb) po $x0\nDNPMVG0EFF9V\n```\n在这里我们打印了变量x0的值为**DNPMVG0EFF9V**，这就是我们苦苦寻找的序列号。不难看出，序列号就是在0x19376ebd8这行拿到的，范围越来越小，敌人无路可逃！下面我们就要对这行进行分析，我们按照之前的步骤，再次走到0x19376ebd8这个位置，这不过这次我们不要`step-over`，我们用`si`跳入看看\n\n```\n(lldb) si\nProcess 2107 stopped\n* thread #1: tid = 0xe8e23, 0x0000000198e58640 libMobileGestalt.dylib`MGCopyAnswer, queue = 'com.apple.main-thread', stop reason = instruction step into\n    frame #0: 0x0000000198e58640 libMobileGestalt.dylib`MGCopyAnswer\nlibMobileGestalt.dylib`MGCopyAnswer:\n->  0x198e58640 <+0>: movz   x1, #0\n    0x198e58644 <+4>: b      0x198e58648               ; ___lldb_unnamed_symbol64$$libMobileGestalt.dylib\n\nlibMobileGestalt.dylib`___lldb_unnamed_symbol64$$libMobileGestalt.dylib:\n    0x198e58648 <+0>: stp    x24, x23, [sp, #-64]!\n    0x198e5864c <+4>: stp    x22, x21, [sp, #16]\n此时跳入了一个静态库libMobileGestalt.dylib，我们可以在usr/lib/ibMobileGestalt.dylib找到它，我们将它扔进IDA，用当前的addr减去libMobileGestalt.dylib的基地址偏移得到它的静态地址0x196008640，对应的是一个函数MGCopyAnswer\n__text:0000000196008640\n__text:0000000196008640 ; =============== S U B R O U T I N E =======================================\n__text:0000000196008640\n__text:0000000196008640\n__text:0000000196008640                 EXPORT _MGCopyAnswer\n__text:0000000196008640 _MGCopyAnswer                           ; CODE XREF: sub_196005958+30\u0018p\n__text:0000000196008640                                         ; sub_196006258+28\u0018p ...\n__text:0000000196008640                 MOV             X1, #0\n__text:0000000196008644                 B               sub_196008648\n__text:0000000196008644 ; End of function _MGCopyAnswer\n```\n这个函数最外层只有两行代码，将立即数0赋给x1，然后跳进了子程序sub_196008648，跳进去之后进行了一些很复杂的运算，这里就不做介绍了，里面的实现大概是这样的：\nx0是作为一个参数传入的，并且这里x0的值为`SerialNumber`，在地址为0x196008678的地方，这个函数中x1变成了一串随机数，有点像MD5加密之后的东西，应该是“钥匙”\n\n```\n(lldb) po (char*) $x1\n\"l92SaBpqIvQs+KBljuwGA\"\n```\n在0x196008690这里，我们`setp-into`这个函数，在函数的末尾返回值的地方0x196007474打个断点，打印返回值x0\n\n```\n(lldb) po $x0\nDNPMVG0EFF9V\n```\n这里的x0由`SerialNumber`变成了真正的序列号，并且就是在0x196008690对应的子程序sub_19600738C里面拿到的，所以我们就这样一个猜测，在`MGCopyAnswer`函数中，x0作为一个参数传入，并且在内部进行了一系列复杂的运算，拿到了获取序列号的“钥匙”x1，然后在sub_19600738C中拿到了最终的序列号。这里笔者也没有对序列号的拿到在进行进一步的深究，这里苹果做了很大的限制，再继续研究恐怕也是收获不大，而且我们在这里已经能拿到序列号了。  \n###\t三、验证结果  \n接下来就是验证的过程了，我们写一个tweak来验证，当然也可以用其他方式来验证：\ntweak的创建这里就不赘述了，我把我的tweak和makefile文件内容贴一下：\n> tweak文件：\n\n```\ntweak.xm:\nextern \"C\" NSString *MGCopyAnswer(NSString*);\n%hook SpringBoard\n- (void)applicationDidFinishLaunching:(id)application {\n%orig;\nNSString *serialNumber = [NSString stringWithFormat:@\"%@\",[MGCopyAnswer(@\"SerialNumber\") autorelease]];\nUIAlertView *alert = [[UIAlertView alloc] initWithTitle:serialNumber message:nil delegate:self cancelButtonTitle:@\"OK\" otherButtonTitles:nil];\n[alert show];\n}\n%end\n```\n这里注入系统的SpringBoard，在SB启动的时候hook住applicationDidFinishLaunching：函数，并且在这个函数里面添加获取序列号的代码，并且以弹框的形式展现出来。  \n> makefile文件:\n\n```\nTHEOS_DEVICE_IP = 192.168.0.115\ninclude $(THEOS)/makefiles/common.mk\nTWEAK_NAME = SerialNumber\nSerialNumber_FILES = Tweak.xm\ninclude $(THEOS_MAKE_PATH)/tweak.mk\nSerialNumber_LDFLAGS = -lMobileGestalt\nafter-install::\n\tinstall.exec \"killall -9 SpringBoard\"\n```\n其中有一行`SerialNumber_LDFLAGS = -lMobileGestalt`千万要注意，使用的时候要加载这个静态库，因为SpringBoard加载的时候我也不确定是否有加载这个库，然后我们验证一下吧！\n![序列号验证-获取](http://oeat6c2zg.bkt.clouddn.com/%E6%9F%A5%E6%89%BE%E5%BA%8F%E5%88%97%E5%8F%B7%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B01.jpg)![序列号验证-系统](http://oeat6c2zg.bkt.clouddn.com/%E6%9F%A5%E6%89%BE%E5%BA%8F%E5%88%97%E5%8F%B7%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B02.jpg)  \n\n [此文参考了《iOS逆向工程（第二版）》](https://www.amazon.cn/iOS应用逆向工程-沙梓社/dp/B00VFDVY7E/ref=sr_1_1?ie=UTF8&qid=1477453672&sr=8-1&keywords=iOS逆向工程)\n","slug":"iPhone查找序列号生成函数","published":1,"updated":"2016-11-01T14:49:32.187Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civdhewvn00044h6qy48rbrm0","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在iOS7之前我们可以通过<code>- (NSString *)uniqueIdentifier</code>这个方法获取iPhone的唯一标识符，也叫作UDID。不过自从iOS7苹果就把这个方法给禁了，此时我们想要获取iPhone的唯一标识符就很困难。<br>不过苹果提供一个叫做IDFA的标识符，这个IDFA是广告标识符用来追踪广告投放的，不过用户可以在设置中手动重置IDFA，可靠性很低，目前常见的两种标记iPhone的方式为  </p>\n<ul>\n<li>openUDID  </li>\n<li>IDFA或UUID+keychain  </li>\n</ul>\n<p>这两种模式都有个弊端，用户重置手机或者刷机唯一标识符会发生变化，不过对于大多数情况是够用了。看来苹果是把路给封死了，有没有办法拿到之前的UDID呢？我们注意到iPhone的设置通用关于里面有手机的硬件信息，其中有一个serialNumber，这个serialnumber就是我们查询手机是否过保的依据，那么它肯定是唯一的，所以下文是围绕这个进行的探索。最终是可以拿到这个serialNumber的， 不过由于苹果的沙盒限制，所以只能在越狱机中拿到，如果想在非越狱机中拿到必须添加entitlements文件来获取权限，可想而知这个应用是无法上架的。<strong>下文仅作为逆向工程的一种思路和探索，请勿用于非法用途。</strong><br><a id=\"more\"></a></p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"一、SSH连接手机（USB模式）\"><a href=\"#一、SSH连接手机（USB模式）\" class=\"headerlink\" title=\"一、SSH连接手机（USB模式）\"></a>一、SSH连接手机（USB模式）</h3><h4 id=\"1-映射端口\"><a href=\"#1-映射端口\" class=\"headerlink\" title=\"1.映射端口\"></a>1.映射端口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ /Users/gaoshilei/Desktop/reverse/USBSSH/tcprelay.py -t 22:6666</div><div class=\"line\">Forwarding local port 6666 to remote port 22</div></pre></td></tr></table></figure>\n<h4 id=\"2-连接手机，并且用grep命令快速筛选当前我们要调试的应用Preferences，附加debugserver开始1234端口等待lldb调试\"><a href=\"#2-连接手机，并且用grep命令快速筛选当前我们要调试的应用Preferences，附加debugserver开始1234端口等待lldb调试\" class=\"headerlink\" title=\"2.连接手机，并且用grep命令快速筛选当前我们要调试的应用Preferences，附加debugserver开始1234端口等待lldb调试\"></a>2.连接手机，并且用grep命令快速筛选当前我们要调试的应用Preferences，附加debugserver开始1234端口等待lldb调试</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ ssh root@localhost -p 6666</div><div class=\"line\">iPhone-5S:~ root# ps -e | grep Pre</div><div class=\"line\">  270 ??         0:00.29 /System/Library/PrivateFrameworks/MobileSoftwareUpdate.framework/XPCServices/com.apple.MobileSoftwareUpdate.CleanupPreparePathService.xpc/com.apple.MobileSoftwareUpdate.CleanupPreparePathService</div><div class=\"line\"> 1192 ??         0:14.26 /var/db/stash/_.fP74Fg/Applications/Preferences.app/Preferences</div><div class=\"line\"> 1289 ttys000    0:00.01 grep Pre</div><div class=\"line\">iPhone-5S:~ root# debugserver *:1234 -a &quot;Preferences&quot;</div><div class=\"line\">debugserver-@(#)PROGRAM:debugserver  PROJECT:debugserver-340.3.51.1</div><div class=\"line\"> for arm64.</div><div class=\"line\">Attaching to process Preferences...</div><div class=\"line\">Listening to port 1234 for a connection from *...</div></pre></td></tr></table></figure>\n<h4 id=\"3-完成以上两步接下来就可以进行lldb调试了，首先要把远端（手机）的1234端口映射到本地，跟前面提到的SSH端口映射一样\"><a href=\"#3-完成以上两步接下来就可以进行lldb调试了，首先要把远端（手机）的1234端口映射到本地，跟前面提到的SSH端口映射一样\" class=\"headerlink\" title=\"3.完成以上两步接下来就可以进行lldb调试了，首先要把远端（手机）的1234端口映射到本地，跟前面提到的SSH端口映射一样\"></a>3.完成以上两步接下来就可以进行lldb调试了，首先要把远端（手机）的1234端口映射到本地，跟前面提到的SSH端口映射一样</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ /Users/gaoshilei/Desktop/reverse/USBSSH/tcprelay.py -t 1234:1234</div><div class=\"line\">Forwarding local port 1234 to remote port 1234</div></pre></td></tr></table></figure>\n<h3 id=\"二、通过LLDB、IDA寻找线索\"><a href=\"#二、通过LLDB、IDA寻找线索\" class=\"headerlink\" title=\"二、通过LLDB、IDA寻找线索\"></a>二、通过LLDB、IDA寻找线索</h3><p>lldb的调试端口已经打开，此时我们可以进入调试</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ lldb</div><div class=\"line\">(lldb) process connect connect://localhost:1234</div><div class=\"line\">Process 1192 stopped  </div><div class=\"line\">* thread #1: tid = 0x523a6, 0x000000019a3c8a40 libsystem_kernel.dylib`mach_msg_trap + 8, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP  </div><div class=\"line\">    frame #0: 0x000000019a3c8a40 libsystem_kernel.dylib`mach_msg_trap + 8</div><div class=\"line\">libsystem_kernel.dylib`mach_msg_trap:</div><div class=\"line\">-&gt;  0x19a3c8a40 &lt;+8&gt;: ret    </div><div class=\"line\">libsystem_kernel.dylib`mach_msg_overwrite_trap:</div><div class=\"line\">    0x19a3c8a44 &lt;+0&gt;: movn   x16, #0x1f</div><div class=\"line\">    0x19a3c8a48 &lt;+4&gt;: svc    #0x80</div><div class=\"line\">    0x19a3c8a4c &lt;+8&gt;: ret</div></pre></td></tr></table></figure>\n<p>此时我们已经成功进入Preferences的调试阶段，先c一下，让程序继续运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) c</div><div class=\"line\">Process 1192 resuming</div></pre></td></tr></table></figure>\n<p>这么做的原因是我们待会要打印image的基地址偏移，有可能在我们打印的image list中没有我们想要的image。<br>此时我们已经找到到Preference.framework的基地址偏移，见下图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) im li -o -f</div><div class=\"line\">[  0] 0x00000000000dc000 /var/db/stash/_.fP74Fg/Applications/Preferences.app/Preferences(0x00000001000dc000)</div><div class=\"line\">[  1] 0x0000000100100000 /Library/MobileSubstrate/MobileSubstrate.dylib(0x0000000100100000)</div><div class=\"line\">[  2] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/PrivateFrameworks/BulletinBoard.framework/BulletinBoard</div><div class=\"line\">[  3] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation</div><div class=\"line\">[  4] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/Frameworks/IOKit.framework/Versions/A/IOKit</div><div class=\"line\">…</div><div class=\"line\">[ 44] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/PrivateFrameworks/Preferences.framework/Preferences</div><div class=\"line\">…</div></pre></td></tr></table></figure>\n<p>我们要找的image的序号在这里是44，它的基地址偏移为0x2e50000，我们把从iPhone中导出的PrivateFrameworks中的Preferences.framework丢到IDA中进行分析，这个二进制文件比较小，很快就分析完成，在前面我们已经知道iPhone的唯一序列号serial number是通过PSListController生成的，并且我们知道这是一个cell，我们要去调试<code>[PSListController tableView:cellForRowAtIndexPath:]</code>这个方法，从中找到cell值的来源，从而找到获取序列号的方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">__text:00000001908040C8 ; -[PSListController tableView:cellForRowAtIndexPath:]</div><div class=\"line\">__text:00000001908040C8 __PSListController_tableView_cellForRowAtIndexPath__</div><div class=\"line\">__text:00000001908040C8                                         ; DATA XREF: __objc_const:000000019C069B88\u0019o</div><div class=\"line\">__text:00000001908040C8</div><div class=\"line\">__text:00000001908040C8 var_80          = -0x80</div><div class=\"line\">__text:00000001908040C8 var_78          = -0x78</div><div class=\"line\">__text:00000001908040C8 var_70          = -0x70</div><div class=\"line\">__text:00000001908040C8 var_68          = -0x68</div><div class=\"line\">__text:00000001908040C8 var_60          = -0x60</div><div class=\"line\">__text:00000001908040C8 var_50          = -0x50</div><div class=\"line\">__text:00000001908040C8 var_40          = -0x40</div><div class=\"line\">__text:00000001908040C8 var_30          = -0x30</div><div class=\"line\">__text:00000001908040C8 var_20          = -0x20</div><div class=\"line\">__text:00000001908040C8 var_10          = -0x10</div><div class=\"line\">__text:00000001908040C8</div><div class=\"line\">__text:00000001908040C8                 STP             X28, X27, [SP,#var_60]!</div><div class=\"line\">__text:00000001908040CC                 STP             X26, X25, [SP,#0x60+var_50]</div><div class=\"line\">__text:00000001908040D0                 STP             X24, X23, [SP,#0x60+var_40]</div><div class=\"line\">__text:00000001908040D4                 STP             X22, X21, [SP,#0x60+var_30]</div><div class=\"line\">__text:00000001908040D8                 STP             X20, X19, [SP,#0x60+var_20]</div><div class=\"line\">__text:00000001908040DC                 STP             X29, X30, [SP,#0x60+var_10]</div><div class=\"line\">__text:00000001908040E0                 ADD             X29, SP, #0x60+var_10</div><div class=\"line\">__text:00000001908040E4                 SUB             SP, SP, #0x20</div><div class=\"line\">__text:00000001908040E8                 MOV             X21, X3</div><div class=\"line\">__text:00000001908040EC                 MOV             X20, X0</div><div class=\"line\">__text:00000001908040F0                 MOV             X0, X2</div><div class=\"line\">__text:00000001908040F4                 BL              0x96C400A0</div><div class=\"line\">__text:00000001908040F8                 MOV             X26, X0</div><div class=\"line\">__text:00000001908040FC                 ADRP            X8, #off_19DACC568@PAGE</div><div class=\"line\">__text:0000000190804100                 LDR             X1, [X8,#off_19DACC568@PAGEOFF]</div><div class=\"line\">__text:0000000190804104                 MOV             X0, X20</div><div class=\"line\">__text:0000000190804108                 MOV             X2, X21</div><div class=\"line\">__text:000000019080410C                 BL              0x96C39BC0</div><div class=\"line\">__text:0000000190804110                 MOV             X2, X0</div><div class=\"line\">__text:0000000190804114                 ADRP            X8, #_OBJC_IVAR_$_PSListController._specifiers@PAGE ; NSArray *_specifiers;</div><div class=\"line\">__text:0000000190804118                 LDRSW           X27, [X8,#_OBJC_IVAR_$_PSListController._specifiers@PAGEOFF] ; NSArray *_specifiers;</div><div class=\"line\">__text:000000019080411C                 LDR             X0, [X20,X27]</div><div class=\"line\">__text:0000000190804120                 ADRP            X8, #off_19DACC558@PAGE</div><div class=\"line\">……</div></pre></td></tr></table></figure>\n<p>我们在Preference.framework中基地址为0x190804114的位置打个断点，具体的做法是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) br s -a 0x190804114+0x2e50000</div><div class=\"line\">Breakpoint 1: where = Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76, address = 0x0000000193654114</div><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x0000000193654114 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 1.1</div><div class=\"line\">    frame #0: 0x0000000193654114 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76</div><div class=\"line\">Preferences`-[PSListController tableView:cellForRowAtIndexPath:]:</div><div class=\"line\">-&gt;  0x193654114 &lt;+76&gt;: adrp   x8, 53965</div><div class=\"line\">    0x193654118 &lt;+80&gt;: ldrsw  x27, [x8, #516]</div><div class=\"line\">    0x19365411c &lt;+84&gt;: ldr    x0, [x20, x27]</div><div class=\"line\">    0x193654120 &lt;+88&gt;: adrp   x8, 53960</div></pre></td></tr></table></figure>\n<p>这里断点这样打是因为系统加载可执行文件和各种framework的时候会有一个地址偏移，我们在打断点的时候要把这个偏移量加上，这样我们打的断点才是准确的。<br>可以看到我们已经成功打了一个断点，断点的address = 0x193654114。此时我们打印变量x0和x27的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x0</div><div class=\"line\">13</div><div class=\"line\">(lldb) po $x27</div><div class=\"line\">1104</div></pre></td></tr></table></figure>\n<p>我们执行ni让程序继续（这里的<code>ni</code>命令相当于Xcode的那个下箭头命令，也就是下一行）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) ni</div><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x0000000193654118 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 80, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x0000000193654118 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 80</div><div class=\"line\">Preferences`-[PSListController tableView:cellForRowAtIndexPath:]:</div><div class=\"line\">-&gt;  0x193654118 &lt;+80&gt;: ldrsw  x27, [x8, #516]</div><div class=\"line\">    0x19365411c &lt;+84&gt;: ldr    x0, [x20, x27]</div><div class=\"line\">    0x193654120 &lt;+88&gt;: adrp   x8, 53960</div><div class=\"line\">    0x193654124 &lt;+92&gt;: ldr    x22, [x8, #1368]</div><div class=\"line\">(lldb) ni</div><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x000000019365411c Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 84, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x000000019365411c Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 84</div><div class=\"line\">Preferences`-[PSListController tableView:cellForRowAtIndexPath:]:</div><div class=\"line\">-&gt;  0x19365411c &lt;+84&gt;: ldr    x0, [x20, x27]</div><div class=\"line\">    0x193654120 &lt;+88&gt;: adrp   x8, 53960</div><div class=\"line\">    0x193654124 &lt;+92&gt;: ldr    x22, [x8, #1368]</div><div class=\"line\">    0x193654128 &lt;+96&gt;: mov    x1, x22</div><div class=\"line\">(lldb) po $x27</div><div class=\"line\">848</div><div class=\"line\"></div><div class=\"line\">(lldb) po $x0</div><div class=\"line\">13</div></pre></td></tr></table></figure>\n<p>我们ni的两次，程序已经走到0x19080411C的位置，然后我们继续打印变量x0和x27的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x0</div><div class=\"line\">13</div><div class=\"line\">(lldb) po $x27</div><div class=\"line\">1104</div></pre></td></tr></table></figure>\n<p>打印出来的x0和x27都是随机数，还是没有什么收获，我们继续</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) ni</div><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x0000000193654120 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 88, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x0000000193654120 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 88</div><div class=\"line\">Preferences`-[PSListController tableView:cellForRowAtIndexPath:]:</div><div class=\"line\">-&gt;  0x193654120 &lt;+88&gt;:  adrp   x8, 53960</div><div class=\"line\">    0x193654124 &lt;+92&gt;:  ldr    x22, [x8, #1368]</div><div class=\"line\">    0x193654128 &lt;+96&gt;:  mov    x1, x22</div><div class=\"line\">    0x19365412c &lt;+100&gt;: bl     0x199a89bc0               ; objc_msgSend</div><div class=\"line\">(lldb) po $x0</div><div class=\"line\">&lt;__NSArrayI 0x13105a780&gt;(</div><div class=\"line\">G: &lt;PSSpecifier 0x12ff50cf0: ID 0, Name &apos;&apos; target &lt;(null): 0x0&gt;&gt; 0x12ff50cf0,</div><div class=\"line\">&lt;PSSpecifier 0x12ff50f50: ID NAME_CELL_ID, Name &apos;Name&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">G: &lt;PSSpecifier 0x12ff51680: ID 2, Name &apos;&apos; target &lt;(null): 0x0&gt;&gt; 0x12ff51680,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52360: ID NETWORK, Name &apos;Network&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52420: ID SONGS, Name &apos;Songs&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff519f0: ID VIDEOS, Name &apos;Videos&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff51ab0: ID PHOTOS, Name &apos;Photos&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff51b70: ID APPLICATIONS, Name &apos;Applications&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff524e0: ID User Data Capacity, Name &apos;Capacity&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff525a0: ID User Data Available, Name &apos;Available&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff526a0: ID ProductVersion, Name &apos;Version&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52850: ID CARRIER_VERSION, Name &apos;Carrier&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52980: ID ProductModel, Name &apos;Model&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52a60: ID SerialNumber, Name &apos;Serial Number&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52b90: ID MACAddress, Name &apos;Wi-Fi Address&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff51050: ID BTMACAddress, Name &apos;Bluetooth&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12fde95d0: ID ModemVersion, Name &apos;Modem Firmware&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">G: &lt;PSSpecifier 0x131031e90: ID 17, Name &apos;&apos; target &lt;(null): 0x0&gt;&gt; 0x131031e90,</div><div class=\"line\">&lt;PSSpecifier 0x12fde9c40: ID LEGAL_AND_REGULATORY, Name &apos;Legal&apos; target &lt;(null): 0x0&gt;&gt;,</div><div class=\"line\">G: &lt;PSSpecifier 0x131029dc0: ID TRUST_STORE_GROUP, Name &apos;&apos; target &lt;(null): 0x0&gt;&gt; 0x131029dc0,</div><div class=\"line\">&lt;PSSpecifier 0x131033520: ID TRUST_STORE, Name &apos;Trust Store&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>我们让程序执行下一步，发现此时x0已经有值了，可以明显的看出，x0的值是在0x190804114~0x19080411C这段代码生成的，下面我们的工作重点就是寻找这段代码干了什么，胜利就在眼前！下面我们验证一下这里面到底有没有我们要的序列号：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po [[$x0 objectAtIndex:13] class]</div><div class=\"line\">PSSpecifier</div><div class=\"line\">(lldb) po [[$x0 objectAtIndex:13] properties]</div><div class=\"line\">&#123;</div><div class=\"line\">    cellObject = &quot;&lt;PSTableCell: 0x130800000; baseClass = UITableViewCell; frame = (0 565; 320 45); text = &apos;Serial Number&apos;; hidden = YES; autoresize = W; tag = 4; gestureRecognizers = &lt;NSArray: 0x12ff821c0&gt;; layer = &lt;CALayer: 0x12fd7d340&gt;&gt;&quot;;</div><div class=\"line\">    id = SerialNumber;</div><div class=\"line\">    isCopyable = 1;</div><div class=\"line\">    value = DNPMVG0EFF9V;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们打印数组中存放cell数据的object属于哪个类，发现是<code>PSSpecifier</code>，我们找到之前导出的类的头文件，发现这个类有一个叫做<code>properties</code>的实例方法，我们调用一下发现我们要的序列号就在里面<code>value = DNPMVG0EFF9V</code>，这跟iPhone设置中看到的序列号是一致的。猜测这个数组里面存放着系统设置中<code>PSUIAboutController</code>中所有cel的数据，这个数组下一个肯定要传递到cell生成的方法中，这个就不做验证了，大事重要，我们继续找序列号的生成方法。<br>这个<code>PSSpecifier</code>中有一个<code>AboutDataSource</code>对象，这个非常可疑，从名称上可以判断，这个类是专门用于数据处理的，不过在这之前我们还是先验证一下，在0x190804114~0x19080411C这段地址中，执行了<code>_PSListController._specifiers</code>，我们从<code>PSListController</code>的头文件（下文有讲怎么获取）中可以看到有一个specifiers属性，我们在IDA分析的文件中找到<code>[PSListController specifiers]</code>，我们先定位到方法在二进制文件中的位置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">__text:00000001907FE4A8 ; -[PSListController specifiers]</div><div class=\"line\">__text:00000001907FE4A8 __PSListController_specifiers_          ; DATA XREF: __objc_const:000000019C069A08\u0019o</div><div class=\"line\">__text:00000001907FE4A8</div><div class=\"line\">__text:00000001907FE4A8 var_40          = -0x40</div><div class=\"line\">__text:00000001907FE4A8 var_30          = -0x30</div><div class=\"line\">__text:00000001907FE4A8 var_20          = -0x20</div><div class=\"line\">__text:00000001907FE4A8 var_10          = -0x10</div><div class=\"line\">__text:00000001907FE4A8</div><div class=\"line\">__text:00000001907FE4A8                 STP             X24, X23, [SP,#var_40]!</div><div class=\"line\">__text:00000001907FE4AC                 STP             X22, X21, [SP,#0x40+var_30]</div><div class=\"line\">__text:00000001907FE4B0                 STP             X20, X19, [SP,#0x40+var_20]</div><div class=\"line\">__text:00000001907FE4B4                 STP             X29, X30, [SP,#0x40+var_10]</div><div class=\"line\">__text:00000001907FE4B8                 ADD             X29, SP, #0x40+var_10</div><div class=\"line\">__text:00000001907FE4BC                 MOV             X19, X0</div><div class=\"line\">__text:00000001907FE4C0                 ADRP            X8, #_OBJC_IVAR_$_PSListController._specifiers@PAGE ; NSArray *_specifiers;</div><div class=\"line\">__text:00000001907FE4C4                 LDRSW           X22, [X8,#_OBJC_IVAR_$_PSListController._specifiers@PAGEOFF] ; NSArray *_specifiers;</div><div class=\"line\">__text:00000001907FE4C8                 LDR             X8, [X19,X22]</div><div class=\"line\">__text:00000001907FE4CC                 CBNZ            X8, loc_1907FE5E0</div><div class=\"line\">__text:00000001907FE4D0                 ADRP            X8, #_OBJC_IVAR_$_PSListController._dataSource@PAGE ; id &lt;PSSpecifierDataSource&gt; _dataSource;</div><div class=\"line\">__text:00000001907FE4D4                 LDRSW           X8, [X8,#_OBJC_IVAR_$_PSListController._dataSource@PAGEOFF] ; id &lt;PSSpecifierDataSource&gt; _dataSource;</div><div class=\"line\">__text:00000001907FE4D8                 LDR             X9, [X19,X8]</div><div class=\"line\">__text:00000001907FE4DC                 CBZ             X9, loc_1907FE550</div><div class=\"line\">__text:00000001907FE4E0                 ADRP            X9, #_OBJC_IVAR_$_PSListController._requestingSpecifiersFromDataSource@PAGE ; bool _requestingSpecifiersFromDataSource;</div><div class=\"line\">__text:00000001907FE4E4                 LDRSW           X23, [X9,#_OBJC_IVAR_$_PSListController._requestingSpecifiersFromDataSource@PAGEOFF] ; bool _requestingSpecifiersFromDataSource;</div><div class=\"line\">__text:00000001907FE4E8                 MOV             W9, #1</div><div class=\"line\">__text:00000001907FE4EC                 STRB            W9, [X19,X23]</div><div class=\"line\">__text:00000001907FE4F0                 LDR             X20, [X19,X8]</div><div class=\"line\">__text:00000001907FE4F4                 ADRP            X8, #selRef_specifier@PAGE</div><div class=\"line\">__text:00000001907FE4F8                 LDR             X1, [X8,#selRef_specifier@PAGEOFF]</div><div class=\"line\">__text:00000001907FE4FC                 MOV             X0, X19</div><div class=\"line\">__text:00000001907FE500                 BL              0x96C39BC0</div><div class=\"line\">__text:00000001907FE504                 MOV             X29, X29</div><div class=\"line\">__text:00000001907FE508                 BL              0x96C41EF0</div><div class=\"line\">__text:00000001907FE50C                 MOV             X21, X0</div><div class=\"line\">__text:00000001907FE510                 ADRP            X8, #selRef_specifiersForSpecifier_observer_@PAGE</div><div class=\"line\">__text:00000001907FE514                 LDR             X1, </div><div class=\"line\">……</div></pre></td></tr></table></figure>\n<p>然后在这里面下个断点看看会发生什么</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) br s -a 0x1907FE4D0+0x198e58640</div><div class=\"line\">Breakpoint 9: where = Preferences`-[PSListController specifiers] + 40, address = 0x000000019364e4d0</div></pre></td></tr></table></figure>\n<p>我们从设置中进入通用&gt;关于，发现一开始就走到了这个断点，我们猜测，一进入关于页面，系统会首先把所有cell的数据都准备好，然后加载UI</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x000000019364e4d0 Preferences`-[PSListController specifiers] + 40, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 9.1</div><div class=\"line\">    frame #0: 0x000000019364e4d0 Preferences`-[PSListController specifiers] + 40</div><div class=\"line\">Preferences`-[PSListController specifiers]:</div><div class=\"line\">-&gt;  0x19364e4d0 &lt;+40&gt;: adrp   x8, 53971</div><div class=\"line\">    0x19364e4d4 &lt;+44&gt;: ldrsw  x8, [x8, #536]</div><div class=\"line\">    0x19364e4d8 &lt;+48&gt;: ldr    x9, [x19, x8]</div><div class=\"line\">    0x19364e4dc &lt;+52&gt;: cbz    x9, 0x19364e550           ; &lt;+168&gt;</div></pre></td></tr></table></figure>\n<p>我们打印变量x8和x9的值，看一下系统做了什么</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x8</div><div class=\"line\">&lt;nil&gt;</div><div class=\"line\">(lldb) po $x9</div><div class=\"line\">PSUIAboutController</div></pre></td></tr></table></figure>\n<p>并没有数据之类的东西值得我们关注，让断点继续往下走，走到0x19364e4dc的位置，我们再次打印变量x8和x9的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) n</div><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x000000019364e4dc Preferences`-[PSListController specifiers] + 52, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x000000019364e4dc Preferences`-[PSListController specifiers] + 52</div><div class=\"line\">Preferences`-[PSListController specifiers]:</div><div class=\"line\">-&gt;  0x19364e4dc &lt;+52&gt;: cbz    x9, 0x19364e550           ; &lt;+168&gt;</div><div class=\"line\">    0x19364e4e0 &lt;+56&gt;: adrp   x9, 53971</div><div class=\"line\">    0x19364e4e4 &lt;+60&gt;: ldrsw  x23, [x9, #540]</div><div class=\"line\">    0x19364e4e8 &lt;+64&gt;: orr    w9, wzr, #0x1</div><div class=\"line\">(lldb) po $x8</div><div class=\"line\">952</div><div class=\"line\">(lldb) po $x9</div><div class=\"line\">&lt;AboutDataSource: 0x131130730&gt;</div></pre></td></tr></table></figure>\n<p>此时的变量x9已经变成了<code>AboutDataSource</code>，这里验证了我们上一步的猜想，所以我们重点来研究它，我们先找到这个类在哪个framework中，这里使用的是grep命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ grep AboutDataSource -r /Users/gaoshilei/Desktop/reverse/iOS-Runtime-Headers-9.1 </div><div class=\"line\">/Users/gaoshilei/Desktop/reverse/iOS-Runtime-Headers-9.1/PrivateFrameworks/PreferencesUI.framework/AboutDataSource.h:@interface AboutDataSource : PSSpecifierDataSource &#123;</div></pre></td></tr></table></figure>\n<p>这里要说明一下iOS-Runtime-Headers-9.1这个文件夹是iOS9.1系统的所有头文件（共有+私有），这个你可以自己导（iOS9之后只能用runtime导，class-dump已经不行了），你也可以拿现成的用，github上面已经有雷锋把所有系统的头文件都导出来了，直接下载就可以了。我们发现<code>AboutDataSource</code>这个类在<code>PrivateFrameworks/PreferencesUI.framework</code>中，先看一下这个类里面有什么方法和属性，有一个方法<code>- (void)_loadValues;</code> 我们对它进行分析。这里又要借助IDA分析，把PreferencesUI这个二进制文件丢到IDA里面，在0x19091EBB8这个位置打个断点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) br s -a 0x19091EBB8+0x2e50000</div><div class=\"line\">Breakpoint 3: where = PreferencesUI`-[AboutDataSource _loadValues] + 1956, address = 0x000000019376ebb8</div></pre></td></tr></table></figure>\n<p>接下来我们进入关于来触发断点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po (char *) $x28</div><div class=\"line\">&quot;_setValue:forSpecifierWithKey:&quot;</div></pre></td></tr></table></figure>\n<p>在这里打印变量x28的值，发现它是一个方法名，从名称来看是给<code>specifier</code>赋值的，看来我们要寻找的真相已经很近了，让代码走到下面的位置0x19376ebd8</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Process 2107 stopped</div><div class=\"line\">* thread #1: tid = 0xe8e23, 0x000000019376ebd8 PreferencesUI`-[AboutDataSource _loadValues] + 1988, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x000000019376ebd8 PreferencesUI`-[AboutDataSource _loadValues] + 1988</div><div class=\"line\">PreferencesUI`-[AboutDataSource _loadValues]:</div><div class=\"line\">-&gt;  0x19376ebd8 &lt;+1988&gt;: bl     0x198e58640               ; MGCopyAnswer</div><div class=\"line\">    0x19376ebdc &lt;+1992&gt;: mov    x22, x0</div><div class=\"line\">    0x19376ebe0 &lt;+1996&gt;: mov    x1, x19</div><div class=\"line\">    0x19376ebe4 &lt;+2000&gt;: bl     0x199a89bc0               ; objc_msgSend</div><div class=\"line\">(lldb) po $x0</div><div class=\"line\">SerialNumber</div></pre></td></tr></table></figure>\n<p>此时我们打印的x0是一个<code>NSCFConstantString</code>，本质就是一个<code>NSString</code>，继续<code>ni</code>让程序运行到0x19376ebdc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Process 2107 stopped</div><div class=\"line\">* thread #1: tid = 0xe8e23, 0x000000019376ebdc PreferencesUI`-[AboutDataSource _loadValues] + 1992, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x000000019376ebdc PreferencesUI`-[AboutDataSource _loadValues] + 1992</div><div class=\"line\">PreferencesUI`-[AboutDataSource _loadValues]:</div><div class=\"line\">-&gt;  0x19376ebdc &lt;+1992&gt;: mov    x22, x0</div><div class=\"line\">    0x19376ebe0 &lt;+1996&gt;: mov    x1, x19</div><div class=\"line\">    0x19376ebe4 &lt;+2000&gt;: bl     0x199a89bc0               ; objc_msgSend</div><div class=\"line\">    0x19376ebe8 &lt;+2004&gt;: cbnz   x0, 0x19376ec4c           ; &lt;+2104&gt;</div><div class=\"line\">(lldb) po $x0</div><div class=\"line\">DNPMVG0EFF9V</div></pre></td></tr></table></figure>\n<p>在这里我们打印了变量x0的值为<strong>DNPMVG0EFF9V</strong>，这就是我们苦苦寻找的序列号。不难看出，序列号就是在0x19376ebd8这行拿到的，范围越来越小，敌人无路可逃！下面我们就要对这行进行分析，我们按照之前的步骤，再次走到0x19376ebd8这个位置，这不过这次我们不要<code>step-over</code>，我们用<code>si</code>跳入看看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) si</div><div class=\"line\">Process 2107 stopped</div><div class=\"line\">* thread #1: tid = 0xe8e23, 0x0000000198e58640 libMobileGestalt.dylib`MGCopyAnswer, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step into</div><div class=\"line\">    frame #0: 0x0000000198e58640 libMobileGestalt.dylib`MGCopyAnswer</div><div class=\"line\">libMobileGestalt.dylib`MGCopyAnswer:</div><div class=\"line\">-&gt;  0x198e58640 &lt;+0&gt;: movz   x1, #0</div><div class=\"line\">    0x198e58644 &lt;+4&gt;: b      0x198e58648               ; ___lldb_unnamed_symbol64$$libMobileGestalt.dylib</div><div class=\"line\"></div><div class=\"line\">libMobileGestalt.dylib`___lldb_unnamed_symbol64$$libMobileGestalt.dylib:</div><div class=\"line\">    0x198e58648 &lt;+0&gt;: stp    x24, x23, [sp, #-64]!</div><div class=\"line\">    0x198e5864c &lt;+4&gt;: stp    x22, x21, [sp, #16]</div><div class=\"line\">此时跳入了一个静态库libMobileGestalt.dylib，我们可以在usr/lib/ibMobileGestalt.dylib找到它，我们将它扔进IDA，用当前的addr减去libMobileGestalt.dylib的基地址偏移得到它的静态地址0x196008640，对应的是一个函数MGCopyAnswer</div><div class=\"line\">__text:0000000196008640</div><div class=\"line\">__text:0000000196008640 ; =============== S U B R O U T I N E =======================================</div><div class=\"line\">__text:0000000196008640</div><div class=\"line\">__text:0000000196008640</div><div class=\"line\">__text:0000000196008640                 EXPORT _MGCopyAnswer</div><div class=\"line\">__text:0000000196008640 _MGCopyAnswer                           ; CODE XREF: sub_196005958+30\u0018p</div><div class=\"line\">__text:0000000196008640                                         ; sub_196006258+28\u0018p ...</div><div class=\"line\">__text:0000000196008640                 MOV             X1, #0</div><div class=\"line\">__text:0000000196008644                 B               sub_196008648</div><div class=\"line\">__text:0000000196008644 ; End of function _MGCopyAnswer</div></pre></td></tr></table></figure>\n<p>这个函数最外层只有两行代码，将立即数0赋给x1，然后跳进了子程序sub_196008648，跳进去之后进行了一些很复杂的运算，这里就不做介绍了，里面的实现大概是这样的：<br>x0是作为一个参数传入的，并且这里x0的值为<code>SerialNumber</code>，在地址为0x196008678的地方，这个函数中x1变成了一串随机数，有点像MD5加密之后的东西，应该是“钥匙”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po (char*) $x1</div><div class=\"line\">&quot;l92SaBpqIvQs+KBljuwGA&quot;</div></pre></td></tr></table></figure>\n<p>在0x196008690这里，我们<code>setp-into</code>这个函数，在函数的末尾返回值的地方0x196007474打个断点，打印返回值x0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x0</div><div class=\"line\">DNPMVG0EFF9V</div></pre></td></tr></table></figure>\n<p>这里的x0由<code>SerialNumber</code>变成了真正的序列号，并且就是在0x196008690对应的子程序sub_19600738C里面拿到的，所以我们就这样一个猜测，在<code>MGCopyAnswer</code>函数中，x0作为一个参数传入，并且在内部进行了一系列复杂的运算，拿到了获取序列号的“钥匙”x1，然后在sub_19600738C中拿到了最终的序列号。这里笔者也没有对序列号的拿到在进行进一步的深究，这里苹果做了很大的限制，再继续研究恐怕也是收获不大，而且我们在这里已经能拿到序列号了。  </p>\n<h3 id=\"三、验证结果\"><a href=\"#三、验证结果\" class=\"headerlink\" title=\"三、验证结果\"></a>三、验证结果</h3><p>接下来就是验证的过程了，我们写一个tweak来验证，当然也可以用其他方式来验证：<br>tweak的创建这里就不赘述了，我把我的tweak和makefile文件内容贴一下：</p>\n<blockquote>\n<p>tweak文件：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">tweak.xm:</div><div class=\"line\">extern &quot;C&quot; NSString *MGCopyAnswer(NSString*);</div><div class=\"line\">%hook SpringBoard</div><div class=\"line\">- (void)applicationDidFinishLaunching:(id)application &#123;</div><div class=\"line\">%orig;</div><div class=\"line\">NSString *serialNumber = [NSString stringWithFormat:@&quot;%@&quot;,[MGCopyAnswer(@&quot;SerialNumber&quot;) autorelease]];</div><div class=\"line\">UIAlertView *alert = [[UIAlertView alloc] initWithTitle:serialNumber message:nil delegate:self cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];</div><div class=\"line\">[alert show];</div><div class=\"line\">&#125;</div><div class=\"line\">%end</div></pre></td></tr></table></figure>\n<p>这里注入系统的SpringBoard，在SB启动的时候hook住applicationDidFinishLaunching：函数，并且在这个函数里面添加获取序列号的代码，并且以弹框的形式展现出来。  </p>\n<blockquote>\n<p>makefile文件:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">THEOS_DEVICE_IP = 192.168.0.115</div><div class=\"line\">include $(THEOS)/makefiles/common.mk</div><div class=\"line\">TWEAK_NAME = SerialNumber</div><div class=\"line\">SerialNumber_FILES = Tweak.xm</div><div class=\"line\">include $(THEOS_MAKE_PATH)/tweak.mk</div><div class=\"line\">SerialNumber_LDFLAGS = -lMobileGestalt</div><div class=\"line\">after-install::</div><div class=\"line\">\tinstall.exec &quot;killall -9 SpringBoard&quot;</div></pre></td></tr></table></figure>\n<p>其中有一行<code>SerialNumber_LDFLAGS = -lMobileGestalt</code>千万要注意，使用的时候要加载这个静态库，因为SpringBoard加载的时候我也不确定是否有加载这个库，然后我们验证一下吧！<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%9F%A5%E6%89%BE%E5%BA%8F%E5%88%97%E5%8F%B7%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B01.jpg\" alt=\"序列号验证-获取\"><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%9F%A5%E6%89%BE%E5%BA%8F%E5%88%97%E5%8F%B7%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B02.jpg\" alt=\"序列号验证-系统\">  </p>\n<p> <a href=\"https://www.amazon.cn/iOS应用逆向工程-沙梓社/dp/B00VFDVY7E/ref=sr_1_1?ie=UTF8&amp;qid=1477453672&amp;sr=8-1&amp;keywords=iOS逆向工程\" target=\"_blank\" rel=\"external\">此文参考了《iOS逆向工程（第二版）》</a></p>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在iOS7之前我们可以通过<code>- (NSString *)uniqueIdentifier</code>这个方法获取iPhone的唯一标识符，也叫作UDID。不过自从iOS7苹果就把这个方法给禁了，此时我们想要获取iPhone的唯一标识符就很困难。<br>不过苹果提供一个叫做IDFA的标识符，这个IDFA是广告标识符用来追踪广告投放的，不过用户可以在设置中手动重置IDFA，可靠性很低，目前常见的两种标记iPhone的方式为  </p>\n<ul>\n<li>openUDID  </li>\n<li>IDFA或UUID+keychain  </li>\n</ul>\n<p>这两种模式都有个弊端，用户重置手机或者刷机唯一标识符会发生变化，不过对于大多数情况是够用了。看来苹果是把路给封死了，有没有办法拿到之前的UDID呢？我们注意到iPhone的设置通用关于里面有手机的硬件信息，其中有一个serialNumber，这个serialnumber就是我们查询手机是否过保的依据，那么它肯定是唯一的，所以下文是围绕这个进行的探索。最终是可以拿到这个serialNumber的， 不过由于苹果的沙盒限制，所以只能在越狱机中拿到，如果想在非越狱机中拿到必须添加entitlements文件来获取权限，可想而知这个应用是无法上架的。<strong>下文仅作为逆向工程的一种思路和探索，请勿用于非法用途。</strong><br>","more":"</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"一、SSH连接手机（USB模式）\"><a href=\"#一、SSH连接手机（USB模式）\" class=\"headerlink\" title=\"一、SSH连接手机（USB模式）\"></a>一、SSH连接手机（USB模式）</h3><h4 id=\"1-映射端口\"><a href=\"#1-映射端口\" class=\"headerlink\" title=\"1.映射端口\"></a>1.映射端口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ /Users/gaoshilei/Desktop/reverse/USBSSH/tcprelay.py -t 22:6666</div><div class=\"line\">Forwarding local port 6666 to remote port 22</div></pre></td></tr></table></figure>\n<h4 id=\"2-连接手机，并且用grep命令快速筛选当前我们要调试的应用Preferences，附加debugserver开始1234端口等待lldb调试\"><a href=\"#2-连接手机，并且用grep命令快速筛选当前我们要调试的应用Preferences，附加debugserver开始1234端口等待lldb调试\" class=\"headerlink\" title=\"2.连接手机，并且用grep命令快速筛选当前我们要调试的应用Preferences，附加debugserver开始1234端口等待lldb调试\"></a>2.连接手机，并且用grep命令快速筛选当前我们要调试的应用Preferences，附加debugserver开始1234端口等待lldb调试</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ ssh root@localhost -p 6666</div><div class=\"line\">iPhone-5S:~ root# ps -e | grep Pre</div><div class=\"line\">  270 ??         0:00.29 /System/Library/PrivateFrameworks/MobileSoftwareUpdate.framework/XPCServices/com.apple.MobileSoftwareUpdate.CleanupPreparePathService.xpc/com.apple.MobileSoftwareUpdate.CleanupPreparePathService</div><div class=\"line\"> 1192 ??         0:14.26 /var/db/stash/_.fP74Fg/Applications/Preferences.app/Preferences</div><div class=\"line\"> 1289 ttys000    0:00.01 grep Pre</div><div class=\"line\">iPhone-5S:~ root# debugserver *:1234 -a &quot;Preferences&quot;</div><div class=\"line\">debugserver-@(#)PROGRAM:debugserver  PROJECT:debugserver-340.3.51.1</div><div class=\"line\"> for arm64.</div><div class=\"line\">Attaching to process Preferences...</div><div class=\"line\">Listening to port 1234 for a connection from *...</div></pre></td></tr></table></figure>\n<h4 id=\"3-完成以上两步接下来就可以进行lldb调试了，首先要把远端（手机）的1234端口映射到本地，跟前面提到的SSH端口映射一样\"><a href=\"#3-完成以上两步接下来就可以进行lldb调试了，首先要把远端（手机）的1234端口映射到本地，跟前面提到的SSH端口映射一样\" class=\"headerlink\" title=\"3.完成以上两步接下来就可以进行lldb调试了，首先要把远端（手机）的1234端口映射到本地，跟前面提到的SSH端口映射一样\"></a>3.完成以上两步接下来就可以进行lldb调试了，首先要把远端（手机）的1234端口映射到本地，跟前面提到的SSH端口映射一样</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ /Users/gaoshilei/Desktop/reverse/USBSSH/tcprelay.py -t 1234:1234</div><div class=\"line\">Forwarding local port 1234 to remote port 1234</div></pre></td></tr></table></figure>\n<h3 id=\"二、通过LLDB、IDA寻找线索\"><a href=\"#二、通过LLDB、IDA寻找线索\" class=\"headerlink\" title=\"二、通过LLDB、IDA寻找线索\"></a>二、通过LLDB、IDA寻找线索</h3><p>lldb的调试端口已经打开，此时我们可以进入调试</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ lldb</div><div class=\"line\">(lldb) process connect connect://localhost:1234</div><div class=\"line\">Process 1192 stopped  </div><div class=\"line\">* thread #1: tid = 0x523a6, 0x000000019a3c8a40 libsystem_kernel.dylib`mach_msg_trap + 8, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP  </div><div class=\"line\">    frame #0: 0x000000019a3c8a40 libsystem_kernel.dylib`mach_msg_trap + 8</div><div class=\"line\">libsystem_kernel.dylib`mach_msg_trap:</div><div class=\"line\">-&gt;  0x19a3c8a40 &lt;+8&gt;: ret    </div><div class=\"line\">libsystem_kernel.dylib`mach_msg_overwrite_trap:</div><div class=\"line\">    0x19a3c8a44 &lt;+0&gt;: movn   x16, #0x1f</div><div class=\"line\">    0x19a3c8a48 &lt;+4&gt;: svc    #0x80</div><div class=\"line\">    0x19a3c8a4c &lt;+8&gt;: ret</div></pre></td></tr></table></figure>\n<p>此时我们已经成功进入Preferences的调试阶段，先c一下，让程序继续运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) c</div><div class=\"line\">Process 1192 resuming</div></pre></td></tr></table></figure>\n<p>这么做的原因是我们待会要打印image的基地址偏移，有可能在我们打印的image list中没有我们想要的image。<br>此时我们已经找到到Preference.framework的基地址偏移，见下图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) im li -o -f</div><div class=\"line\">[  0] 0x00000000000dc000 /var/db/stash/_.fP74Fg/Applications/Preferences.app/Preferences(0x00000001000dc000)</div><div class=\"line\">[  1] 0x0000000100100000 /Library/MobileSubstrate/MobileSubstrate.dylib(0x0000000100100000)</div><div class=\"line\">[  2] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/PrivateFrameworks/BulletinBoard.framework/BulletinBoard</div><div class=\"line\">[  3] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation</div><div class=\"line\">[  4] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/Frameworks/IOKit.framework/Versions/A/IOKit</div><div class=\"line\">…</div><div class=\"line\">[ 44] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/PrivateFrameworks/Preferences.framework/Preferences</div><div class=\"line\">…</div></pre></td></tr></table></figure>\n<p>我们要找的image的序号在这里是44，它的基地址偏移为0x2e50000，我们把从iPhone中导出的PrivateFrameworks中的Preferences.framework丢到IDA中进行分析，这个二进制文件比较小，很快就分析完成，在前面我们已经知道iPhone的唯一序列号serial number是通过PSListController生成的，并且我们知道这是一个cell，我们要去调试<code>[PSListController tableView:cellForRowAtIndexPath:]</code>这个方法，从中找到cell值的来源，从而找到获取序列号的方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">__text:00000001908040C8 ; -[PSListController tableView:cellForRowAtIndexPath:]</div><div class=\"line\">__text:00000001908040C8 __PSListController_tableView_cellForRowAtIndexPath__</div><div class=\"line\">__text:00000001908040C8                                         ; DATA XREF: __objc_const:000000019C069B88\u0019o</div><div class=\"line\">__text:00000001908040C8</div><div class=\"line\">__text:00000001908040C8 var_80          = -0x80</div><div class=\"line\">__text:00000001908040C8 var_78          = -0x78</div><div class=\"line\">__text:00000001908040C8 var_70          = -0x70</div><div class=\"line\">__text:00000001908040C8 var_68          = -0x68</div><div class=\"line\">__text:00000001908040C8 var_60          = -0x60</div><div class=\"line\">__text:00000001908040C8 var_50          = -0x50</div><div class=\"line\">__text:00000001908040C8 var_40          = -0x40</div><div class=\"line\">__text:00000001908040C8 var_30          = -0x30</div><div class=\"line\">__text:00000001908040C8 var_20          = -0x20</div><div class=\"line\">__text:00000001908040C8 var_10          = -0x10</div><div class=\"line\">__text:00000001908040C8</div><div class=\"line\">__text:00000001908040C8                 STP             X28, X27, [SP,#var_60]!</div><div class=\"line\">__text:00000001908040CC                 STP             X26, X25, [SP,#0x60+var_50]</div><div class=\"line\">__text:00000001908040D0                 STP             X24, X23, [SP,#0x60+var_40]</div><div class=\"line\">__text:00000001908040D4                 STP             X22, X21, [SP,#0x60+var_30]</div><div class=\"line\">__text:00000001908040D8                 STP             X20, X19, [SP,#0x60+var_20]</div><div class=\"line\">__text:00000001908040DC                 STP             X29, X30, [SP,#0x60+var_10]</div><div class=\"line\">__text:00000001908040E0                 ADD             X29, SP, #0x60+var_10</div><div class=\"line\">__text:00000001908040E4                 SUB             SP, SP, #0x20</div><div class=\"line\">__text:00000001908040E8                 MOV             X21, X3</div><div class=\"line\">__text:00000001908040EC                 MOV             X20, X0</div><div class=\"line\">__text:00000001908040F0                 MOV             X0, X2</div><div class=\"line\">__text:00000001908040F4                 BL              0x96C400A0</div><div class=\"line\">__text:00000001908040F8                 MOV             X26, X0</div><div class=\"line\">__text:00000001908040FC                 ADRP            X8, #off_19DACC568@PAGE</div><div class=\"line\">__text:0000000190804100                 LDR             X1, [X8,#off_19DACC568@PAGEOFF]</div><div class=\"line\">__text:0000000190804104                 MOV             X0, X20</div><div class=\"line\">__text:0000000190804108                 MOV             X2, X21</div><div class=\"line\">__text:000000019080410C                 BL              0x96C39BC0</div><div class=\"line\">__text:0000000190804110                 MOV             X2, X0</div><div class=\"line\">__text:0000000190804114                 ADRP            X8, #_OBJC_IVAR_$_PSListController._specifiers@PAGE ; NSArray *_specifiers;</div><div class=\"line\">__text:0000000190804118                 LDRSW           X27, [X8,#_OBJC_IVAR_$_PSListController._specifiers@PAGEOFF] ; NSArray *_specifiers;</div><div class=\"line\">__text:000000019080411C                 LDR             X0, [X20,X27]</div><div class=\"line\">__text:0000000190804120                 ADRP            X8, #off_19DACC558@PAGE</div><div class=\"line\">……</div></pre></td></tr></table></figure>\n<p>我们在Preference.framework中基地址为0x190804114的位置打个断点，具体的做法是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) br s -a 0x190804114+0x2e50000</div><div class=\"line\">Breakpoint 1: where = Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76, address = 0x0000000193654114</div><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x0000000193654114 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 1.1</div><div class=\"line\">    frame #0: 0x0000000193654114 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76</div><div class=\"line\">Preferences`-[PSListController tableView:cellForRowAtIndexPath:]:</div><div class=\"line\">-&gt;  0x193654114 &lt;+76&gt;: adrp   x8, 53965</div><div class=\"line\">    0x193654118 &lt;+80&gt;: ldrsw  x27, [x8, #516]</div><div class=\"line\">    0x19365411c &lt;+84&gt;: ldr    x0, [x20, x27]</div><div class=\"line\">    0x193654120 &lt;+88&gt;: adrp   x8, 53960</div></pre></td></tr></table></figure>\n<p>这里断点这样打是因为系统加载可执行文件和各种framework的时候会有一个地址偏移，我们在打断点的时候要把这个偏移量加上，这样我们打的断点才是准确的。<br>可以看到我们已经成功打了一个断点，断点的address = 0x193654114。此时我们打印变量x0和x27的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x0</div><div class=\"line\">13</div><div class=\"line\">(lldb) po $x27</div><div class=\"line\">1104</div></pre></td></tr></table></figure>\n<p>我们执行ni让程序继续（这里的<code>ni</code>命令相当于Xcode的那个下箭头命令，也就是下一行）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) ni</div><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x0000000193654118 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 80, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x0000000193654118 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 80</div><div class=\"line\">Preferences`-[PSListController tableView:cellForRowAtIndexPath:]:</div><div class=\"line\">-&gt;  0x193654118 &lt;+80&gt;: ldrsw  x27, [x8, #516]</div><div class=\"line\">    0x19365411c &lt;+84&gt;: ldr    x0, [x20, x27]</div><div class=\"line\">    0x193654120 &lt;+88&gt;: adrp   x8, 53960</div><div class=\"line\">    0x193654124 &lt;+92&gt;: ldr    x22, [x8, #1368]</div><div class=\"line\">(lldb) ni</div><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x000000019365411c Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 84, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x000000019365411c Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 84</div><div class=\"line\">Preferences`-[PSListController tableView:cellForRowAtIndexPath:]:</div><div class=\"line\">-&gt;  0x19365411c &lt;+84&gt;: ldr    x0, [x20, x27]</div><div class=\"line\">    0x193654120 &lt;+88&gt;: adrp   x8, 53960</div><div class=\"line\">    0x193654124 &lt;+92&gt;: ldr    x22, [x8, #1368]</div><div class=\"line\">    0x193654128 &lt;+96&gt;: mov    x1, x22</div><div class=\"line\">(lldb) po $x27</div><div class=\"line\">848</div><div class=\"line\"></div><div class=\"line\">(lldb) po $x0</div><div class=\"line\">13</div></pre></td></tr></table></figure>\n<p>我们ni的两次，程序已经走到0x19080411C的位置，然后我们继续打印变量x0和x27的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x0</div><div class=\"line\">13</div><div class=\"line\">(lldb) po $x27</div><div class=\"line\">1104</div></pre></td></tr></table></figure>\n<p>打印出来的x0和x27都是随机数，还是没有什么收获，我们继续</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) ni</div><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x0000000193654120 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 88, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x0000000193654120 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 88</div><div class=\"line\">Preferences`-[PSListController tableView:cellForRowAtIndexPath:]:</div><div class=\"line\">-&gt;  0x193654120 &lt;+88&gt;:  adrp   x8, 53960</div><div class=\"line\">    0x193654124 &lt;+92&gt;:  ldr    x22, [x8, #1368]</div><div class=\"line\">    0x193654128 &lt;+96&gt;:  mov    x1, x22</div><div class=\"line\">    0x19365412c &lt;+100&gt;: bl     0x199a89bc0               ; objc_msgSend</div><div class=\"line\">(lldb) po $x0</div><div class=\"line\">&lt;__NSArrayI 0x13105a780&gt;(</div><div class=\"line\">G: &lt;PSSpecifier 0x12ff50cf0: ID 0, Name &apos;&apos; target &lt;(null): 0x0&gt;&gt; 0x12ff50cf0,</div><div class=\"line\">&lt;PSSpecifier 0x12ff50f50: ID NAME_CELL_ID, Name &apos;Name&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">G: &lt;PSSpecifier 0x12ff51680: ID 2, Name &apos;&apos; target &lt;(null): 0x0&gt;&gt; 0x12ff51680,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52360: ID NETWORK, Name &apos;Network&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52420: ID SONGS, Name &apos;Songs&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff519f0: ID VIDEOS, Name &apos;Videos&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff51ab0: ID PHOTOS, Name &apos;Photos&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff51b70: ID APPLICATIONS, Name &apos;Applications&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff524e0: ID User Data Capacity, Name &apos;Capacity&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff525a0: ID User Data Available, Name &apos;Available&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff526a0: ID ProductVersion, Name &apos;Version&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52850: ID CARRIER_VERSION, Name &apos;Carrier&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52980: ID ProductModel, Name &apos;Model&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52a60: ID SerialNumber, Name &apos;Serial Number&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52b90: ID MACAddress, Name &apos;Wi-Fi Address&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff51050: ID BTMACAddress, Name &apos;Bluetooth&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12fde95d0: ID ModemVersion, Name &apos;Modem Firmware&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">G: &lt;PSSpecifier 0x131031e90: ID 17, Name &apos;&apos; target &lt;(null): 0x0&gt;&gt; 0x131031e90,</div><div class=\"line\">&lt;PSSpecifier 0x12fde9c40: ID LEGAL_AND_REGULATORY, Name &apos;Legal&apos; target &lt;(null): 0x0&gt;&gt;,</div><div class=\"line\">G: &lt;PSSpecifier 0x131029dc0: ID TRUST_STORE_GROUP, Name &apos;&apos; target &lt;(null): 0x0&gt;&gt; 0x131029dc0,</div><div class=\"line\">&lt;PSSpecifier 0x131033520: ID TRUST_STORE, Name &apos;Trust Store&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>我们让程序执行下一步，发现此时x0已经有值了，可以明显的看出，x0的值是在0x190804114~0x19080411C这段代码生成的，下面我们的工作重点就是寻找这段代码干了什么，胜利就在眼前！下面我们验证一下这里面到底有没有我们要的序列号：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po [[$x0 objectAtIndex:13] class]</div><div class=\"line\">PSSpecifier</div><div class=\"line\">(lldb) po [[$x0 objectAtIndex:13] properties]</div><div class=\"line\">&#123;</div><div class=\"line\">    cellObject = &quot;&lt;PSTableCell: 0x130800000; baseClass = UITableViewCell; frame = (0 565; 320 45); text = &apos;Serial Number&apos;; hidden = YES; autoresize = W; tag = 4; gestureRecognizers = &lt;NSArray: 0x12ff821c0&gt;; layer = &lt;CALayer: 0x12fd7d340&gt;&gt;&quot;;</div><div class=\"line\">    id = SerialNumber;</div><div class=\"line\">    isCopyable = 1;</div><div class=\"line\">    value = DNPMVG0EFF9V;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们打印数组中存放cell数据的object属于哪个类，发现是<code>PSSpecifier</code>，我们找到之前导出的类的头文件，发现这个类有一个叫做<code>properties</code>的实例方法，我们调用一下发现我们要的序列号就在里面<code>value = DNPMVG0EFF9V</code>，这跟iPhone设置中看到的序列号是一致的。猜测这个数组里面存放着系统设置中<code>PSUIAboutController</code>中所有cel的数据，这个数组下一个肯定要传递到cell生成的方法中，这个就不做验证了，大事重要，我们继续找序列号的生成方法。<br>这个<code>PSSpecifier</code>中有一个<code>AboutDataSource</code>对象，这个非常可疑，从名称上可以判断，这个类是专门用于数据处理的，不过在这之前我们还是先验证一下，在0x190804114~0x19080411C这段地址中，执行了<code>_PSListController._specifiers</code>，我们从<code>PSListController</code>的头文件（下文有讲怎么获取）中可以看到有一个specifiers属性，我们在IDA分析的文件中找到<code>[PSListController specifiers]</code>，我们先定位到方法在二进制文件中的位置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">__text:00000001907FE4A8 ; -[PSListController specifiers]</div><div class=\"line\">__text:00000001907FE4A8 __PSListController_specifiers_          ; DATA XREF: __objc_const:000000019C069A08\u0019o</div><div class=\"line\">__text:00000001907FE4A8</div><div class=\"line\">__text:00000001907FE4A8 var_40          = -0x40</div><div class=\"line\">__text:00000001907FE4A8 var_30          = -0x30</div><div class=\"line\">__text:00000001907FE4A8 var_20          = -0x20</div><div class=\"line\">__text:00000001907FE4A8 var_10          = -0x10</div><div class=\"line\">__text:00000001907FE4A8</div><div class=\"line\">__text:00000001907FE4A8                 STP             X24, X23, [SP,#var_40]!</div><div class=\"line\">__text:00000001907FE4AC                 STP             X22, X21, [SP,#0x40+var_30]</div><div class=\"line\">__text:00000001907FE4B0                 STP             X20, X19, [SP,#0x40+var_20]</div><div class=\"line\">__text:00000001907FE4B4                 STP             X29, X30, [SP,#0x40+var_10]</div><div class=\"line\">__text:00000001907FE4B8                 ADD             X29, SP, #0x40+var_10</div><div class=\"line\">__text:00000001907FE4BC                 MOV             X19, X0</div><div class=\"line\">__text:00000001907FE4C0                 ADRP            X8, #_OBJC_IVAR_$_PSListController._specifiers@PAGE ; NSArray *_specifiers;</div><div class=\"line\">__text:00000001907FE4C4                 LDRSW           X22, [X8,#_OBJC_IVAR_$_PSListController._specifiers@PAGEOFF] ; NSArray *_specifiers;</div><div class=\"line\">__text:00000001907FE4C8                 LDR             X8, [X19,X22]</div><div class=\"line\">__text:00000001907FE4CC                 CBNZ            X8, loc_1907FE5E0</div><div class=\"line\">__text:00000001907FE4D0                 ADRP            X8, #_OBJC_IVAR_$_PSListController._dataSource@PAGE ; id &lt;PSSpecifierDataSource&gt; _dataSource;</div><div class=\"line\">__text:00000001907FE4D4                 LDRSW           X8, [X8,#_OBJC_IVAR_$_PSListController._dataSource@PAGEOFF] ; id &lt;PSSpecifierDataSource&gt; _dataSource;</div><div class=\"line\">__text:00000001907FE4D8                 LDR             X9, [X19,X8]</div><div class=\"line\">__text:00000001907FE4DC                 CBZ             X9, loc_1907FE550</div><div class=\"line\">__text:00000001907FE4E0                 ADRP            X9, #_OBJC_IVAR_$_PSListController._requestingSpecifiersFromDataSource@PAGE ; bool _requestingSpecifiersFromDataSource;</div><div class=\"line\">__text:00000001907FE4E4                 LDRSW           X23, [X9,#_OBJC_IVAR_$_PSListController._requestingSpecifiersFromDataSource@PAGEOFF] ; bool _requestingSpecifiersFromDataSource;</div><div class=\"line\">__text:00000001907FE4E8                 MOV             W9, #1</div><div class=\"line\">__text:00000001907FE4EC                 STRB            W9, [X19,X23]</div><div class=\"line\">__text:00000001907FE4F0                 LDR             X20, [X19,X8]</div><div class=\"line\">__text:00000001907FE4F4                 ADRP            X8, #selRef_specifier@PAGE</div><div class=\"line\">__text:00000001907FE4F8                 LDR             X1, [X8,#selRef_specifier@PAGEOFF]</div><div class=\"line\">__text:00000001907FE4FC                 MOV             X0, X19</div><div class=\"line\">__text:00000001907FE500                 BL              0x96C39BC0</div><div class=\"line\">__text:00000001907FE504                 MOV             X29, X29</div><div class=\"line\">__text:00000001907FE508                 BL              0x96C41EF0</div><div class=\"line\">__text:00000001907FE50C                 MOV             X21, X0</div><div class=\"line\">__text:00000001907FE510                 ADRP            X8, #selRef_specifiersForSpecifier_observer_@PAGE</div><div class=\"line\">__text:00000001907FE514                 LDR             X1, </div><div class=\"line\">……</div></pre></td></tr></table></figure>\n<p>然后在这里面下个断点看看会发生什么</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) br s -a 0x1907FE4D0+0x198e58640</div><div class=\"line\">Breakpoint 9: where = Preferences`-[PSListController specifiers] + 40, address = 0x000000019364e4d0</div></pre></td></tr></table></figure>\n<p>我们从设置中进入通用&gt;关于，发现一开始就走到了这个断点，我们猜测，一进入关于页面，系统会首先把所有cell的数据都准备好，然后加载UI</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x000000019364e4d0 Preferences`-[PSListController specifiers] + 40, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 9.1</div><div class=\"line\">    frame #0: 0x000000019364e4d0 Preferences`-[PSListController specifiers] + 40</div><div class=\"line\">Preferences`-[PSListController specifiers]:</div><div class=\"line\">-&gt;  0x19364e4d0 &lt;+40&gt;: adrp   x8, 53971</div><div class=\"line\">    0x19364e4d4 &lt;+44&gt;: ldrsw  x8, [x8, #536]</div><div class=\"line\">    0x19364e4d8 &lt;+48&gt;: ldr    x9, [x19, x8]</div><div class=\"line\">    0x19364e4dc &lt;+52&gt;: cbz    x9, 0x19364e550           ; &lt;+168&gt;</div></pre></td></tr></table></figure>\n<p>我们打印变量x8和x9的值，看一下系统做了什么</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x8</div><div class=\"line\">&lt;nil&gt;</div><div class=\"line\">(lldb) po $x9</div><div class=\"line\">PSUIAboutController</div></pre></td></tr></table></figure>\n<p>并没有数据之类的东西值得我们关注，让断点继续往下走，走到0x19364e4dc的位置，我们再次打印变量x8和x9的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) n</div><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x000000019364e4dc Preferences`-[PSListController specifiers] + 52, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x000000019364e4dc Preferences`-[PSListController specifiers] + 52</div><div class=\"line\">Preferences`-[PSListController specifiers]:</div><div class=\"line\">-&gt;  0x19364e4dc &lt;+52&gt;: cbz    x9, 0x19364e550           ; &lt;+168&gt;</div><div class=\"line\">    0x19364e4e0 &lt;+56&gt;: adrp   x9, 53971</div><div class=\"line\">    0x19364e4e4 &lt;+60&gt;: ldrsw  x23, [x9, #540]</div><div class=\"line\">    0x19364e4e8 &lt;+64&gt;: orr    w9, wzr, #0x1</div><div class=\"line\">(lldb) po $x8</div><div class=\"line\">952</div><div class=\"line\">(lldb) po $x9</div><div class=\"line\">&lt;AboutDataSource: 0x131130730&gt;</div></pre></td></tr></table></figure>\n<p>此时的变量x9已经变成了<code>AboutDataSource</code>，这里验证了我们上一步的猜想，所以我们重点来研究它，我们先找到这个类在哪个framework中，这里使用的是grep命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ grep AboutDataSource -r /Users/gaoshilei/Desktop/reverse/iOS-Runtime-Headers-9.1 </div><div class=\"line\">/Users/gaoshilei/Desktop/reverse/iOS-Runtime-Headers-9.1/PrivateFrameworks/PreferencesUI.framework/AboutDataSource.h:@interface AboutDataSource : PSSpecifierDataSource &#123;</div></pre></td></tr></table></figure>\n<p>这里要说明一下iOS-Runtime-Headers-9.1这个文件夹是iOS9.1系统的所有头文件（共有+私有），这个你可以自己导（iOS9之后只能用runtime导，class-dump已经不行了），你也可以拿现成的用，github上面已经有雷锋把所有系统的头文件都导出来了，直接下载就可以了。我们发现<code>AboutDataSource</code>这个类在<code>PrivateFrameworks/PreferencesUI.framework</code>中，先看一下这个类里面有什么方法和属性，有一个方法<code>- (void)_loadValues;</code> 我们对它进行分析。这里又要借助IDA分析，把PreferencesUI这个二进制文件丢到IDA里面，在0x19091EBB8这个位置打个断点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) br s -a 0x19091EBB8+0x2e50000</div><div class=\"line\">Breakpoint 3: where = PreferencesUI`-[AboutDataSource _loadValues] + 1956, address = 0x000000019376ebb8</div></pre></td></tr></table></figure>\n<p>接下来我们进入关于来触发断点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po (char *) $x28</div><div class=\"line\">&quot;_setValue:forSpecifierWithKey:&quot;</div></pre></td></tr></table></figure>\n<p>在这里打印变量x28的值，发现它是一个方法名，从名称来看是给<code>specifier</code>赋值的，看来我们要寻找的真相已经很近了，让代码走到下面的位置0x19376ebd8</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Process 2107 stopped</div><div class=\"line\">* thread #1: tid = 0xe8e23, 0x000000019376ebd8 PreferencesUI`-[AboutDataSource _loadValues] + 1988, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x000000019376ebd8 PreferencesUI`-[AboutDataSource _loadValues] + 1988</div><div class=\"line\">PreferencesUI`-[AboutDataSource _loadValues]:</div><div class=\"line\">-&gt;  0x19376ebd8 &lt;+1988&gt;: bl     0x198e58640               ; MGCopyAnswer</div><div class=\"line\">    0x19376ebdc &lt;+1992&gt;: mov    x22, x0</div><div class=\"line\">    0x19376ebe0 &lt;+1996&gt;: mov    x1, x19</div><div class=\"line\">    0x19376ebe4 &lt;+2000&gt;: bl     0x199a89bc0               ; objc_msgSend</div><div class=\"line\">(lldb) po $x0</div><div class=\"line\">SerialNumber</div></pre></td></tr></table></figure>\n<p>此时我们打印的x0是一个<code>NSCFConstantString</code>，本质就是一个<code>NSString</code>，继续<code>ni</code>让程序运行到0x19376ebdc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Process 2107 stopped</div><div class=\"line\">* thread #1: tid = 0xe8e23, 0x000000019376ebdc PreferencesUI`-[AboutDataSource _loadValues] + 1992, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x000000019376ebdc PreferencesUI`-[AboutDataSource _loadValues] + 1992</div><div class=\"line\">PreferencesUI`-[AboutDataSource _loadValues]:</div><div class=\"line\">-&gt;  0x19376ebdc &lt;+1992&gt;: mov    x22, x0</div><div class=\"line\">    0x19376ebe0 &lt;+1996&gt;: mov    x1, x19</div><div class=\"line\">    0x19376ebe4 &lt;+2000&gt;: bl     0x199a89bc0               ; objc_msgSend</div><div class=\"line\">    0x19376ebe8 &lt;+2004&gt;: cbnz   x0, 0x19376ec4c           ; &lt;+2104&gt;</div><div class=\"line\">(lldb) po $x0</div><div class=\"line\">DNPMVG0EFF9V</div></pre></td></tr></table></figure>\n<p>在这里我们打印了变量x0的值为<strong>DNPMVG0EFF9V</strong>，这就是我们苦苦寻找的序列号。不难看出，序列号就是在0x19376ebd8这行拿到的，范围越来越小，敌人无路可逃！下面我们就要对这行进行分析，我们按照之前的步骤，再次走到0x19376ebd8这个位置，这不过这次我们不要<code>step-over</code>，我们用<code>si</code>跳入看看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) si</div><div class=\"line\">Process 2107 stopped</div><div class=\"line\">* thread #1: tid = 0xe8e23, 0x0000000198e58640 libMobileGestalt.dylib`MGCopyAnswer, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step into</div><div class=\"line\">    frame #0: 0x0000000198e58640 libMobileGestalt.dylib`MGCopyAnswer</div><div class=\"line\">libMobileGestalt.dylib`MGCopyAnswer:</div><div class=\"line\">-&gt;  0x198e58640 &lt;+0&gt;: movz   x1, #0</div><div class=\"line\">    0x198e58644 &lt;+4&gt;: b      0x198e58648               ; ___lldb_unnamed_symbol64$$libMobileGestalt.dylib</div><div class=\"line\"></div><div class=\"line\">libMobileGestalt.dylib`___lldb_unnamed_symbol64$$libMobileGestalt.dylib:</div><div class=\"line\">    0x198e58648 &lt;+0&gt;: stp    x24, x23, [sp, #-64]!</div><div class=\"line\">    0x198e5864c &lt;+4&gt;: stp    x22, x21, [sp, #16]</div><div class=\"line\">此时跳入了一个静态库libMobileGestalt.dylib，我们可以在usr/lib/ibMobileGestalt.dylib找到它，我们将它扔进IDA，用当前的addr减去libMobileGestalt.dylib的基地址偏移得到它的静态地址0x196008640，对应的是一个函数MGCopyAnswer</div><div class=\"line\">__text:0000000196008640</div><div class=\"line\">__text:0000000196008640 ; =============== S U B R O U T I N E =======================================</div><div class=\"line\">__text:0000000196008640</div><div class=\"line\">__text:0000000196008640</div><div class=\"line\">__text:0000000196008640                 EXPORT _MGCopyAnswer</div><div class=\"line\">__text:0000000196008640 _MGCopyAnswer                           ; CODE XREF: sub_196005958+30\u0018p</div><div class=\"line\">__text:0000000196008640                                         ; sub_196006258+28\u0018p ...</div><div class=\"line\">__text:0000000196008640                 MOV             X1, #0</div><div class=\"line\">__text:0000000196008644                 B               sub_196008648</div><div class=\"line\">__text:0000000196008644 ; End of function _MGCopyAnswer</div></pre></td></tr></table></figure>\n<p>这个函数最外层只有两行代码，将立即数0赋给x1，然后跳进了子程序sub_196008648，跳进去之后进行了一些很复杂的运算，这里就不做介绍了，里面的实现大概是这样的：<br>x0是作为一个参数传入的，并且这里x0的值为<code>SerialNumber</code>，在地址为0x196008678的地方，这个函数中x1变成了一串随机数，有点像MD5加密之后的东西，应该是“钥匙”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po (char*) $x1</div><div class=\"line\">&quot;l92SaBpqIvQs+KBljuwGA&quot;</div></pre></td></tr></table></figure>\n<p>在0x196008690这里，我们<code>setp-into</code>这个函数，在函数的末尾返回值的地方0x196007474打个断点，打印返回值x0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x0</div><div class=\"line\">DNPMVG0EFF9V</div></pre></td></tr></table></figure>\n<p>这里的x0由<code>SerialNumber</code>变成了真正的序列号，并且就是在0x196008690对应的子程序sub_19600738C里面拿到的，所以我们就这样一个猜测，在<code>MGCopyAnswer</code>函数中，x0作为一个参数传入，并且在内部进行了一系列复杂的运算，拿到了获取序列号的“钥匙”x1，然后在sub_19600738C中拿到了最终的序列号。这里笔者也没有对序列号的拿到在进行进一步的深究，这里苹果做了很大的限制，再继续研究恐怕也是收获不大，而且我们在这里已经能拿到序列号了。  </p>\n<h3 id=\"三、验证结果\"><a href=\"#三、验证结果\" class=\"headerlink\" title=\"三、验证结果\"></a>三、验证结果</h3><p>接下来就是验证的过程了，我们写一个tweak来验证，当然也可以用其他方式来验证：<br>tweak的创建这里就不赘述了，我把我的tweak和makefile文件内容贴一下：</p>\n<blockquote>\n<p>tweak文件：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">tweak.xm:</div><div class=\"line\">extern &quot;C&quot; NSString *MGCopyAnswer(NSString*);</div><div class=\"line\">%hook SpringBoard</div><div class=\"line\">- (void)applicationDidFinishLaunching:(id)application &#123;</div><div class=\"line\">%orig;</div><div class=\"line\">NSString *serialNumber = [NSString stringWithFormat:@&quot;%@&quot;,[MGCopyAnswer(@&quot;SerialNumber&quot;) autorelease]];</div><div class=\"line\">UIAlertView *alert = [[UIAlertView alloc] initWithTitle:serialNumber message:nil delegate:self cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];</div><div class=\"line\">[alert show];</div><div class=\"line\">&#125;</div><div class=\"line\">%end</div></pre></td></tr></table></figure>\n<p>这里注入系统的SpringBoard，在SB启动的时候hook住applicationDidFinishLaunching：函数，并且在这个函数里面添加获取序列号的代码，并且以弹框的形式展现出来。  </p>\n<blockquote>\n<p>makefile文件:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">THEOS_DEVICE_IP = 192.168.0.115</div><div class=\"line\">include $(THEOS)/makefiles/common.mk</div><div class=\"line\">TWEAK_NAME = SerialNumber</div><div class=\"line\">SerialNumber_FILES = Tweak.xm</div><div class=\"line\">include $(THEOS_MAKE_PATH)/tweak.mk</div><div class=\"line\">SerialNumber_LDFLAGS = -lMobileGestalt</div><div class=\"line\">after-install::</div><div class=\"line\">\tinstall.exec &quot;killall -9 SpringBoard&quot;</div></pre></td></tr></table></figure>\n<p>其中有一行<code>SerialNumber_LDFLAGS = -lMobileGestalt</code>千万要注意，使用的时候要加载这个静态库，因为SpringBoard加载的时候我也不确定是否有加载这个库，然后我们验证一下吧！<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%9F%A5%E6%89%BE%E5%BA%8F%E5%88%97%E5%8F%B7%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B01.jpg\" alt=\"序列号验证-获取\"><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%9F%A5%E6%89%BE%E5%BA%8F%E5%88%97%E5%8F%B7%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B02.jpg\" alt=\"序列号验证-系统\">  </p>\n<p> <a href=\"https://www.amazon.cn/iOS应用逆向工程-沙梓社/dp/B00VFDVY7E/ref=sr_1_1?ie=UTF8&amp;qid=1477453672&amp;sr=8-1&amp;keywords=iOS逆向工程\">此文参考了《iOS逆向工程（第二版）》</a></p>"},{"title":"手把手教你逆向微信之朋友圈小视频转发（上）","date":"2016-11-09T16:00:00.000Z","_content":"#\t前言\n此文为逆向微信二进制文件，实现朋友圈小视频转发的教程，从最开始的汇编代码入手到最后重签名安装等操作，手把手教你玩转微信！学会之后再去逆向微信其他功能易如反掌。  \n本篇文章由于篇幅太长分成了两篇，**上篇**讲解的是逆向工作，也就是怎么找到相关的函数和方法实现，**下篇**讲解的是怎么在非越狱机重签名安装和越狱机tweak安装的详细过程。  \n**正文的第二部分还提供了微信自动抢红包、修改微信步数的代码，这些都可以照葫芦画瓢按照本文的套路一步步逆向找到，这里就不再赘述。**  \n在实践之前，需要准备好一部越狱的手机，然后将下文列出的所有工具安装好。IDA跟Reveal都是破解版，IDA的正版要2000多刀，对于这么牛逼的逆向工具确实物有所值，不过不是专门研究逆向的公司也没必要用正版的，下个Windows的破解版就好，Mac上暂时没找到。Mac上可以用hopper代替IDA，也是一款很牛逼的逆向工具。废话不多说，正式开始吧！\n\n<!-- more -->\n\n#\t逆向微信朋友圈（上篇）\n## 一、获取朋友圈的小视频\n>\t注意：本文逆向的微信的二进制文件为6.3.28版本，如果是不同的微信版本，二进制文件中的基地址也不相同\n\n####\t本文涉及到的工具  \n1. [cycript](http://www.cycript.org) \n2. LLDB与debugserver（Xcode自带）\n3. OpenSSH\n4. IDA\n5. Reveal\n6. [theos](https://github.com/theos/theos)\n7. [CydiaSubstrate](http://www.cydiasubstrate.com)\n8. iOSOpenDev\n9. ideviceinstaller\n10. tcprelay（本地端口映射，USB连接SSH，不映射可通过WiFi连接） \n11. [dumpdecrypted](https://github.com/stefanesser/dumpdecrypted)\n12. [class-dump](http://stevenygard.com/projects/class-dump/) \n13. [iOS App Signer](https://github.com/DanTheMan827/ios-app-signer)\n14. 编译好的[yololib](https://github.com/gaoshilei/yololib)\n\n**逆向环境为MacOS\t+\tiPhone5S 9.1越狱机**  \n先用dumpdecrypted给微信砸壳（不会的请我写的看[这篇教程](http://www.gaoshilei.com/2016/07/17/dumpdecrypted给App砸壳/)），获得一个WeChat.decrypted文件，先把这个文件扔到IDA中分析（60MB左右的二进制文件，IDA差不多40分钟才能分析完），用class-dump导出所有头文件\n\n```\nLeonLei-MBP:~ gaoshilei$ class-dump -S -s -H /Users/gaoshilei/Desktop/reverse/binary_for_class-dump/WeChat.decrypted -o /Users/gaoshilei/Desktop/reverse/binary_for_class-dump/class-Header/WeChat\n```\n\n我滴个亲娘！一共有8000个头文件，微信果然工程量浩大！稳定一下情绪，理一理思路继续搞。要取得小视频的下载链接，找到播放视频的View，顺藤摸瓜就能找到小视频的URL。用Reveal查看小视频的播放窗口\n![Reveal](http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E8%A7%86%E9%A2%91%E8%BD%AC%E5%8F%91Reveal.png)  \n可以看出来WCContentItemViewTemplateNewSigh这个对象是小视频的播放窗口，它的subView有WCSightView，SightView、SightPlayerView，这几个类就是我们的切入点。\n保存视频到favorite的时候是长按视频弹出选项的，那么在WCContentItemViewTemplateNewSight这个类里面可能有手势相关的方法，去刚才导出的头文件中找线索。\n\n```\n- (void)onLongTouch;\n- (void)onLongPressedWCSight:(id)arg1;\n- (void)onLongPressedWCSightFullScreenWindow:(id)arg1;\n```\n\n这几个方法跟长按手势相关，再去IDA中找到这些函数，逐个查看。onLongPressedWCSight和onLongPressedWCSightFullScreenWindow都比较简单，onLongTouch比较长，而且发现了内部调用了方法Favorites_Add，因为长按视频的时候出来一个选项就是Favorites，并且我看到这个函数调用\n\n```\nADRP            X8, #selRef_sightVideoPath@PAGE\nLDR             X1, [X8,#selRef_sightVideoPath@PAGEOFF]\n```\n\n这里拿到了小视频的地址，可以推测这个函数跟收藏有关，下面打断点测试。\n\n```\n(lldb) im li -o -f\n[  0] 0x000000000003c000 /var/mobile/Containers/Bundle/Application/2F1D52EC-C57E-4F95-B715-EF04351232E8/WeChat.app/WeChat(0x000000010003c000)\n```\n\n可以看到WeChat的ASLR为0x3c000，在IDA查找到这三个函数的基地址，分别下断点\n\n```\n(lldb) br s -a 0x1020D3A10+0x3c000\nBreakpoint 1: where = WeChat`___lldb_unnamed_symbol110094$$WeChat + 28, address = 0x000000010210fa10\n(lldb) br s -a 0x1020D3370+0x3c000\nBreakpoint 2: where = WeChat`___lldb_unnamed_symbol110091$$WeChat + 8, address = 0x000000010210f370\n(lldb) br s -a 0x1020D33E4+0x3c000\nBreakpoint 3: where = WeChat`___lldb_unnamed_symbol110092$$WeChat + 12, address = 0x000000010210f3e4\n```\n\n回到微信里面长按小视频，看断点触发情况\n\n```\nProcess 3721 stopped\n* thread #1: tid = 0x658fc, 0x000000010210f370 WeChat`___lldb_unnamed_symbol110091$$WeChat + 8, queue = 'com.apple.main-thread', stop reason = breakpoint 2.1\n    frame #0: 0x000000010210f370 WeChat`___lldb_unnamed_symbol110091$$WeChat + 8\nWeChat`___lldb_unnamed_symbol110091$$WeChat:\n->  0x10210f370 <+8>:  add    x29, sp, #16              ; =16 \n    0x10210f374 <+12>: mov    x19, x0\n    0x10210f378 <+16>: adrp   x8, 4968\n    0x10210f37c <+20>: ldr    x0, [x8, #744]\n(lldb) c\nProcess 3721 resuming\nProcess 3721 stopped\n* thread #1: tid = 0x658fc, 0x000000010210fa10 WeChat`___lldb_unnamed_symbol110094$$WeChat + 28, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x000000010210fa10 WeChat`___lldb_unnamed_symbol110094$$WeChat + 28\nWeChat`___lldb_unnamed_symbol110094$$WeChat:\n->  0x10210fa10 <+28>: add    x29, sp, #96              ; =96 \n    0x10210fa14 <+32>: sub    sp, sp, #96               ; =96 \n    0x10210fa18 <+36>: mov    x19, x0\n    0x10210fa1c <+40>: adrp   x8, 4863\n……\n```\n\n发现断点2先被触发，接着触发断点1，后面断点2和1又各触发了1次，断点3一直很安静。可以排除onLongPressedWCSightFullScreenWindow与收藏小视频的联系。小视频的踪影就要在剩下的两个方法中寻找了。通过V找到C，顺藤摸瓜找到M屡试不爽！用cycript注入WeChat，拿到播放小视频的view所在的Controller。\n\n```\ncy# [#0x138c18030 nextResponder]\n#\"<WCTimeLineCellView: 0x138c34620; frame = (0 0; 319 249); tag = 1048577; layer = <CALayer: 0x138362ba0>>\"\ncy# [#0x138c34620 nextResponder]\n#\"<UITableViewCellContentView: 0x138223c70; frame = (0 0; 320 256); gestureRecognizers = <NSArray: 0x1384ec480>; layer = <CALayer: 0x138081dc0>>\"\ncy# [#0x138223c70 nextResponder]\n#\"<MMTableViewCell: 0x138c9f930; baseClass = UITableViewCell; frame = (0 307; 320 256); autoresize = W; layer = <CALayer: 0x1382dcd10>>\"\ncy# [#0x138c9f930 nextResponder]\n#\"<UITableViewWrapperView: 0x137b57800; frame = (0 0; 320 504); gestureRecognizers = <NSArray: 0x1383db660>; layer = <CALayer: 0x138af20c0>; contentOffset: {0, 0}; contentSize: {320, 504}>\"\ncy# [#0x137b57800 nextResponder]\n#\"<MMTableView: 0x137b8ae00; baseClass = UITableView; frame = (0 0; 320 568); gestureRecognizers = <NSArray: 0x138adb590>; layer = <CALayer: 0x138956890>; contentOffset: {0, 99.5}; contentSize: {320, 3193}>\"\ncy# [#0x137b8ae00 nextResponder]\n#\"<UIView: 0x138ade5c0; frame = (0 0; 320 568); autoresize = W+H; layer = <CALayer: 0x138ac9990>>\"\ncy# [#0x138ade5c0 nextResponder]\n#\"<WCTimeLineViewController: 0x1379eb000>\"\n```\n\n通过响应者链条找到\nWCContentItemViewTemplateNewSight所属的Controller为WCTimeLineViewController。在这个类的头文件中并没有发现有价值的线索，不过我们注意到小视频所在的view是属于MMTableVIewCell的（见上图Reveal分析图），这是每一个iOS最熟悉的TableView，cell的数据是通过UITableViewDataSource的代理方法`- tableView:cellForRowAtIndexPath:`赋值的，通过这个方法肯定能知道到M的影子。在IDA中找到`[WCTimeLineViewController tableView:cellForRowAtIndexPath:]`,定位到基地址0x10128B6B0位置：\n\n```\n__text:000000010128B6B0     ADRP     X8, #selRef_genNormalCell_indexPath_@PAGE\n```\n\n这里的函数是WCTimeLineViewController中生成cell的方法，除了这个方法在这个类中还有另外三个生成cell的方法：\n\n```\n- (void)genABTestTipCell:(id)arg1 indexPath:(id)arg2;\n- (void)genRedHeartCell:(id)arg1 indexPath:(id)arg2;\n- (void)genUploadFailCell:(id)arg1 indexPath:(id)arg2;\n```\n\n通过字面意思可以猜测出normal这个应该是生成小视频cell的方法。继续在IDA中寻找线索\n\n```\n__text:0000000101287CC8     ADRP     X8, #selRef_getTimelineDataItemOfIndex_@PAGE\n```\n\n在`genNormalCell:IndexPath:`方法中发现上面这个方法，可以大胆猜想这个方法是获取TimeLine（朋友圈）数据的方法，那小视频的数据肯定也是通过这个方法获取的，并且IDA可以看到这个方法中调用一个叫做`selRef_getTimelineDataItemOfIndex_`的方法，获取DataItem貌似就是cell的数据源啊！接下来用LLDB下断点验证猜想。\n通过IDA可以找到这个方法对应的基地址为：0x101287CE4，先打印正在运行WeChat的ASLR偏移\n\n```\nLeonLei-MBP:~ gaoshilei$ lldb\n(lldb) process connect connect://localhost:1234\n(lldb) im li -o -f \n[0] 0x0000000000050000 /var/mobile/Containers/Bundle/Application/2DCE8F30-9B6B-4652-901C-37EB1FF2A40D/WeChat.app/WeChat(0x0000000100050000)\n```\n\n所以我们下断点的位置是0x50000+0x101287CE4\n\n```\n(lldb) br s -a 0x50000+0x101287CE4\nBreakpoint 1: where = WeChat`___lldb_unnamed_symbol63721$$WeChat + 252, address = 0x00000001012d7ce4\n```\n\n打印x0的值\n\n```\n(lldb) po $x0\nClass name: WCDataItem, addr: 0x15f5f03b0\ntid: 12393001887435993280\nusername: wxid_z8twcz4o18fg12\ncreatetime: 1477360950\ncommentUsers: (\n)\ncontentObj: <WCContentItem: 0x15f57d000>\n\n```\n\n得到一个WCDataItem的对象，这里x0的值就是`selRef_getTimelineDataItemOfIndex_`执行完的返回值，然后把x0的值改掉\n\n```\n(lldb) register write $x0 0\n(lldb) c\n```\n\n此时会发现我们要刷新的那条小视频内容全部为空  \n![小视频内容为空](http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E8%A7%86%E9%A2%91-%E8%BD%AC%E5%8F%91%E5%B0%8F%E8%A7%86%E9%A2%91%E4%B8%BA%E7%A9%BA.jpg)  \n到这里已经找到了小视频的源数据获取方法，问题是我们怎么拿到这个WCDataItem呢？继续看IDA分析函数的调用情况：  \n>\tWCTimeLineViewController - (void)genNormalCell:(id) indexPath:(id)  \n\n\n```\n__text:0000000101287BCC                 STP             X28, X27, [SP,#var_60]!\n__text:0000000101287BD0                 STP             X26, X25, [SP,#0x60+var_50]\n__text:0000000101287BD4                 STP             X24, X23, [SP,#0x60+var_40]\n__text:0000000101287BD8                 STP             X22, X21, [SP,#0x60+var_30]\n__text:0000000101287BDC                 STP             X20, X19, [SP,#0x60+var_20]\n__text:0000000101287BE0                 STP             X29, X30, [SP,#0x60+var_10]\n__text:0000000101287BE4                 ADD             X29, SP, #0x60+var_10\n__text:0000000101287BE8                 SUB             SP, SP, #0x80\n__text:0000000101287BEC                 MOV             X19, X3\n__text:0000000101287BF0                 MOV             X22, X0\n__text:0000000101287BF4                 MOV             W25, #0x100000\n__text:0000000101287BF8                 MOVK            W25, #1\n__text:0000000101287BFC                 MOV             X0, X2\n__text:0000000101287C00                 BL              _objc_retain\n__text:0000000101287C04                 MOV             X28, X0\n__text:0000000101287C08                 MOV             X0, X19\n__text:0000000101287C0C                 BL              _objc_retain\n__text:0000000101287C10                 MOV             X20, X0\n__text:0000000101287C14                 STR             X20, [SP,#0xE0+var_98]\n__text:0000000101287C18                 ADRP            X8, #selRef_row@PAGE\n__text:0000000101287C1C                 LDR             X1, [X8,#selRef_row@PAGEOFF]\n__text:0000000101287C20                 BL              _objc_msgSend\n__text:0000000101287C24                 MOV             X26, X0\n__text:0000000101287C28                 ADRP            X8, #selRef_section@PAGE\n__text:0000000101287C2C                 LDR             X19, [X8,#selRef_section@PAGEOFF]\n__text:0000000101287C30                 MOV             X0, X20\n__text:0000000101287C34                 MOV             X1, X19\n__text:0000000101287C38                 BL              _objc_msgSend\n__text:0000000101287C3C                 STR             X0, [SP,#0xE0+var_A8]\n__text:0000000101287C40                 MOV             X0, X20\n__text:0000000101287C44                 MOV             X1, X19\n__text:0000000101287C48                 BL              _objc_msgSend\n__text:0000000101287C4C                 MOV             X2, X0\n__text:0000000101287C50                 ADRP            X8, #selRef_calcDataItemIndex_@PAGE\n__text:0000000101287C54                 LDR             X1, [X8,#selRef_calcDataItemIndex_@PAGEOFF]\n__text:0000000101287C58                 MOV             X0, X22\n__text:0000000101287C5C                 BL              _objc_msgSend\n__text:0000000101287C60                 MOV             X21, X0\n__text:0000000101287C64                 STR             X21, [SP,#0xE0+var_C0]\n__text:0000000101287C68                 ADRP            X8, #classRef_MMServiceCenter@PAGE\n__text:0000000101287C6C                 LDR             X0, [X8,#classRef_MMServiceCenter@PAGEOFF]\n__text:0000000101287C70                 ADRP            X8, #selRef_defaultCenter@PAGE\n__text:0000000101287C74                 LDR             X1, [X8,#selRef_defaultCenter@PAGEOFF]\n__text:0000000101287C78                 STR             X1, [SP,#0xE0+var_B8]\n__text:0000000101287C7C                 BL              _objc_msgSend\n__text:0000000101287C80                 MOV             X29, X29\n__text:0000000101287C84                 BL              _objc_retainAutoreleasedReturnValue\n__text:0000000101287C88                 MOV             X19, X0\n__text:0000000101287C8C                 ADRP            X8, #classRef_WCFacade@PAGE\n__text:0000000101287C90                 LDR             X0, [X8,#classRef_WCFacade@PAGEOFF]\n__text:0000000101287C94                 ADRP            X8, #selRef_class@PAGE\n__text:0000000101287C98                 LDR             X1, [X8,#selRef_class@PAGEOFF]\n__text:0000000101287C9C                 STR             X1, [SP,#0xE0+var_B0]\n__text:0000000101287CA0                 BL              _objc_msgSend\n__text:0000000101287CA4                 MOV             X2, X0\n__text:0000000101287CA8                 ADRP            X8, #selRef_getService_@PAGE\n__text:0000000101287CAC                 LDR             X1, [X8,#selRef_getService_@PAGEOFF]\n__text:0000000101287CB0                 STR             X1, [SP,#0xE0+var_A0]\n__text:0000000101287CB4                 MOV             X0, X19\n__text:0000000101287CB8                 BL              _objc_msgSend\n__text:0000000101287CBC                 MOV             X29, X29\n__text:0000000101287CC0                 BL              _objc_retainAutoreleasedReturnValue\n__text:0000000101287CC4                 MOV             X20, X0\n__text:0000000101287CC8                 ADRP            X8, #selRef_getTimelineDataItemOfIndex_@PAGE\n__text:0000000101287CCC                 LDR             X1, [X8,#selRef_getTimelineDataItemOfIndex_@PAGEOFF]\n__text:0000000101287CD0                 STR             X1, [SP,#0xE0+var_C8]\n__text:0000000101287CD4                 MOV             X2, X21\n__text:0000000101287CD8                 BL              _objc_msgSend\n__text:0000000101287CDC                 MOV             X29, X29\n__text:0000000101287CE0                 BL              _objc_retainAutoreleasedReturnValue\n__text:0000000101287CE4                 MOV             X21, X0\n__text:0000000101287CE8                 MOV             X0, X20\n......\n```\n\n`selRef_getTimelineDataItemOfIndex_ `传入的参数是x2，可以看到传值给x2的x21是函数`selRef_calcDataItemIndex_ `的返回值，是一个unsigned long数据类型。继续分析，`selRef_getTimelineDataItemOfIndex_ `函数的调用者是上一步`selRef_getService_ `的返回值，经过断点分析发现是一个`WCFacade`对象。整理一下`selRef_getTimelineDataItemOfIndex_ `的调用：  \n**调用者是`selRef_getService_ `的返回值；参数是`selRef_calcDataItemIndex_ `的返回值**  \n下面把目光转向那两个函数，用相同的原理分析它们各自怎么实现调用  \n1.\t先看`selRef_getService_`：  \n在0x101287CB4这个位置可以发现，这个函数的调用者是从通过x19 MOV的，打印x19发现是一个`MMServiceCenter`对象，往上找x19是在0x101287C88这个位置赋值的，结果很清晰x19是`[MMServiceCenter defaultCenter]`的返回值。   \n在0x101287CA4位置可以找到传入的参数x2，往上分析可以看出来它的参数是`[WCFacade class]`的返回值。  \n2.\t接着找`selRef_calcDataItemIndex_ `：  \n在0x101287C58的位置找到它的调用者x0，x0通过x22赋值，继续向上寻找，发现在最上面0x101287BF0的位置，x22是x0赋值的，一开始的x0就是`WCTimeLineViewController`自身。  \n在0x101287C4C位置发现传入的参数来自x2,x2是通过上一步`selRef_section`函数的返回值x0赋值的，在0x101287C30位置可以发现`selRef_section`函数的调用者是x20赋值的，如下图所示，最终找到`selRef_section`的调用者是x3  \n![selRef_section函数的调用者](http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E8%A7%86%E9%A2%91%E8%BD%AC%E5%8F%91-selRef_section%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E8%80%85.png)  \nx3就是函数` WCTimeLineViewController - (void)genNormalCell:(id) indexPath:(id)`的第二个参数indexPath,，所以`selRef_calcDataItemIndex_ `的参数是`[IndexPath section]`。  \n对上面的分析结果做个梳理：  \n因此`getTimelineDataItemOfIndex:`的调用者可以通过\n\n```\n[[MMServiceCenter defaultCenter] getService:[WCFacade class]]\n```\n\n来获得,它的参数可以通过下面的函数获取\n\n```OC\n[WCTimeLineViewController calcDataItemIndex:[indexPath section]]\n```\n\n总感觉还少点什么？indexPath我们还没拿到呢！下一步就是拿到indexPath,这个就比较简单了，因为我们位于`[WCContentItemViewTemplateNewSight onLongTouch]`中，所以可以通过`[self nextResponder]`依次拿到MMTableViewCell、MMTableView和WCTimeLineViewController，再通过`[MMTableView indexPathForCell:MMTableViewCell]`拿到indexPath。  \n做完这些，已经拿到WCDataItem对象，接下来的重点要放在WCDataItem上，最终要获取我们要的小视频。到这个类的头文件中找线索，因为视频是下载完成后才能播放的，所以这里应该拿到了视频的路径，所以要注意url和path相关的属性或方法，然后找到下面这几个嫌疑对象\n\n```\n@property(retain, nonatomic) NSString *sourceUrl2; \n@property(retain, nonatomic) NSString *sourceUrl; \n- (id)descriptionForKeyPaths;\n- (id)keyPaths;\n```\n\n回到LLDB中，用断点打印这些值，看看有什么。\n\n```\n(lldb) po [$x0 keyPaths]\n<__NSArrayI 0x15f74e9d0>(\n\ttid,\n\tusername,\n\tcreatetime,\n\tcommentUsers,\n\tcontentObj\n)\n(lldb) po [$x0 descriptionForKeyPaths]\nClass name: WCDataItem, addr: 0x15f5f03b0\ntid: 12393001887435993280\nusername: wxid_z8twcz4o18fg12\ncreatetime: 1477360950\ncommentUsers: (\n)\ncontentObj: <WCContentItem: 0x15f57d000>\n(lldb) po [$x0 sourceUrl]\n nil\n(lldb) po [$x0 sourceUrl2]\n nil\n```\n\n并没有什么有价值的线索，不过注意到WCDataItem里面有一个WCContentItem，看来只能从这儿入手了，去看一下头文件吧！\n\n```\n@property(retain, nonatomic) NSString *linkUrl; \n@property(retain, nonatomic) NSString *linkUrl2; \n@property(retain, nonatomic) NSMutableArray *mediaList;\n```\n\n在LLDB打印出来\n\n```\n(lldb) po [[$x0 valueForKey:@\"contentObj\"] linkUrl]\nhttps://support.weixin.qq.com/cgi-bin/mmsupport-bin/readtemplate?t=page/common_page__upgrade&v=1\n(lldb) po [[$x0 valueForKey:@\"contentObj\"] linkUrl2]\n nil\n(lldb) po [[$x0 valueForKey:@\"contentObj\"] mediaList]\n<__NSArrayM 0x15f985e10>(\n<WCMediaItem: 0x15dfebdf0>\n)\n```\n\nmediaList数组里面有一个WCMediaItem对象，Media一般用来表示视频和音频，大胆猜测就是它了！赶紧找到头文件搜索一遍。\n\n```\n@property(retain, nonatomic) WCUrl *dataUrl;\n- (id)pathForData;\n- (id)pathForSightData;\n- (id)pathForTempAttachVideoData;\n- (id)videoStreamForData;\n```\n上面这些属性和方法中`pathForSightData`是最有可能拿到小视频路径的，继续验证\n\n```OC\n(lldb) po [[[[$x0 valueForKey:@\"contentObj\"] mediaList] lastObject] dataUrl]\ntype[1], url[http://vweixinf.tc.qq.com/102/20202/snsvideodownload?filekey=30270201010420301e020166040253480410d14adcddf086f4e131d11a5b1cca1bdf0203039fa00400&bizid=1023&hy=SH&fileparam=302c0201010425302302040fde55e20204580ebd3602024eea02031e8d7d02030f42400204d970370a0201000400], enckey[0], encIdx[-1], token[]\n(lldb) po [[[[$x0 valueForKey:@\"contentObj\"] mediaList] lastObject] pathForData]\n/var/mobile/Containers/Data/Application/7C3A6322-1F57-49A0-ACDE-6EF0ED74D137/Library/WechatPrivate/6f696a1b596ce2499419d844f90418aa/wc/media/5/53/8fb0cdd77208de5b56169fb3458b45\n(lldb) po [[[[$x0 valueForKey:@\"contentObj\"] mediaList] lastObject] pathForSightData]\n/var/mobile/Containers/Data/Application/7C3A6322-1F57-49A0-ACDE-6EF0ED74D137/Library/WechatPrivate/6f696a1b596ce2499419d844f90418aa/wc/media/5/53/8fb0cdd77208de5b56169fb3458b45.mp4\n(lldb) po [[[[$x0 valueForKey:@\"contentObj\"] mediaList] lastObject] pathForAttachVideoData]\n nil\n(lldb) po [[[[$x0 valueForKey:@\"contentObj\"] mediaList] lastObject] videoStreamForData]\n nil\n```\n\n拿到小视频的网络url和本地路径了！这里可以用iFunBox或者scp从沙盒拷贝这个文件看看是不是这个cell应该播放的小视频。\n\n```OC\nLeonLei-MBP:~ gaoshilei$ scp root@192.168.0.115:/var/mobile/Containers/Data/Application/7C3A6322-1F57-49A0-ACDE-6EF0ED74D137/Library/WechatPrivate/6f696a1b596ce2499419d844f90418aa/wc/media/5/53/8fb0cdd77208de5b56169fb3458b45.mp4 Desktop/\n8fb0cdd77208de5b56169fb3458b45.mp4                100%  232KB 231.9KB/s   00:00    \n```\n\n用QuickTime打开发现果然是我们要寻找的小视频。再验证一下url是否正确，把上面打印的dataUrl在浏览器中打开，发现也是这个小视频。分析这个类可以得出下面的结论：  \n\n- **dataUrl：**小视频的网络url\n- **pathForData：**小视频的本地路径\n- **pathForSightData：**小视频的本地路径（不带后缀）\n\n至此小视频的路径和取得方式分析已经完成，要实现转发还要继续分析微信的朋友圈发布。\n\n##\t 二、实现转发功能\n###\t1.“走进死胡同”\n>\t这节是我在找小视频转发功能时走的弯路，扒到最后并没有找到实现方法，不过也提供了一些逆向中常用的思路和方法，不想看的可以跳到第二节。  \n\n####\t（1）找到小视频拍摄完成调用的方法名称\n打开小视频的拍摄界面，用cycript注入，我们要找到发布小视频的方法是哪个，然后查看当前的窗口有哪些window（因为小视频的拍摄并不是在UIApplication的keyWindow中进行的）\n\n```OC\ncy# [UIApp windows].toString()\n(\n    \"<iConsoleWindow: 0x125f75e20; baseClass = UIWindow; frame = (0 0; 320 568); autoresize = W+H; gestureRecognizers = <NSArray: 0x125f77b70>; layer = <UIWindowLayer: 0x125df4810>>\",\n    \"<SvrErrorTipWindow: 0x127414d40; baseClass = UIWindow; frame = (0 64; 320 45); hidden = YES; gestureRecognizers = <NSArray: 0x12740d930>; layer = <UIWindowLayer: 0x1274030b0>>\",\n    \"<MMUIWindow: 0x127796440; baseClass = UIWindow; frame = (0 0; 320 568); gestureRecognizers = <NSArray: 0x1278083c0>; layer = <UIWindowLayer: 0x127796750>>\",\n    \"<UITextEffectsWindow: 0x1270e0d40; frame = (0 0; 320 568); opaque = NO; autoresize = W+H; layer = <UIWindowLayer: 0x1270b4ba0>>\",\n    \"<NewYearActionSheet: 0x127797e10; baseClass = UIWindow; frame = (0 0; 320 568); hidden = YES; userInteractionEnabled = NO; layer = <UIWindowLayer: 0x1277d5490>>\"\n)\n```\n\n发现当前页面一共有5个window，其中MMUIWindow是小视频拍摄所在的window，打印它的UI树状结构\n\n```OC\ncy# [#0x127796440 recursiveDescription]\n```\n\n打印结果比较长，不贴了。找到这个按钮是拍摄小视频的按钮\n\n```OC\n   |    |    |    |    |    | <UIButton: 0x1277a9d70; frame = (89.5 368.827; 141 141); opaque = NO; gestureRecognizers = <NSArray: 0x1277aaeb0>; layer = <CALayer: 0x1277a9600>>\n   |    |    |    |    |    |    | <UIView: 0x1277aa0a0; frame = (0 0; 141 141); userInteractionEnabled = NO; tag = 252707333; layer = <CALayer: 0x1277aa210>>\n   |    |    |    |    |    |    |    | <UIImageView: 0x1277aa2e0; frame = (0 0; 141 141); opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x1277aa490>>\n```\n\n然后执行\n\n```OC\ncy# [#0x1277a9d70 setHidden:YES]\n```\n\n发现拍摄的按钮消失了，验证了我的猜想。寻找按钮的响应事件，可以通过target来寻找\n\n```OC\ncy# [#0x1277a9d70 allTargets]\n[NSSet setWithArray:@[#\"<MainFrameSightViewController: 0x1269a4600>\"]]]\ncy# [#0x1277a9d70 allControlEvents]\n193\ncy# [#0x1277a9d70 actionsForTarget:#0x1269a4600 forControlEvent:193]\nnull\n```\n\n发现按钮并没有对应的action，这就奇怪了！UIButton必须要有target和action，不然这个Button不能响应事件。我们试试其他的ControlEvent\n\n```OC\ncy# [#0x1277a9d70 actionsForTarget:#0x1269a4600 forControlEvent:UIControlEventTouchDown]\n@[\"btnPress\"]\ncy# [#0x1277a9d70 actionsForTarget:#0x1269a4600 forControlEvent:UIControlEventTouchUpOutside]\n@[\"btnRelease\"]\ncy# [#0x1277a9d70 actionsForTarget:#0x1269a4600 forControlEvent:UIControlEventTouchUpInside]\n@[\"btnRelease\"]\n```\n\n结果发现这三个ContrlEvent有对应的action，我们再看看这三个枚举的值\n\n```OC\ntypedef enum UIControlEvents : NSUInteger {\n    UIControlEventTouchDown = 1 <<  0,\n    UIControlEventTouchDownRepeat = 1 <<  1,\n    UIControlEventTouchDragInside = 1 <<  2,\n    UIControlEventTouchDragOutside = 1 <<  3,\n    UIControlEventTouchDragEnter = 1 <<  4,\n    UIControlEventTouchDragExit = 1 <<  5,\n    UIControlEventTouchUpInside = 1 <<  6,\n    UIControlEventTouchUpOutside = 1 <<  7,\n    UIControlEventTouchCancel = 1 <<  8,\n\t......\n} UIControlEvents;\n```\n\n可以看出来UIControlEventTouchDown对应1，UIControlEventTouchUpInside对应128，UIControlEventTouchUpOutside对应64，三者相加正好193！原来调用`[#0x1277a9d70 allControlEvents]`的时候返回的应该是枚举，有多个枚举则把它们的值相加，是不是略坑？我也是这样觉得的！刚才我们把三种ControlEvent对应的action都打印出来了，继续LLDB+IDA进行动态分析。\n####\t（2）找到小视频拍摄完成跳转到发布界面的方法  \n因为要找到小视频发布的方法，所以对应的`btnPress`函数我们并不关心，把重点放在`btnRelease`上面，拍摄按钮松开后就会调用的方法。在IDA中找到这个方法\n![MainFrameSightViewController - (void)btnRelease](http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E8%A7%86%E9%A2%91%E8%BD%AC%E5%8F%91-btnRelease.png)  \n找到之后下个断点\n\n```OC\n(lldb) br s -a 0xac000+0x10209369C\nBreakpoint 4: where = WeChat`___lldb_unnamed_symbol108894$$WeChat + 32, address = 0x000000010213f69c\nProcess 3813 stopped\n* thread #1: tid = 0xf1ef0, 0x000000010213f69c WeChat`___lldb_unnamed_symbol108894$$WeChat + 32, queue = 'com.apple.main-thread', stop reason = breakpoint 4.1\n    frame #0: 0x000000010213f69c WeChat`___lldb_unnamed_symbol108894$$WeChat + 32\nWeChat`___lldb_unnamed_symbol108894$$WeChat:\n->  0x10213f69c <+32>: bl     0x1028d0b60               ; symbol stub for: objc_msgSend\n    0x10213f6a0 <+36>: cmp    w0, #2                    ; =2 \n    0x10213f6a4 <+40>: b.ne   0x10213f6dc               ; <+96>\n    0x10213f6a8 <+44>: adrp   x8, 5489\n```\n\n用手机拍摄小视频然后松开，触发了断点，说明我们的猜想是正确的。继续分析发现代码是从上图的右边走的，看了一下没有什么方法是跳转到发布视频的，不过仔细看一下有一个block，是系统的延时block，位置在0x102093760。然后我们跟着断点进去，在0x1028255A0跳转到x16所存的地址\n\n```OC\n(lldb) si\nProcess 3873 stopped\n* thread #1: tid = 0xf62c4, 0x00000001028d9598 WeChat`dispatch_after, queue = 'com.apple.main-thread', stop reason = instruction step into\n    frame #0: 0x00000001028d9598 WeChat`dispatch_after\nWeChat`dispatch_after:\n->  0x1028d9598 <+0>: adrp   x16, 1655\n    0x1028d959c <+4>: ldr    x16, [x16, #1056]\n    0x1028d95a0 <+8>: br     x16\n\nWeChat`dispatch_apply:\n    0x1028d95a4 <+0>: adrp   x16, 1655\n(lldb) po $x2\n<__NSStackBlock__: 0x16fd49f88>\n```\n\n发现传入的参数x2是一个block，我们再回顾一下dispatch_after函数\n\n```OC\nvoid dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block);\n```\n\n这个函数有三个参数，分别是dispatch_time_t、dispatch_queue_t、dispatch_block_t，那这里打印的x2就是要传入的block，所以我们猜测拍摄完小视频会有一个延时，然后执行刚才传入的block，所以x2中肯定有其他方法调用，下一步就是要知道这个block的位置。\n\n```OC\n(lldb) memory read --size 8 --format x 0x16fd49f88\n0x16fd49f88: 0x000000019f8fd218 0x00000000c2000000\n0x16fd49f98: 0x000000010214777c 0x0000000102fb0e60\n0x16fd49fa8: 0x000000015da32600 0x000000015ea1a430\n0x16fd49fb8: 0x000000015cf5fee0 0x000000016fd49ff0\n```\n\n0x000000010214777c就是block所在的位置，当然要减掉当前WeChat的ASLR偏移，最终在IDA中的地址为0x10209377C，突然发现这就是`btnRelease`的子程序sub_10209377C。这个子程序非常简单，只有一个方法`selRef_logicCheckState_`有可能是我们的目标。先看看这个方法是谁调用的\n\n```OC\n(lldb) br s -a 0xb4000+0x1020937BC\n......\nProcess 3873 stopped\n* thread #1: tid = 0xf62c4, 0x00000001021477bc WeChat`___lldb_unnamed_symbol108895$$WeChat + 64, queue = 'com.apple.main-thread', stop reason = breakpoint 3.1\n    frame #0: 0x00000001021477bc WeChat`___lldb_unnamed_symbol108895$$WeChat + 64\nWeChat`___lldb_unnamed_symbol108895$$WeChat:\n->  0x1021477bc <+64>: adrp   x8, 5489\n    0x1021477c0 <+68>: ldr    x1, [x8, #1552]\n    0x1021477c4 <+72>: orr    w2, wzr, #0x1\n    0x1021477c8 <+76>: ldp    x29, x30, [sp, #16]\n(lldb) po $x0\n<MainFrameSightViewController: 0x15d1f0c00>\n```\n发现还是MainFrameSightViewController这个对象调用的，那`selRef_logicCheckState_ `肯定也在这个类的头文件中，寻找一下果然发现了  \n\n```OC\n- (void)logicCheckState:(int)arg1;\n```\n\n在IDA左侧窗口中寻找[MainFrameSightViewController logicCheckState:]，发现这个方法超级复杂，逻辑太多了，不着急慢慢捋。\n在0x102094D6C位置我们发现一个switch jump，思路就很清晰了，我们只要找到小视频拍摄完成的这条线往下看就行了，LLDB来帮忙看看走的那条线。在0x102094D6C位置下个断点，这个断点在拍摄小视频的时候会多次触发，可以在拍摄之前把断点dis掉，拍摄松手之前再启用断点，打印此时的x8值  \n\n```OC\n(lldb) p/x $x8\n(unsigned long) $38 = 0x0000000102174e10\n```\n\nx8是一个指针，它指向的地址是0x102174e10，用这个地址减去当前ASLR的偏移就可以找到在IDA中的基地址，发现是0x102094E10，拍摄完成的逻辑处理这条线找到了，一直走到0x102094E24位置之后跳转0x1020951C4，这个分支的内容较少，里面有三个函数  \n\n```OC\nloc_1020951C4\nADRP            X8, #selRef_hideTips@PAGE\nLDR             X1, [X8,#selRef_hideTips@PAGEOFF]\nMOV             X0, X19\nBL              _objc_msgSend\nADRP            X8, #selRef_finishWriter@PAGE\nLDR             X1, [X8,#selRef_finishWriter@PAGEOFF]\nMOV             X0, X19\nBL              _objc_msgSend\nADRP            X8, #selRef_turnCancelBtnForFinishRecording@PAGE\nLDR             X1, [X8,#selRef_turnCancelBtnForFinishRecording@PAGEOFF]\nMOV             X0, X19\nBL              _objc_msgSend\nB               loc_102095288\n```\n\n其中`selRef_finishWriter`和`selRef_turnCancelBtnForFinishRecording`需要重点关注，这两个方法看上去都是小视频录制结束的意思，线索极有可能就在这两个函数中。通过查看调用者发现这两个方法都属于MainFrameSightViewController，继续在IDA中查看这两个方法。在`selRef_finishWriter `中靠近末尾0x102094248的位置发现一个方法名叫做`f_switchToSendingPanel`，下个断点，然后拍摄视频，发现这个方法并没有被触发。应该不是通过这个方法调用发布界面的，继续回到`selRef_finishWriter `方法中；在0x1020941DC的位置调用方法`selRef_stopRecording`，打印它的调用者发现这个方法属于`SightFacade`，继续在IDA中寻找这个方法的实现。在这个方法的0x101F9BED4位置又调用了`selRef_stopRecord`，同样打印调用者发现这个方法属于SightCaptureLogicF4，有点像剥洋葱，继续在寻找这个方法的实现。在这个方法内部0x101A98778位置又调用了`selRef_finishWriting`，同样的原理找到这个方法是属于SightMovieWriter。已经剥了3层了，继续往下：  \n在`SightMovieWriter - (void)finishWriting`中的0x10261D004位置分了两条线，这个位置下个断点，然后拍摄完小视频触发断点，打印x19的值  \n\n```OC\n(lldb) po $x19\n<OS_dispatch_queue: CAPTURE.CALLBACK[0x13610bcd0] = { xrefcnt = 0x4, refcnt = 0x4, suspend_cnt = 0x0, locked = 1, target = com.apple.root.default-qos.overcommit[0x1a0aa3700], width = 0x0, running = 0x0, barrier = 1 }>\n```\n\n所以代码不会跳转到loc_10261D054而是走的左侧，在左侧的代码中发现启用了一个block，这个block是子程序sub_10261D0AC，地址为0x10261D0AC，找到这个地址，结构如下图所示：\n![sub_10261D0AC](http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E8%A7%86%E9%A2%91%E8%BD%AC%E5%8F%91sub_10261D0AC.png)  \n可以看出来主要分两条线，我们在第一个方框的末尾也就是0x10261D108位置下个断点，等拍摄完毕触发断点之后打印x0的值为1，这里的汇编代码为  \n\n```OC\n__text:000000010261D104                 CMP             X0, #2\n__text:000000010261D108                 B.EQ            loc_10261D234\n```\n\nB.EQ是在上一步的结果为0才会跳转到loc_10261D234，但是这里的结果是不为0的，将x0的值改为2让上一步的结果为0  \n\n```OC\n(lldb) po $x0\n1\n(lldb) register write $x0 2\n(lldb) po $x0\n2\n```\n\n此时放开断点，等待跳转到小视频发布界面，结果是一直卡在这个界面没有任何反应，所以猜测实现跳转的逻辑应该在右边的那条线，继续顺着右边的线寻找：\n在右侧0x10261D3AC位置发现调用了下面的这个方法  \n\n```OC  \n- (void)finishWritingWithCompletionHandler:(void (^)(void))handler;\n```\n\n这个方法是系统提供的AVAssetWriter里面的方法，在视频写入完成之后要做的操作，这个里是要传入一个block的，因为只有一个参数所以对应的变量是x2，打印x2的值\n\n```oc\n(lldb) po $x2\n<__NSStackBlock__: 0x16e086c78>\n(lldb) memory read --size 8 --format x 0x16e086c78\n0x16e086c78: 0x00000001a0aa5218 0x00000000c2000000\n0x16e086c88: 0x00000001026d94b0 0x0000000102fc98c0\n0x16e086c98: 0x0000000136229fd0 0x000000016e086d00\n0x16e086ca8: 0x00000001997f5318 0xfffffffec9e882ff\n```\n\n并且通过栈内存找到block位置为0x10261D4B0（需要减去ASLR的偏移）\n\n```oc\nsub_10261D4B0\nvar_20= -0x20\nvar_10= -0x10\nSTP             X20, X19, [SP,#var_20]!\nSTP             X29, X30, [SP,#0x20+var_10]\nADD             X29, SP, #0x20+var_10\nMOV             X19, X0\nLDR             X0, [X19,#0x20]\nADRP            X8, #selRef_stopAmr@PAGE\nLDR             X1, [X8,#selRef_stopAmr@PAGEOFF]\nBL              _objc_msgSend\nLDR             X0, [X19,#0x20]\nADRP            X8, #selRef_compressAudio@PAGE\nLDR             X1, [X8,#selRef_compressAudio@PAGEOFF]\nLDP             X29, X30, [SP,#0x20+var_10]\nLDP             X20, X19, [SP+0x20+var_20],#0x20\nB               _objc_msgSend\n; End of function sub_10261D4B0\n```\n\n只调用了两个方法，一个是`selRef_stopAmr`停止amr（一种音频格式），另一个是`selRef_compressAudio`压缩音频，拍摄完成的下一步操作应该不会放在这两个方法里面，找了这么久也没有头绪，这个路看来走不通了，不要钻牛角尖，战略性撤退寻找其他入口。  \n**逆向的乐趣就是一直寻找真相的路上，能体会到成功的乐趣，也有可能方向错了离真相反而越来越远，不要气馁调整方向继续前进！**\n   \n###\t2.“另辟蹊径”\n>（由于微信在后台偷偷升级了，下面的内容都是微信6.3.30版本的ASLR，上面的分析基于6.3.28版本）\n\n注意到在点击朋友圈右上角的相机按钮底部会弹出一个Sheet，第一个就是Sight小视频，从这里入手，用cycript查看Sight按钮对应的事件是哪个  \n\n```oc\niPhone-5S:~ root# cycript -p \"WeChat\"\ncy# [UIApp windows].toString()\n`(\n    \"<iConsoleWindow: 0x14d6ccc00; baseClass = UIWindow; frame = (0 0; 320 568); autoresize = W+H; gestureRecognizers = <NSArray: 0x14d7df110>; layer = <UIWindowLayer: 0x14d7d6f60>>\",\n    \"<SvrErrorTipWindow: 0x14eaa5800; baseClass = UIWindow; frame = (0 0; 320 45); hidden = YES; gestureRecognizers = <NSArray: 0x14e9e8950>; layer = <UIWindowLayer: 0x14e9e6510>>\",\n    \"<UITextEffectsWindow: 0x14ec38ba0; frame = (0 0; 320 568); opaque = NO; autoresize = W+H; layer = <UIWindowLayer: 0x14ec39360>>\",\n    \"<UITextEffectsWindow: 0x14e9c67a0; frame = (0 0; 320 568); layer = <UIWindowLayer: 0x14d683ff0>>\",\n    \"<UIRemoteKeyboardWindow: 0x14f226e40; frame = (0 0; 320 568); opaque = NO; autoresize = W+H; layer = <UIWindowLayer: 0x14d6f4de0>>\",\n    \"<NewYearActionSheet: 0x14f1704a0; baseClass = UIWindow; frame = (0 0; 320 568); gestureRecognizers = <NSArray: 0x14ef9bf90>; layer = <UIWindowLayer: 0x14ef61a20>>\"\n)`\ncy# [#0x14f1704a0 recursiveDescription].toString()\n```\n\n底部的Sheet是NewYearActionSheet，然后打印NewYearActionSheet的UI树状结构图（比较长不贴了）。然后找到Sight对应的UIButton是0x14f36d470   \n\n```oc\ncy# [#0x14f36d470 allTargets]\n[NSSet setWithArray:@[#\"<NewYearActionSheet: 0x14f1704a0; baseClass = UIWindow; frame = (0 0; 320 568); gestureRecognizers = <NSArray: 0x14ef9bf90>; layer = <UIWindowLayer: 0x14ef61a20>>\"]]]\ncy# [#0x14f36d470 allControlEvents]\n64\ncy# [#0x14f36d470 actionsForTarget:#0x14f1704a0 forControlEvent:64]\n@[\"OnDefaultButtonTapped:\"]\n```\n\n通过UIControl的`actionsForTarget:forControlEvent:`方法可以找到按钮绑定的事件，Sight按钮的触发方法为`OnDefaultButtonTapped:`，回到IDA中在NewYearActionSheet中找到这个方法们继续往下分析只有这个方法`selRef_dismissWithClickedButtonIndex_animated`，通过打印它的调用者发现还是NewYearActionSheet，继续点进去找到`newYearActionSheet_clickedButtonAtIndex`方法，看样子不是NewYearActionSheet自己的，打印调用者x0发现它属于类WCTimeLineViewController。跟着断点走下去在0x1012B78CC位置调用了方法`#selRef_showSightWindowForMomentWithMask_byViewController_scene`\n通过观察发现这个方法的调用者是0x1012B78AC这个位置的返回值x0，这是一个类SightFacade，猜测这个方法在SightFacade里面，去头文件里找一下果然发现这个方法  \n\n```oc\n- (void)showSightWindowForMomentWithMask:(id)arg1 byViewController:(id)arg2 scene:(int)arg3;\n```\n\n这个方法应该就是跳转到小视频界面的方法了。下面分别打印它的参数  \n\n```oc\n(lldb) po $x2\n<UIImage: 0x14f046660>, {320, 568}\n(lldb) po $x3\n<WCTimeLineViewController: 0x14e214800>\n(lldb) po $x4\n2\n(lldb) po $x0\n<SightFacade: 0x14f124b40>\n```\n\n其中x2、x3、x4分别对应三个参数，x0是调用者，跳到这个方法内部查看怎么实现的。发现在这个方法中进行了小视频拍摄界面的初始化工作，首先初始化一个MainFrameSightViewController，再创建一个UINavigationController将MainFrameSightViewController放进去，接下来初始化一个MMWindowController调用  \n\n```oc\n- (id)initWithViewController:(id)arg1 windowLevel:(int)arg2;\n```\n\n方法将UINavigationController放了进去，完成小视频拍摄界面的所有UI创建工作。\n拍摄完成之后进入发布界面，此时用cycript找到当前的Controller是SightMomentEditViewController，由此萌生一个想法，跳过前面的拍摄界面直接进入发布界面不就可以了吗？我们自己创建一个SightMomentEditViewController然后放到UINavigationController里面，然后再将这个导航控制器放到MMWindowController里面。**（这里我已经写好tweak进行了验证，具体的tweak思路编写在后文有）**结果是的确可以弹出发布的界面，但是导航栏的NavgationBar遮住了原来的，整个界面是透明的，很难看，而且发布完成之后无法销毁整个MMWindowController，还是停留在发布界面。我们要的结果不是这个，不过确实有很大的收获，最起码可以直接调用发布界面了，小视频也能正常转发。我个人猜测，当前界面不能被销毁的原因是因为MMWindowController新建了一个window,它跟TimeLine所在的keyWindow不是同一个，SightMomentEditViewController的按钮触发的方法是没有办法销毁这个window的，所以有一个大胆的猜想，我直接在当前的WCTimeLineViewController上把SightMomentEditViewController展示出来不就可以了吗？  \n\n```oc\n[WCTimelineVC presentViewController:editSightVC animated:YES completion:^{\n}];\n```\n\n像这样展示岂不妙哉？不过通过观察SightMomentEditViewController的头文件，结合小视频发布时界面上的元素，推测创建这个控制器至少需要两个属性，一个是小视频的路径，另一个是小视频的缩略图，将这两个关键属性给了SightMomentEditViewController那么应该就可以正常展示了   \n\n```oc\nSightMomentEditViewController *editSightVC = [[%c(SightMomentEditViewController) alloc] init];\nNSString *localPath = [[self iOSREMediaItemFromSight] pathForSightData];\nUIImage *image = [[self valueForKey:@\"_sightView\"] getImage];\n[editSightVC setRealMoviePath:localPath];\n[editSightVC setMoviePath:localPath];\n[editSightVC setRealThumbImage:image];\n[editSightVC setThumbImage:image];\n[WCTimelineVC presentViewController:editSightVC animated:YES completion:^{\n}];\n```\n\n小视频的发布界面可以正常显示并且所有功能都可以正常使用，唯一的问题是返回按钮没有效果，并不能销毁SightMomentEditViewController。用cycript查看左侧按钮的actionEvent找到它的响应函数是`- (void)popSelf;`，点击左侧返回触发的是pop方法，但是这个控制器并不在navgationController里面，所以无效，我们要对这个方法进行重写  \n\n```oc\n- (void)popSelf\n{\n    [self dismissViewControllerAnimated:YES completion:^{\n\n    }];\n}\n```\n\n此时再点击返回按钮就可以正常退出了，此外，在WCContentItemViewTemplateNewSight中发现了一个方法叫做`- (void)sendSightToFriend;`，可以直接将小视频转发给好友，至此小视频转发的功能已经找到了。\n","source":"_posts/手把手教你逆向微信之朋友圈小视频转发（上）.md","raw":"title: 手把手教你逆向微信之朋友圈小视频转发（上）\ndate: 2016-11-10\ncategories:\n- 逆向工程\ntags:\n- 微信\n- 逆向工程\n- 重签名  \npermalink: 手把手教你逆向微信之朋友圈小视频转发（上）  \n\n---\n#\t前言\n此文为逆向微信二进制文件，实现朋友圈小视频转发的教程，从最开始的汇编代码入手到最后重签名安装等操作，手把手教你玩转微信！学会之后再去逆向微信其他功能易如反掌。  \n本篇文章由于篇幅太长分成了两篇，**上篇**讲解的是逆向工作，也就是怎么找到相关的函数和方法实现，**下篇**讲解的是怎么在非越狱机重签名安装和越狱机tweak安装的详细过程。  \n**正文的第二部分还提供了微信自动抢红包、修改微信步数的代码，这些都可以照葫芦画瓢按照本文的套路一步步逆向找到，这里就不再赘述。**  \n在实践之前，需要准备好一部越狱的手机，然后将下文列出的所有工具安装好。IDA跟Reveal都是破解版，IDA的正版要2000多刀，对于这么牛逼的逆向工具确实物有所值，不过不是专门研究逆向的公司也没必要用正版的，下个Windows的破解版就好，Mac上暂时没找到。Mac上可以用hopper代替IDA，也是一款很牛逼的逆向工具。废话不多说，正式开始吧！\n\n<!-- more -->\n\n#\t逆向微信朋友圈（上篇）\n## 一、获取朋友圈的小视频\n>\t注意：本文逆向的微信的二进制文件为6.3.28版本，如果是不同的微信版本，二进制文件中的基地址也不相同\n\n####\t本文涉及到的工具  \n1. [cycript](http://www.cycript.org) \n2. LLDB与debugserver（Xcode自带）\n3. OpenSSH\n4. IDA\n5. Reveal\n6. [theos](https://github.com/theos/theos)\n7. [CydiaSubstrate](http://www.cydiasubstrate.com)\n8. iOSOpenDev\n9. ideviceinstaller\n10. tcprelay（本地端口映射，USB连接SSH，不映射可通过WiFi连接） \n11. [dumpdecrypted](https://github.com/stefanesser/dumpdecrypted)\n12. [class-dump](http://stevenygard.com/projects/class-dump/) \n13. [iOS App Signer](https://github.com/DanTheMan827/ios-app-signer)\n14. 编译好的[yololib](https://github.com/gaoshilei/yololib)\n\n**逆向环境为MacOS\t+\tiPhone5S 9.1越狱机**  \n先用dumpdecrypted给微信砸壳（不会的请我写的看[这篇教程](http://www.gaoshilei.com/2016/07/17/dumpdecrypted给App砸壳/)），获得一个WeChat.decrypted文件，先把这个文件扔到IDA中分析（60MB左右的二进制文件，IDA差不多40分钟才能分析完），用class-dump导出所有头文件\n\n```\nLeonLei-MBP:~ gaoshilei$ class-dump -S -s -H /Users/gaoshilei/Desktop/reverse/binary_for_class-dump/WeChat.decrypted -o /Users/gaoshilei/Desktop/reverse/binary_for_class-dump/class-Header/WeChat\n```\n\n我滴个亲娘！一共有8000个头文件，微信果然工程量浩大！稳定一下情绪，理一理思路继续搞。要取得小视频的下载链接，找到播放视频的View，顺藤摸瓜就能找到小视频的URL。用Reveal查看小视频的播放窗口\n![Reveal](http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E8%A7%86%E9%A2%91%E8%BD%AC%E5%8F%91Reveal.png)  \n可以看出来WCContentItemViewTemplateNewSigh这个对象是小视频的播放窗口，它的subView有WCSightView，SightView、SightPlayerView，这几个类就是我们的切入点。\n保存视频到favorite的时候是长按视频弹出选项的，那么在WCContentItemViewTemplateNewSight这个类里面可能有手势相关的方法，去刚才导出的头文件中找线索。\n\n```\n- (void)onLongTouch;\n- (void)onLongPressedWCSight:(id)arg1;\n- (void)onLongPressedWCSightFullScreenWindow:(id)arg1;\n```\n\n这几个方法跟长按手势相关，再去IDA中找到这些函数，逐个查看。onLongPressedWCSight和onLongPressedWCSightFullScreenWindow都比较简单，onLongTouch比较长，而且发现了内部调用了方法Favorites_Add，因为长按视频的时候出来一个选项就是Favorites，并且我看到这个函数调用\n\n```\nADRP            X8, #selRef_sightVideoPath@PAGE\nLDR             X1, [X8,#selRef_sightVideoPath@PAGEOFF]\n```\n\n这里拿到了小视频的地址，可以推测这个函数跟收藏有关，下面打断点测试。\n\n```\n(lldb) im li -o -f\n[  0] 0x000000000003c000 /var/mobile/Containers/Bundle/Application/2F1D52EC-C57E-4F95-B715-EF04351232E8/WeChat.app/WeChat(0x000000010003c000)\n```\n\n可以看到WeChat的ASLR为0x3c000，在IDA查找到这三个函数的基地址，分别下断点\n\n```\n(lldb) br s -a 0x1020D3A10+0x3c000\nBreakpoint 1: where = WeChat`___lldb_unnamed_symbol110094$$WeChat + 28, address = 0x000000010210fa10\n(lldb) br s -a 0x1020D3370+0x3c000\nBreakpoint 2: where = WeChat`___lldb_unnamed_symbol110091$$WeChat + 8, address = 0x000000010210f370\n(lldb) br s -a 0x1020D33E4+0x3c000\nBreakpoint 3: where = WeChat`___lldb_unnamed_symbol110092$$WeChat + 12, address = 0x000000010210f3e4\n```\n\n回到微信里面长按小视频，看断点触发情况\n\n```\nProcess 3721 stopped\n* thread #1: tid = 0x658fc, 0x000000010210f370 WeChat`___lldb_unnamed_symbol110091$$WeChat + 8, queue = 'com.apple.main-thread', stop reason = breakpoint 2.1\n    frame #0: 0x000000010210f370 WeChat`___lldb_unnamed_symbol110091$$WeChat + 8\nWeChat`___lldb_unnamed_symbol110091$$WeChat:\n->  0x10210f370 <+8>:  add    x29, sp, #16              ; =16 \n    0x10210f374 <+12>: mov    x19, x0\n    0x10210f378 <+16>: adrp   x8, 4968\n    0x10210f37c <+20>: ldr    x0, [x8, #744]\n(lldb) c\nProcess 3721 resuming\nProcess 3721 stopped\n* thread #1: tid = 0x658fc, 0x000000010210fa10 WeChat`___lldb_unnamed_symbol110094$$WeChat + 28, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x000000010210fa10 WeChat`___lldb_unnamed_symbol110094$$WeChat + 28\nWeChat`___lldb_unnamed_symbol110094$$WeChat:\n->  0x10210fa10 <+28>: add    x29, sp, #96              ; =96 \n    0x10210fa14 <+32>: sub    sp, sp, #96               ; =96 \n    0x10210fa18 <+36>: mov    x19, x0\n    0x10210fa1c <+40>: adrp   x8, 4863\n……\n```\n\n发现断点2先被触发，接着触发断点1，后面断点2和1又各触发了1次，断点3一直很安静。可以排除onLongPressedWCSightFullScreenWindow与收藏小视频的联系。小视频的踪影就要在剩下的两个方法中寻找了。通过V找到C，顺藤摸瓜找到M屡试不爽！用cycript注入WeChat，拿到播放小视频的view所在的Controller。\n\n```\ncy# [#0x138c18030 nextResponder]\n#\"<WCTimeLineCellView: 0x138c34620; frame = (0 0; 319 249); tag = 1048577; layer = <CALayer: 0x138362ba0>>\"\ncy# [#0x138c34620 nextResponder]\n#\"<UITableViewCellContentView: 0x138223c70; frame = (0 0; 320 256); gestureRecognizers = <NSArray: 0x1384ec480>; layer = <CALayer: 0x138081dc0>>\"\ncy# [#0x138223c70 nextResponder]\n#\"<MMTableViewCell: 0x138c9f930; baseClass = UITableViewCell; frame = (0 307; 320 256); autoresize = W; layer = <CALayer: 0x1382dcd10>>\"\ncy# [#0x138c9f930 nextResponder]\n#\"<UITableViewWrapperView: 0x137b57800; frame = (0 0; 320 504); gestureRecognizers = <NSArray: 0x1383db660>; layer = <CALayer: 0x138af20c0>; contentOffset: {0, 0}; contentSize: {320, 504}>\"\ncy# [#0x137b57800 nextResponder]\n#\"<MMTableView: 0x137b8ae00; baseClass = UITableView; frame = (0 0; 320 568); gestureRecognizers = <NSArray: 0x138adb590>; layer = <CALayer: 0x138956890>; contentOffset: {0, 99.5}; contentSize: {320, 3193}>\"\ncy# [#0x137b8ae00 nextResponder]\n#\"<UIView: 0x138ade5c0; frame = (0 0; 320 568); autoresize = W+H; layer = <CALayer: 0x138ac9990>>\"\ncy# [#0x138ade5c0 nextResponder]\n#\"<WCTimeLineViewController: 0x1379eb000>\"\n```\n\n通过响应者链条找到\nWCContentItemViewTemplateNewSight所属的Controller为WCTimeLineViewController。在这个类的头文件中并没有发现有价值的线索，不过我们注意到小视频所在的view是属于MMTableVIewCell的（见上图Reveal分析图），这是每一个iOS最熟悉的TableView，cell的数据是通过UITableViewDataSource的代理方法`- tableView:cellForRowAtIndexPath:`赋值的，通过这个方法肯定能知道到M的影子。在IDA中找到`[WCTimeLineViewController tableView:cellForRowAtIndexPath:]`,定位到基地址0x10128B6B0位置：\n\n```\n__text:000000010128B6B0     ADRP     X8, #selRef_genNormalCell_indexPath_@PAGE\n```\n\n这里的函数是WCTimeLineViewController中生成cell的方法，除了这个方法在这个类中还有另外三个生成cell的方法：\n\n```\n- (void)genABTestTipCell:(id)arg1 indexPath:(id)arg2;\n- (void)genRedHeartCell:(id)arg1 indexPath:(id)arg2;\n- (void)genUploadFailCell:(id)arg1 indexPath:(id)arg2;\n```\n\n通过字面意思可以猜测出normal这个应该是生成小视频cell的方法。继续在IDA中寻找线索\n\n```\n__text:0000000101287CC8     ADRP     X8, #selRef_getTimelineDataItemOfIndex_@PAGE\n```\n\n在`genNormalCell:IndexPath:`方法中发现上面这个方法，可以大胆猜想这个方法是获取TimeLine（朋友圈）数据的方法，那小视频的数据肯定也是通过这个方法获取的，并且IDA可以看到这个方法中调用一个叫做`selRef_getTimelineDataItemOfIndex_`的方法，获取DataItem貌似就是cell的数据源啊！接下来用LLDB下断点验证猜想。\n通过IDA可以找到这个方法对应的基地址为：0x101287CE4，先打印正在运行WeChat的ASLR偏移\n\n```\nLeonLei-MBP:~ gaoshilei$ lldb\n(lldb) process connect connect://localhost:1234\n(lldb) im li -o -f \n[0] 0x0000000000050000 /var/mobile/Containers/Bundle/Application/2DCE8F30-9B6B-4652-901C-37EB1FF2A40D/WeChat.app/WeChat(0x0000000100050000)\n```\n\n所以我们下断点的位置是0x50000+0x101287CE4\n\n```\n(lldb) br s -a 0x50000+0x101287CE4\nBreakpoint 1: where = WeChat`___lldb_unnamed_symbol63721$$WeChat + 252, address = 0x00000001012d7ce4\n```\n\n打印x0的值\n\n```\n(lldb) po $x0\nClass name: WCDataItem, addr: 0x15f5f03b0\ntid: 12393001887435993280\nusername: wxid_z8twcz4o18fg12\ncreatetime: 1477360950\ncommentUsers: (\n)\ncontentObj: <WCContentItem: 0x15f57d000>\n\n```\n\n得到一个WCDataItem的对象，这里x0的值就是`selRef_getTimelineDataItemOfIndex_`执行完的返回值，然后把x0的值改掉\n\n```\n(lldb) register write $x0 0\n(lldb) c\n```\n\n此时会发现我们要刷新的那条小视频内容全部为空  \n![小视频内容为空](http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E8%A7%86%E9%A2%91-%E8%BD%AC%E5%8F%91%E5%B0%8F%E8%A7%86%E9%A2%91%E4%B8%BA%E7%A9%BA.jpg)  \n到这里已经找到了小视频的源数据获取方法，问题是我们怎么拿到这个WCDataItem呢？继续看IDA分析函数的调用情况：  \n>\tWCTimeLineViewController - (void)genNormalCell:(id) indexPath:(id)  \n\n\n```\n__text:0000000101287BCC                 STP             X28, X27, [SP,#var_60]!\n__text:0000000101287BD0                 STP             X26, X25, [SP,#0x60+var_50]\n__text:0000000101287BD4                 STP             X24, X23, [SP,#0x60+var_40]\n__text:0000000101287BD8                 STP             X22, X21, [SP,#0x60+var_30]\n__text:0000000101287BDC                 STP             X20, X19, [SP,#0x60+var_20]\n__text:0000000101287BE0                 STP             X29, X30, [SP,#0x60+var_10]\n__text:0000000101287BE4                 ADD             X29, SP, #0x60+var_10\n__text:0000000101287BE8                 SUB             SP, SP, #0x80\n__text:0000000101287BEC                 MOV             X19, X3\n__text:0000000101287BF0                 MOV             X22, X0\n__text:0000000101287BF4                 MOV             W25, #0x100000\n__text:0000000101287BF8                 MOVK            W25, #1\n__text:0000000101287BFC                 MOV             X0, X2\n__text:0000000101287C00                 BL              _objc_retain\n__text:0000000101287C04                 MOV             X28, X0\n__text:0000000101287C08                 MOV             X0, X19\n__text:0000000101287C0C                 BL              _objc_retain\n__text:0000000101287C10                 MOV             X20, X0\n__text:0000000101287C14                 STR             X20, [SP,#0xE0+var_98]\n__text:0000000101287C18                 ADRP            X8, #selRef_row@PAGE\n__text:0000000101287C1C                 LDR             X1, [X8,#selRef_row@PAGEOFF]\n__text:0000000101287C20                 BL              _objc_msgSend\n__text:0000000101287C24                 MOV             X26, X0\n__text:0000000101287C28                 ADRP            X8, #selRef_section@PAGE\n__text:0000000101287C2C                 LDR             X19, [X8,#selRef_section@PAGEOFF]\n__text:0000000101287C30                 MOV             X0, X20\n__text:0000000101287C34                 MOV             X1, X19\n__text:0000000101287C38                 BL              _objc_msgSend\n__text:0000000101287C3C                 STR             X0, [SP,#0xE0+var_A8]\n__text:0000000101287C40                 MOV             X0, X20\n__text:0000000101287C44                 MOV             X1, X19\n__text:0000000101287C48                 BL              _objc_msgSend\n__text:0000000101287C4C                 MOV             X2, X0\n__text:0000000101287C50                 ADRP            X8, #selRef_calcDataItemIndex_@PAGE\n__text:0000000101287C54                 LDR             X1, [X8,#selRef_calcDataItemIndex_@PAGEOFF]\n__text:0000000101287C58                 MOV             X0, X22\n__text:0000000101287C5C                 BL              _objc_msgSend\n__text:0000000101287C60                 MOV             X21, X0\n__text:0000000101287C64                 STR             X21, [SP,#0xE0+var_C0]\n__text:0000000101287C68                 ADRP            X8, #classRef_MMServiceCenter@PAGE\n__text:0000000101287C6C                 LDR             X0, [X8,#classRef_MMServiceCenter@PAGEOFF]\n__text:0000000101287C70                 ADRP            X8, #selRef_defaultCenter@PAGE\n__text:0000000101287C74                 LDR             X1, [X8,#selRef_defaultCenter@PAGEOFF]\n__text:0000000101287C78                 STR             X1, [SP,#0xE0+var_B8]\n__text:0000000101287C7C                 BL              _objc_msgSend\n__text:0000000101287C80                 MOV             X29, X29\n__text:0000000101287C84                 BL              _objc_retainAutoreleasedReturnValue\n__text:0000000101287C88                 MOV             X19, X0\n__text:0000000101287C8C                 ADRP            X8, #classRef_WCFacade@PAGE\n__text:0000000101287C90                 LDR             X0, [X8,#classRef_WCFacade@PAGEOFF]\n__text:0000000101287C94                 ADRP            X8, #selRef_class@PAGE\n__text:0000000101287C98                 LDR             X1, [X8,#selRef_class@PAGEOFF]\n__text:0000000101287C9C                 STR             X1, [SP,#0xE0+var_B0]\n__text:0000000101287CA0                 BL              _objc_msgSend\n__text:0000000101287CA4                 MOV             X2, X0\n__text:0000000101287CA8                 ADRP            X8, #selRef_getService_@PAGE\n__text:0000000101287CAC                 LDR             X1, [X8,#selRef_getService_@PAGEOFF]\n__text:0000000101287CB0                 STR             X1, [SP,#0xE0+var_A0]\n__text:0000000101287CB4                 MOV             X0, X19\n__text:0000000101287CB8                 BL              _objc_msgSend\n__text:0000000101287CBC                 MOV             X29, X29\n__text:0000000101287CC0                 BL              _objc_retainAutoreleasedReturnValue\n__text:0000000101287CC4                 MOV             X20, X0\n__text:0000000101287CC8                 ADRP            X8, #selRef_getTimelineDataItemOfIndex_@PAGE\n__text:0000000101287CCC                 LDR             X1, [X8,#selRef_getTimelineDataItemOfIndex_@PAGEOFF]\n__text:0000000101287CD0                 STR             X1, [SP,#0xE0+var_C8]\n__text:0000000101287CD4                 MOV             X2, X21\n__text:0000000101287CD8                 BL              _objc_msgSend\n__text:0000000101287CDC                 MOV             X29, X29\n__text:0000000101287CE0                 BL              _objc_retainAutoreleasedReturnValue\n__text:0000000101287CE4                 MOV             X21, X0\n__text:0000000101287CE8                 MOV             X0, X20\n......\n```\n\n`selRef_getTimelineDataItemOfIndex_ `传入的参数是x2，可以看到传值给x2的x21是函数`selRef_calcDataItemIndex_ `的返回值，是一个unsigned long数据类型。继续分析，`selRef_getTimelineDataItemOfIndex_ `函数的调用者是上一步`selRef_getService_ `的返回值，经过断点分析发现是一个`WCFacade`对象。整理一下`selRef_getTimelineDataItemOfIndex_ `的调用：  \n**调用者是`selRef_getService_ `的返回值；参数是`selRef_calcDataItemIndex_ `的返回值**  \n下面把目光转向那两个函数，用相同的原理分析它们各自怎么实现调用  \n1.\t先看`selRef_getService_`：  \n在0x101287CB4这个位置可以发现，这个函数的调用者是从通过x19 MOV的，打印x19发现是一个`MMServiceCenter`对象，往上找x19是在0x101287C88这个位置赋值的，结果很清晰x19是`[MMServiceCenter defaultCenter]`的返回值。   \n在0x101287CA4位置可以找到传入的参数x2，往上分析可以看出来它的参数是`[WCFacade class]`的返回值。  \n2.\t接着找`selRef_calcDataItemIndex_ `：  \n在0x101287C58的位置找到它的调用者x0，x0通过x22赋值，继续向上寻找，发现在最上面0x101287BF0的位置，x22是x0赋值的，一开始的x0就是`WCTimeLineViewController`自身。  \n在0x101287C4C位置发现传入的参数来自x2,x2是通过上一步`selRef_section`函数的返回值x0赋值的，在0x101287C30位置可以发现`selRef_section`函数的调用者是x20赋值的，如下图所示，最终找到`selRef_section`的调用者是x3  \n![selRef_section函数的调用者](http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E8%A7%86%E9%A2%91%E8%BD%AC%E5%8F%91-selRef_section%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E8%80%85.png)  \nx3就是函数` WCTimeLineViewController - (void)genNormalCell:(id) indexPath:(id)`的第二个参数indexPath,，所以`selRef_calcDataItemIndex_ `的参数是`[IndexPath section]`。  \n对上面的分析结果做个梳理：  \n因此`getTimelineDataItemOfIndex:`的调用者可以通过\n\n```\n[[MMServiceCenter defaultCenter] getService:[WCFacade class]]\n```\n\n来获得,它的参数可以通过下面的函数获取\n\n```OC\n[WCTimeLineViewController calcDataItemIndex:[indexPath section]]\n```\n\n总感觉还少点什么？indexPath我们还没拿到呢！下一步就是拿到indexPath,这个就比较简单了，因为我们位于`[WCContentItemViewTemplateNewSight onLongTouch]`中，所以可以通过`[self nextResponder]`依次拿到MMTableViewCell、MMTableView和WCTimeLineViewController，再通过`[MMTableView indexPathForCell:MMTableViewCell]`拿到indexPath。  \n做完这些，已经拿到WCDataItem对象，接下来的重点要放在WCDataItem上，最终要获取我们要的小视频。到这个类的头文件中找线索，因为视频是下载完成后才能播放的，所以这里应该拿到了视频的路径，所以要注意url和path相关的属性或方法，然后找到下面这几个嫌疑对象\n\n```\n@property(retain, nonatomic) NSString *sourceUrl2; \n@property(retain, nonatomic) NSString *sourceUrl; \n- (id)descriptionForKeyPaths;\n- (id)keyPaths;\n```\n\n回到LLDB中，用断点打印这些值，看看有什么。\n\n```\n(lldb) po [$x0 keyPaths]\n<__NSArrayI 0x15f74e9d0>(\n\ttid,\n\tusername,\n\tcreatetime,\n\tcommentUsers,\n\tcontentObj\n)\n(lldb) po [$x0 descriptionForKeyPaths]\nClass name: WCDataItem, addr: 0x15f5f03b0\ntid: 12393001887435993280\nusername: wxid_z8twcz4o18fg12\ncreatetime: 1477360950\ncommentUsers: (\n)\ncontentObj: <WCContentItem: 0x15f57d000>\n(lldb) po [$x0 sourceUrl]\n nil\n(lldb) po [$x0 sourceUrl2]\n nil\n```\n\n并没有什么有价值的线索，不过注意到WCDataItem里面有一个WCContentItem，看来只能从这儿入手了，去看一下头文件吧！\n\n```\n@property(retain, nonatomic) NSString *linkUrl; \n@property(retain, nonatomic) NSString *linkUrl2; \n@property(retain, nonatomic) NSMutableArray *mediaList;\n```\n\n在LLDB打印出来\n\n```\n(lldb) po [[$x0 valueForKey:@\"contentObj\"] linkUrl]\nhttps://support.weixin.qq.com/cgi-bin/mmsupport-bin/readtemplate?t=page/common_page__upgrade&v=1\n(lldb) po [[$x0 valueForKey:@\"contentObj\"] linkUrl2]\n nil\n(lldb) po [[$x0 valueForKey:@\"contentObj\"] mediaList]\n<__NSArrayM 0x15f985e10>(\n<WCMediaItem: 0x15dfebdf0>\n)\n```\n\nmediaList数组里面有一个WCMediaItem对象，Media一般用来表示视频和音频，大胆猜测就是它了！赶紧找到头文件搜索一遍。\n\n```\n@property(retain, nonatomic) WCUrl *dataUrl;\n- (id)pathForData;\n- (id)pathForSightData;\n- (id)pathForTempAttachVideoData;\n- (id)videoStreamForData;\n```\n上面这些属性和方法中`pathForSightData`是最有可能拿到小视频路径的，继续验证\n\n```OC\n(lldb) po [[[[$x0 valueForKey:@\"contentObj\"] mediaList] lastObject] dataUrl]\ntype[1], url[http://vweixinf.tc.qq.com/102/20202/snsvideodownload?filekey=30270201010420301e020166040253480410d14adcddf086f4e131d11a5b1cca1bdf0203039fa00400&bizid=1023&hy=SH&fileparam=302c0201010425302302040fde55e20204580ebd3602024eea02031e8d7d02030f42400204d970370a0201000400], enckey[0], encIdx[-1], token[]\n(lldb) po [[[[$x0 valueForKey:@\"contentObj\"] mediaList] lastObject] pathForData]\n/var/mobile/Containers/Data/Application/7C3A6322-1F57-49A0-ACDE-6EF0ED74D137/Library/WechatPrivate/6f696a1b596ce2499419d844f90418aa/wc/media/5/53/8fb0cdd77208de5b56169fb3458b45\n(lldb) po [[[[$x0 valueForKey:@\"contentObj\"] mediaList] lastObject] pathForSightData]\n/var/mobile/Containers/Data/Application/7C3A6322-1F57-49A0-ACDE-6EF0ED74D137/Library/WechatPrivate/6f696a1b596ce2499419d844f90418aa/wc/media/5/53/8fb0cdd77208de5b56169fb3458b45.mp4\n(lldb) po [[[[$x0 valueForKey:@\"contentObj\"] mediaList] lastObject] pathForAttachVideoData]\n nil\n(lldb) po [[[[$x0 valueForKey:@\"contentObj\"] mediaList] lastObject] videoStreamForData]\n nil\n```\n\n拿到小视频的网络url和本地路径了！这里可以用iFunBox或者scp从沙盒拷贝这个文件看看是不是这个cell应该播放的小视频。\n\n```OC\nLeonLei-MBP:~ gaoshilei$ scp root@192.168.0.115:/var/mobile/Containers/Data/Application/7C3A6322-1F57-49A0-ACDE-6EF0ED74D137/Library/WechatPrivate/6f696a1b596ce2499419d844f90418aa/wc/media/5/53/8fb0cdd77208de5b56169fb3458b45.mp4 Desktop/\n8fb0cdd77208de5b56169fb3458b45.mp4                100%  232KB 231.9KB/s   00:00    \n```\n\n用QuickTime打开发现果然是我们要寻找的小视频。再验证一下url是否正确，把上面打印的dataUrl在浏览器中打开，发现也是这个小视频。分析这个类可以得出下面的结论：  \n\n- **dataUrl：**小视频的网络url\n- **pathForData：**小视频的本地路径\n- **pathForSightData：**小视频的本地路径（不带后缀）\n\n至此小视频的路径和取得方式分析已经完成，要实现转发还要继续分析微信的朋友圈发布。\n\n##\t 二、实现转发功能\n###\t1.“走进死胡同”\n>\t这节是我在找小视频转发功能时走的弯路，扒到最后并没有找到实现方法，不过也提供了一些逆向中常用的思路和方法，不想看的可以跳到第二节。  \n\n####\t（1）找到小视频拍摄完成调用的方法名称\n打开小视频的拍摄界面，用cycript注入，我们要找到发布小视频的方法是哪个，然后查看当前的窗口有哪些window（因为小视频的拍摄并不是在UIApplication的keyWindow中进行的）\n\n```OC\ncy# [UIApp windows].toString()\n(\n    \"<iConsoleWindow: 0x125f75e20; baseClass = UIWindow; frame = (0 0; 320 568); autoresize = W+H; gestureRecognizers = <NSArray: 0x125f77b70>; layer = <UIWindowLayer: 0x125df4810>>\",\n    \"<SvrErrorTipWindow: 0x127414d40; baseClass = UIWindow; frame = (0 64; 320 45); hidden = YES; gestureRecognizers = <NSArray: 0x12740d930>; layer = <UIWindowLayer: 0x1274030b0>>\",\n    \"<MMUIWindow: 0x127796440; baseClass = UIWindow; frame = (0 0; 320 568); gestureRecognizers = <NSArray: 0x1278083c0>; layer = <UIWindowLayer: 0x127796750>>\",\n    \"<UITextEffectsWindow: 0x1270e0d40; frame = (0 0; 320 568); opaque = NO; autoresize = W+H; layer = <UIWindowLayer: 0x1270b4ba0>>\",\n    \"<NewYearActionSheet: 0x127797e10; baseClass = UIWindow; frame = (0 0; 320 568); hidden = YES; userInteractionEnabled = NO; layer = <UIWindowLayer: 0x1277d5490>>\"\n)\n```\n\n发现当前页面一共有5个window，其中MMUIWindow是小视频拍摄所在的window，打印它的UI树状结构\n\n```OC\ncy# [#0x127796440 recursiveDescription]\n```\n\n打印结果比较长，不贴了。找到这个按钮是拍摄小视频的按钮\n\n```OC\n   |    |    |    |    |    | <UIButton: 0x1277a9d70; frame = (89.5 368.827; 141 141); opaque = NO; gestureRecognizers = <NSArray: 0x1277aaeb0>; layer = <CALayer: 0x1277a9600>>\n   |    |    |    |    |    |    | <UIView: 0x1277aa0a0; frame = (0 0; 141 141); userInteractionEnabled = NO; tag = 252707333; layer = <CALayer: 0x1277aa210>>\n   |    |    |    |    |    |    |    | <UIImageView: 0x1277aa2e0; frame = (0 0; 141 141); opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x1277aa490>>\n```\n\n然后执行\n\n```OC\ncy# [#0x1277a9d70 setHidden:YES]\n```\n\n发现拍摄的按钮消失了，验证了我的猜想。寻找按钮的响应事件，可以通过target来寻找\n\n```OC\ncy# [#0x1277a9d70 allTargets]\n[NSSet setWithArray:@[#\"<MainFrameSightViewController: 0x1269a4600>\"]]]\ncy# [#0x1277a9d70 allControlEvents]\n193\ncy# [#0x1277a9d70 actionsForTarget:#0x1269a4600 forControlEvent:193]\nnull\n```\n\n发现按钮并没有对应的action，这就奇怪了！UIButton必须要有target和action，不然这个Button不能响应事件。我们试试其他的ControlEvent\n\n```OC\ncy# [#0x1277a9d70 actionsForTarget:#0x1269a4600 forControlEvent:UIControlEventTouchDown]\n@[\"btnPress\"]\ncy# [#0x1277a9d70 actionsForTarget:#0x1269a4600 forControlEvent:UIControlEventTouchUpOutside]\n@[\"btnRelease\"]\ncy# [#0x1277a9d70 actionsForTarget:#0x1269a4600 forControlEvent:UIControlEventTouchUpInside]\n@[\"btnRelease\"]\n```\n\n结果发现这三个ContrlEvent有对应的action，我们再看看这三个枚举的值\n\n```OC\ntypedef enum UIControlEvents : NSUInteger {\n    UIControlEventTouchDown = 1 <<  0,\n    UIControlEventTouchDownRepeat = 1 <<  1,\n    UIControlEventTouchDragInside = 1 <<  2,\n    UIControlEventTouchDragOutside = 1 <<  3,\n    UIControlEventTouchDragEnter = 1 <<  4,\n    UIControlEventTouchDragExit = 1 <<  5,\n    UIControlEventTouchUpInside = 1 <<  6,\n    UIControlEventTouchUpOutside = 1 <<  7,\n    UIControlEventTouchCancel = 1 <<  8,\n\t......\n} UIControlEvents;\n```\n\n可以看出来UIControlEventTouchDown对应1，UIControlEventTouchUpInside对应128，UIControlEventTouchUpOutside对应64，三者相加正好193！原来调用`[#0x1277a9d70 allControlEvents]`的时候返回的应该是枚举，有多个枚举则把它们的值相加，是不是略坑？我也是这样觉得的！刚才我们把三种ControlEvent对应的action都打印出来了，继续LLDB+IDA进行动态分析。\n####\t（2）找到小视频拍摄完成跳转到发布界面的方法  \n因为要找到小视频发布的方法，所以对应的`btnPress`函数我们并不关心，把重点放在`btnRelease`上面，拍摄按钮松开后就会调用的方法。在IDA中找到这个方法\n![MainFrameSightViewController - (void)btnRelease](http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E8%A7%86%E9%A2%91%E8%BD%AC%E5%8F%91-btnRelease.png)  \n找到之后下个断点\n\n```OC\n(lldb) br s -a 0xac000+0x10209369C\nBreakpoint 4: where = WeChat`___lldb_unnamed_symbol108894$$WeChat + 32, address = 0x000000010213f69c\nProcess 3813 stopped\n* thread #1: tid = 0xf1ef0, 0x000000010213f69c WeChat`___lldb_unnamed_symbol108894$$WeChat + 32, queue = 'com.apple.main-thread', stop reason = breakpoint 4.1\n    frame #0: 0x000000010213f69c WeChat`___lldb_unnamed_symbol108894$$WeChat + 32\nWeChat`___lldb_unnamed_symbol108894$$WeChat:\n->  0x10213f69c <+32>: bl     0x1028d0b60               ; symbol stub for: objc_msgSend\n    0x10213f6a0 <+36>: cmp    w0, #2                    ; =2 \n    0x10213f6a4 <+40>: b.ne   0x10213f6dc               ; <+96>\n    0x10213f6a8 <+44>: adrp   x8, 5489\n```\n\n用手机拍摄小视频然后松开，触发了断点，说明我们的猜想是正确的。继续分析发现代码是从上图的右边走的，看了一下没有什么方法是跳转到发布视频的，不过仔细看一下有一个block，是系统的延时block，位置在0x102093760。然后我们跟着断点进去，在0x1028255A0跳转到x16所存的地址\n\n```OC\n(lldb) si\nProcess 3873 stopped\n* thread #1: tid = 0xf62c4, 0x00000001028d9598 WeChat`dispatch_after, queue = 'com.apple.main-thread', stop reason = instruction step into\n    frame #0: 0x00000001028d9598 WeChat`dispatch_after\nWeChat`dispatch_after:\n->  0x1028d9598 <+0>: adrp   x16, 1655\n    0x1028d959c <+4>: ldr    x16, [x16, #1056]\n    0x1028d95a0 <+8>: br     x16\n\nWeChat`dispatch_apply:\n    0x1028d95a4 <+0>: adrp   x16, 1655\n(lldb) po $x2\n<__NSStackBlock__: 0x16fd49f88>\n```\n\n发现传入的参数x2是一个block，我们再回顾一下dispatch_after函数\n\n```OC\nvoid dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block);\n```\n\n这个函数有三个参数，分别是dispatch_time_t、dispatch_queue_t、dispatch_block_t，那这里打印的x2就是要传入的block，所以我们猜测拍摄完小视频会有一个延时，然后执行刚才传入的block，所以x2中肯定有其他方法调用，下一步就是要知道这个block的位置。\n\n```OC\n(lldb) memory read --size 8 --format x 0x16fd49f88\n0x16fd49f88: 0x000000019f8fd218 0x00000000c2000000\n0x16fd49f98: 0x000000010214777c 0x0000000102fb0e60\n0x16fd49fa8: 0x000000015da32600 0x000000015ea1a430\n0x16fd49fb8: 0x000000015cf5fee0 0x000000016fd49ff0\n```\n\n0x000000010214777c就是block所在的位置，当然要减掉当前WeChat的ASLR偏移，最终在IDA中的地址为0x10209377C，突然发现这就是`btnRelease`的子程序sub_10209377C。这个子程序非常简单，只有一个方法`selRef_logicCheckState_`有可能是我们的目标。先看看这个方法是谁调用的\n\n```OC\n(lldb) br s -a 0xb4000+0x1020937BC\n......\nProcess 3873 stopped\n* thread #1: tid = 0xf62c4, 0x00000001021477bc WeChat`___lldb_unnamed_symbol108895$$WeChat + 64, queue = 'com.apple.main-thread', stop reason = breakpoint 3.1\n    frame #0: 0x00000001021477bc WeChat`___lldb_unnamed_symbol108895$$WeChat + 64\nWeChat`___lldb_unnamed_symbol108895$$WeChat:\n->  0x1021477bc <+64>: adrp   x8, 5489\n    0x1021477c0 <+68>: ldr    x1, [x8, #1552]\n    0x1021477c4 <+72>: orr    w2, wzr, #0x1\n    0x1021477c8 <+76>: ldp    x29, x30, [sp, #16]\n(lldb) po $x0\n<MainFrameSightViewController: 0x15d1f0c00>\n```\n发现还是MainFrameSightViewController这个对象调用的，那`selRef_logicCheckState_ `肯定也在这个类的头文件中，寻找一下果然发现了  \n\n```OC\n- (void)logicCheckState:(int)arg1;\n```\n\n在IDA左侧窗口中寻找[MainFrameSightViewController logicCheckState:]，发现这个方法超级复杂，逻辑太多了，不着急慢慢捋。\n在0x102094D6C位置我们发现一个switch jump，思路就很清晰了，我们只要找到小视频拍摄完成的这条线往下看就行了，LLDB来帮忙看看走的那条线。在0x102094D6C位置下个断点，这个断点在拍摄小视频的时候会多次触发，可以在拍摄之前把断点dis掉，拍摄松手之前再启用断点，打印此时的x8值  \n\n```OC\n(lldb) p/x $x8\n(unsigned long) $38 = 0x0000000102174e10\n```\n\nx8是一个指针，它指向的地址是0x102174e10，用这个地址减去当前ASLR的偏移就可以找到在IDA中的基地址，发现是0x102094E10，拍摄完成的逻辑处理这条线找到了，一直走到0x102094E24位置之后跳转0x1020951C4，这个分支的内容较少，里面有三个函数  \n\n```OC\nloc_1020951C4\nADRP            X8, #selRef_hideTips@PAGE\nLDR             X1, [X8,#selRef_hideTips@PAGEOFF]\nMOV             X0, X19\nBL              _objc_msgSend\nADRP            X8, #selRef_finishWriter@PAGE\nLDR             X1, [X8,#selRef_finishWriter@PAGEOFF]\nMOV             X0, X19\nBL              _objc_msgSend\nADRP            X8, #selRef_turnCancelBtnForFinishRecording@PAGE\nLDR             X1, [X8,#selRef_turnCancelBtnForFinishRecording@PAGEOFF]\nMOV             X0, X19\nBL              _objc_msgSend\nB               loc_102095288\n```\n\n其中`selRef_finishWriter`和`selRef_turnCancelBtnForFinishRecording`需要重点关注，这两个方法看上去都是小视频录制结束的意思，线索极有可能就在这两个函数中。通过查看调用者发现这两个方法都属于MainFrameSightViewController，继续在IDA中查看这两个方法。在`selRef_finishWriter `中靠近末尾0x102094248的位置发现一个方法名叫做`f_switchToSendingPanel`，下个断点，然后拍摄视频，发现这个方法并没有被触发。应该不是通过这个方法调用发布界面的，继续回到`selRef_finishWriter `方法中；在0x1020941DC的位置调用方法`selRef_stopRecording`，打印它的调用者发现这个方法属于`SightFacade`，继续在IDA中寻找这个方法的实现。在这个方法的0x101F9BED4位置又调用了`selRef_stopRecord`，同样打印调用者发现这个方法属于SightCaptureLogicF4，有点像剥洋葱，继续在寻找这个方法的实现。在这个方法内部0x101A98778位置又调用了`selRef_finishWriting`，同样的原理找到这个方法是属于SightMovieWriter。已经剥了3层了，继续往下：  \n在`SightMovieWriter - (void)finishWriting`中的0x10261D004位置分了两条线，这个位置下个断点，然后拍摄完小视频触发断点，打印x19的值  \n\n```OC\n(lldb) po $x19\n<OS_dispatch_queue: CAPTURE.CALLBACK[0x13610bcd0] = { xrefcnt = 0x4, refcnt = 0x4, suspend_cnt = 0x0, locked = 1, target = com.apple.root.default-qos.overcommit[0x1a0aa3700], width = 0x0, running = 0x0, barrier = 1 }>\n```\n\n所以代码不会跳转到loc_10261D054而是走的左侧，在左侧的代码中发现启用了一个block，这个block是子程序sub_10261D0AC，地址为0x10261D0AC，找到这个地址，结构如下图所示：\n![sub_10261D0AC](http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E8%A7%86%E9%A2%91%E8%BD%AC%E5%8F%91sub_10261D0AC.png)  \n可以看出来主要分两条线，我们在第一个方框的末尾也就是0x10261D108位置下个断点，等拍摄完毕触发断点之后打印x0的值为1，这里的汇编代码为  \n\n```OC\n__text:000000010261D104                 CMP             X0, #2\n__text:000000010261D108                 B.EQ            loc_10261D234\n```\n\nB.EQ是在上一步的结果为0才会跳转到loc_10261D234，但是这里的结果是不为0的，将x0的值改为2让上一步的结果为0  \n\n```OC\n(lldb) po $x0\n1\n(lldb) register write $x0 2\n(lldb) po $x0\n2\n```\n\n此时放开断点，等待跳转到小视频发布界面，结果是一直卡在这个界面没有任何反应，所以猜测实现跳转的逻辑应该在右边的那条线，继续顺着右边的线寻找：\n在右侧0x10261D3AC位置发现调用了下面的这个方法  \n\n```OC  \n- (void)finishWritingWithCompletionHandler:(void (^)(void))handler;\n```\n\n这个方法是系统提供的AVAssetWriter里面的方法，在视频写入完成之后要做的操作，这个里是要传入一个block的，因为只有一个参数所以对应的变量是x2，打印x2的值\n\n```oc\n(lldb) po $x2\n<__NSStackBlock__: 0x16e086c78>\n(lldb) memory read --size 8 --format x 0x16e086c78\n0x16e086c78: 0x00000001a0aa5218 0x00000000c2000000\n0x16e086c88: 0x00000001026d94b0 0x0000000102fc98c0\n0x16e086c98: 0x0000000136229fd0 0x000000016e086d00\n0x16e086ca8: 0x00000001997f5318 0xfffffffec9e882ff\n```\n\n并且通过栈内存找到block位置为0x10261D4B0（需要减去ASLR的偏移）\n\n```oc\nsub_10261D4B0\nvar_20= -0x20\nvar_10= -0x10\nSTP             X20, X19, [SP,#var_20]!\nSTP             X29, X30, [SP,#0x20+var_10]\nADD             X29, SP, #0x20+var_10\nMOV             X19, X0\nLDR             X0, [X19,#0x20]\nADRP            X8, #selRef_stopAmr@PAGE\nLDR             X1, [X8,#selRef_stopAmr@PAGEOFF]\nBL              _objc_msgSend\nLDR             X0, [X19,#0x20]\nADRP            X8, #selRef_compressAudio@PAGE\nLDR             X1, [X8,#selRef_compressAudio@PAGEOFF]\nLDP             X29, X30, [SP,#0x20+var_10]\nLDP             X20, X19, [SP+0x20+var_20],#0x20\nB               _objc_msgSend\n; End of function sub_10261D4B0\n```\n\n只调用了两个方法，一个是`selRef_stopAmr`停止amr（一种音频格式），另一个是`selRef_compressAudio`压缩音频，拍摄完成的下一步操作应该不会放在这两个方法里面，找了这么久也没有头绪，这个路看来走不通了，不要钻牛角尖，战略性撤退寻找其他入口。  \n**逆向的乐趣就是一直寻找真相的路上，能体会到成功的乐趣，也有可能方向错了离真相反而越来越远，不要气馁调整方向继续前进！**\n   \n###\t2.“另辟蹊径”\n>（由于微信在后台偷偷升级了，下面的内容都是微信6.3.30版本的ASLR，上面的分析基于6.3.28版本）\n\n注意到在点击朋友圈右上角的相机按钮底部会弹出一个Sheet，第一个就是Sight小视频，从这里入手，用cycript查看Sight按钮对应的事件是哪个  \n\n```oc\niPhone-5S:~ root# cycript -p \"WeChat\"\ncy# [UIApp windows].toString()\n`(\n    \"<iConsoleWindow: 0x14d6ccc00; baseClass = UIWindow; frame = (0 0; 320 568); autoresize = W+H; gestureRecognizers = <NSArray: 0x14d7df110>; layer = <UIWindowLayer: 0x14d7d6f60>>\",\n    \"<SvrErrorTipWindow: 0x14eaa5800; baseClass = UIWindow; frame = (0 0; 320 45); hidden = YES; gestureRecognizers = <NSArray: 0x14e9e8950>; layer = <UIWindowLayer: 0x14e9e6510>>\",\n    \"<UITextEffectsWindow: 0x14ec38ba0; frame = (0 0; 320 568); opaque = NO; autoresize = W+H; layer = <UIWindowLayer: 0x14ec39360>>\",\n    \"<UITextEffectsWindow: 0x14e9c67a0; frame = (0 0; 320 568); layer = <UIWindowLayer: 0x14d683ff0>>\",\n    \"<UIRemoteKeyboardWindow: 0x14f226e40; frame = (0 0; 320 568); opaque = NO; autoresize = W+H; layer = <UIWindowLayer: 0x14d6f4de0>>\",\n    \"<NewYearActionSheet: 0x14f1704a0; baseClass = UIWindow; frame = (0 0; 320 568); gestureRecognizers = <NSArray: 0x14ef9bf90>; layer = <UIWindowLayer: 0x14ef61a20>>\"\n)`\ncy# [#0x14f1704a0 recursiveDescription].toString()\n```\n\n底部的Sheet是NewYearActionSheet，然后打印NewYearActionSheet的UI树状结构图（比较长不贴了）。然后找到Sight对应的UIButton是0x14f36d470   \n\n```oc\ncy# [#0x14f36d470 allTargets]\n[NSSet setWithArray:@[#\"<NewYearActionSheet: 0x14f1704a0; baseClass = UIWindow; frame = (0 0; 320 568); gestureRecognizers = <NSArray: 0x14ef9bf90>; layer = <UIWindowLayer: 0x14ef61a20>>\"]]]\ncy# [#0x14f36d470 allControlEvents]\n64\ncy# [#0x14f36d470 actionsForTarget:#0x14f1704a0 forControlEvent:64]\n@[\"OnDefaultButtonTapped:\"]\n```\n\n通过UIControl的`actionsForTarget:forControlEvent:`方法可以找到按钮绑定的事件，Sight按钮的触发方法为`OnDefaultButtonTapped:`，回到IDA中在NewYearActionSheet中找到这个方法们继续往下分析只有这个方法`selRef_dismissWithClickedButtonIndex_animated`，通过打印它的调用者发现还是NewYearActionSheet，继续点进去找到`newYearActionSheet_clickedButtonAtIndex`方法，看样子不是NewYearActionSheet自己的，打印调用者x0发现它属于类WCTimeLineViewController。跟着断点走下去在0x1012B78CC位置调用了方法`#selRef_showSightWindowForMomentWithMask_byViewController_scene`\n通过观察发现这个方法的调用者是0x1012B78AC这个位置的返回值x0，这是一个类SightFacade，猜测这个方法在SightFacade里面，去头文件里找一下果然发现这个方法  \n\n```oc\n- (void)showSightWindowForMomentWithMask:(id)arg1 byViewController:(id)arg2 scene:(int)arg3;\n```\n\n这个方法应该就是跳转到小视频界面的方法了。下面分别打印它的参数  \n\n```oc\n(lldb) po $x2\n<UIImage: 0x14f046660>, {320, 568}\n(lldb) po $x3\n<WCTimeLineViewController: 0x14e214800>\n(lldb) po $x4\n2\n(lldb) po $x0\n<SightFacade: 0x14f124b40>\n```\n\n其中x2、x3、x4分别对应三个参数，x0是调用者，跳到这个方法内部查看怎么实现的。发现在这个方法中进行了小视频拍摄界面的初始化工作，首先初始化一个MainFrameSightViewController，再创建一个UINavigationController将MainFrameSightViewController放进去，接下来初始化一个MMWindowController调用  \n\n```oc\n- (id)initWithViewController:(id)arg1 windowLevel:(int)arg2;\n```\n\n方法将UINavigationController放了进去，完成小视频拍摄界面的所有UI创建工作。\n拍摄完成之后进入发布界面，此时用cycript找到当前的Controller是SightMomentEditViewController，由此萌生一个想法，跳过前面的拍摄界面直接进入发布界面不就可以了吗？我们自己创建一个SightMomentEditViewController然后放到UINavigationController里面，然后再将这个导航控制器放到MMWindowController里面。**（这里我已经写好tweak进行了验证，具体的tweak思路编写在后文有）**结果是的确可以弹出发布的界面，但是导航栏的NavgationBar遮住了原来的，整个界面是透明的，很难看，而且发布完成之后无法销毁整个MMWindowController，还是停留在发布界面。我们要的结果不是这个，不过确实有很大的收获，最起码可以直接调用发布界面了，小视频也能正常转发。我个人猜测，当前界面不能被销毁的原因是因为MMWindowController新建了一个window,它跟TimeLine所在的keyWindow不是同一个，SightMomentEditViewController的按钮触发的方法是没有办法销毁这个window的，所以有一个大胆的猜想，我直接在当前的WCTimeLineViewController上把SightMomentEditViewController展示出来不就可以了吗？  \n\n```oc\n[WCTimelineVC presentViewController:editSightVC animated:YES completion:^{\n}];\n```\n\n像这样展示岂不妙哉？不过通过观察SightMomentEditViewController的头文件，结合小视频发布时界面上的元素，推测创建这个控制器至少需要两个属性，一个是小视频的路径，另一个是小视频的缩略图，将这两个关键属性给了SightMomentEditViewController那么应该就可以正常展示了   \n\n```oc\nSightMomentEditViewController *editSightVC = [[%c(SightMomentEditViewController) alloc] init];\nNSString *localPath = [[self iOSREMediaItemFromSight] pathForSightData];\nUIImage *image = [[self valueForKey:@\"_sightView\"] getImage];\n[editSightVC setRealMoviePath:localPath];\n[editSightVC setMoviePath:localPath];\n[editSightVC setRealThumbImage:image];\n[editSightVC setThumbImage:image];\n[WCTimelineVC presentViewController:editSightVC animated:YES completion:^{\n}];\n```\n\n小视频的发布界面可以正常显示并且所有功能都可以正常使用，唯一的问题是返回按钮没有效果，并不能销毁SightMomentEditViewController。用cycript查看左侧按钮的actionEvent找到它的响应函数是`- (void)popSelf;`，点击左侧返回触发的是pop方法，但是这个控制器并不在navgationController里面，所以无效，我们要对这个方法进行重写  \n\n```oc\n- (void)popSelf\n{\n    [self dismissViewControllerAnimated:YES completion:^{\n\n    }];\n}\n```\n\n此时再点击返回按钮就可以正常退出了，此外，在WCContentItemViewTemplateNewSight中发现了一个方法叫做`- (void)sendSightToFriend;`，可以直接将小视频转发给好友，至此小视频转发的功能已经找到了。\n","slug":"手把手教你逆向微信之朋友圈小视频转发（上）","published":1,"updated":"2016-11-11T09:53:54.692Z","_id":"civdhewvr00054h6q3gksvlwf","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>此文为逆向微信二进制文件，实现朋友圈小视频转发的教程，从最开始的汇编代码入手到最后重签名安装等操作，手把手教你玩转微信！学会之后再去逆向微信其他功能易如反掌。<br>本篇文章由于篇幅太长分成了两篇，<strong>上篇</strong>讲解的是逆向工作，也就是怎么找到相关的函数和方法实现，<strong>下篇</strong>讲解的是怎么在非越狱机重签名安装和越狱机tweak安装的详细过程。<br><strong>正文的第二部分还提供了微信自动抢红包、修改微信步数的代码，这些都可以照葫芦画瓢按照本文的套路一步步逆向找到，这里就不再赘述。</strong><br>在实践之前，需要准备好一部越狱的手机，然后将下文列出的所有工具安装好。IDA跟Reveal都是破解版，IDA的正版要2000多刀，对于这么牛逼的逆向工具确实物有所值，不过不是专门研究逆向的公司也没必要用正版的，下个Windows的破解版就好，Mac上暂时没找到。Mac上可以用hopper代替IDA，也是一款很牛逼的逆向工具。废话不多说，正式开始吧！</p>\n<a id=\"more\"></a>\n<h1 id=\"逆向微信朋友圈（上篇）\"><a href=\"#逆向微信朋友圈（上篇）\" class=\"headerlink\" title=\"逆向微信朋友圈（上篇）\"></a>逆向微信朋友圈（上篇）</h1><h2 id=\"一、获取朋友圈的小视频\"><a href=\"#一、获取朋友圈的小视频\" class=\"headerlink\" title=\"一、获取朋友圈的小视频\"></a>一、获取朋友圈的小视频</h2><blockquote>\n<p>   注意：本文逆向的微信的二进制文件为6.3.28版本，如果是不同的微信版本，二进制文件中的基地址也不相同</p>\n</blockquote>\n<h4 id=\"本文涉及到的工具\"><a href=\"#本文涉及到的工具\" class=\"headerlink\" title=\"本文涉及到的工具\"></a>本文涉及到的工具</h4><ol>\n<li><a href=\"http://www.cycript.org\" target=\"_blank\" rel=\"external\">cycript</a> </li>\n<li>LLDB与debugserver（Xcode自带）</li>\n<li>OpenSSH</li>\n<li>IDA</li>\n<li>Reveal</li>\n<li><a href=\"https://github.com/theos/theos\" target=\"_blank\" rel=\"external\">theos</a></li>\n<li><a href=\"http://www.cydiasubstrate.com\" target=\"_blank\" rel=\"external\">CydiaSubstrate</a></li>\n<li>iOSOpenDev</li>\n<li>ideviceinstaller</li>\n<li>tcprelay（本地端口映射，USB连接SSH，不映射可通过WiFi连接） </li>\n<li><a href=\"https://github.com/stefanesser/dumpdecrypted\" target=\"_blank\" rel=\"external\">dumpdecrypted</a></li>\n<li><a href=\"http://stevenygard.com/projects/class-dump/\" target=\"_blank\" rel=\"external\">class-dump</a> </li>\n<li><a href=\"https://github.com/DanTheMan827/ios-app-signer\" target=\"_blank\" rel=\"external\">iOS App Signer</a></li>\n<li>编译好的<a href=\"https://github.com/gaoshilei/yololib\" target=\"_blank\" rel=\"external\">yololib</a></li>\n</ol>\n<p><strong>逆向环境为MacOS    +    iPhone5S 9.1越狱机</strong><br>先用dumpdecrypted给微信砸壳（不会的请我写的看<a href=\"http://www.gaoshilei.com/2016/07/17/dumpdecrypted给App砸壳/\">这篇教程</a>），获得一个WeChat.decrypted文件，先把这个文件扔到IDA中分析（60MB左右的二进制文件，IDA差不多40分钟才能分析完），用class-dump导出所有头文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ class-dump -S -s -H /Users/gaoshilei/Desktop/reverse/binary_for_class-dump/WeChat.decrypted -o /Users/gaoshilei/Desktop/reverse/binary_for_class-dump/class-Header/WeChat</div></pre></td></tr></table></figure>\n<p>我滴个亲娘！一共有8000个头文件，微信果然工程量浩大！稳定一下情绪，理一理思路继续搞。要取得小视频的下载链接，找到播放视频的View，顺藤摸瓜就能找到小视频的URL。用Reveal查看小视频的播放窗口<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E8%A7%86%E9%A2%91%E8%BD%AC%E5%8F%91Reveal.png\" alt=\"Reveal\"><br>可以看出来WCContentItemViewTemplateNewSigh这个对象是小视频的播放窗口，它的subView有WCSightView，SightView、SightPlayerView，这几个类就是我们的切入点。<br>保存视频到favorite的时候是长按视频弹出选项的，那么在WCContentItemViewTemplateNewSight这个类里面可能有手势相关的方法，去刚才导出的头文件中找线索。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)onLongTouch;</div><div class=\"line\">- (void)onLongPressedWCSight:(id)arg1;</div><div class=\"line\">- (void)onLongPressedWCSightFullScreenWindow:(id)arg1;</div></pre></td></tr></table></figure>\n<p>这几个方法跟长按手势相关，再去IDA中找到这些函数，逐个查看。onLongPressedWCSight和onLongPressedWCSightFullScreenWindow都比较简单，onLongTouch比较长，而且发现了内部调用了方法Favorites_Add，因为长按视频的时候出来一个选项就是Favorites，并且我看到这个函数调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ADRP            X8, #selRef_sightVideoPath@PAGE</div><div class=\"line\">LDR             X1, [X8,#selRef_sightVideoPath@PAGEOFF]</div></pre></td></tr></table></figure>\n<p>这里拿到了小视频的地址，可以推测这个函数跟收藏有关，下面打断点测试。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) im li -o -f</div><div class=\"line\">[  0] 0x000000000003c000 /var/mobile/Containers/Bundle/Application/2F1D52EC-C57E-4F95-B715-EF04351232E8/WeChat.app/WeChat(0x000000010003c000)</div></pre></td></tr></table></figure>\n<p>可以看到WeChat的ASLR为0x3c000，在IDA查找到这三个函数的基地址，分别下断点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) br s -a 0x1020D3A10+0x3c000</div><div class=\"line\">Breakpoint 1: where = WeChat`___lldb_unnamed_symbol110094$$WeChat + 28, address = 0x000000010210fa10</div><div class=\"line\">(lldb) br s -a 0x1020D3370+0x3c000</div><div class=\"line\">Breakpoint 2: where = WeChat`___lldb_unnamed_symbol110091$$WeChat + 8, address = 0x000000010210f370</div><div class=\"line\">(lldb) br s -a 0x1020D33E4+0x3c000</div><div class=\"line\">Breakpoint 3: where = WeChat`___lldb_unnamed_symbol110092$$WeChat + 12, address = 0x000000010210f3e4</div></pre></td></tr></table></figure>\n<p>回到微信里面长按小视频，看断点触发情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Process 3721 stopped</div><div class=\"line\">* thread #1: tid = 0x658fc, 0x000000010210f370 WeChat`___lldb_unnamed_symbol110091$$WeChat + 8, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 2.1</div><div class=\"line\">    frame #0: 0x000000010210f370 WeChat`___lldb_unnamed_symbol110091$$WeChat + 8</div><div class=\"line\">WeChat`___lldb_unnamed_symbol110091$$WeChat:</div><div class=\"line\">-&gt;  0x10210f370 &lt;+8&gt;:  add    x29, sp, #16              ; =16 </div><div class=\"line\">    0x10210f374 &lt;+12&gt;: mov    x19, x0</div><div class=\"line\">    0x10210f378 &lt;+16&gt;: adrp   x8, 4968</div><div class=\"line\">    0x10210f37c &lt;+20&gt;: ldr    x0, [x8, #744]</div><div class=\"line\">(lldb) c</div><div class=\"line\">Process 3721 resuming</div><div class=\"line\">Process 3721 stopped</div><div class=\"line\">* thread #1: tid = 0x658fc, 0x000000010210fa10 WeChat`___lldb_unnamed_symbol110094$$WeChat + 28, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 1.1</div><div class=\"line\">    frame #0: 0x000000010210fa10 WeChat`___lldb_unnamed_symbol110094$$WeChat + 28</div><div class=\"line\">WeChat`___lldb_unnamed_symbol110094$$WeChat:</div><div class=\"line\">-&gt;  0x10210fa10 &lt;+28&gt;: add    x29, sp, #96              ; =96 </div><div class=\"line\">    0x10210fa14 &lt;+32&gt;: sub    sp, sp, #96               ; =96 </div><div class=\"line\">    0x10210fa18 &lt;+36&gt;: mov    x19, x0</div><div class=\"line\">    0x10210fa1c &lt;+40&gt;: adrp   x8, 4863</div><div class=\"line\">……</div></pre></td></tr></table></figure>\n<p>发现断点2先被触发，接着触发断点1，后面断点2和1又各触发了1次，断点3一直很安静。可以排除onLongPressedWCSightFullScreenWindow与收藏小视频的联系。小视频的踪影就要在剩下的两个方法中寻找了。通过V找到C，顺藤摸瓜找到M屡试不爽！用cycript注入WeChat，拿到播放小视频的view所在的Controller。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy# [#0x138c18030 nextResponder]</div><div class=\"line\">#&quot;&lt;WCTimeLineCellView: 0x138c34620; frame = (0 0; 319 249); tag = 1048577; layer = &lt;CALayer: 0x138362ba0&gt;&gt;&quot;</div><div class=\"line\">cy# [#0x138c34620 nextResponder]</div><div class=\"line\">#&quot;&lt;UITableViewCellContentView: 0x138223c70; frame = (0 0; 320 256); gestureRecognizers = &lt;NSArray: 0x1384ec480&gt;; layer = &lt;CALayer: 0x138081dc0&gt;&gt;&quot;</div><div class=\"line\">cy# [#0x138223c70 nextResponder]</div><div class=\"line\">#&quot;&lt;MMTableViewCell: 0x138c9f930; baseClass = UITableViewCell; frame = (0 307; 320 256); autoresize = W; layer = &lt;CALayer: 0x1382dcd10&gt;&gt;&quot;</div><div class=\"line\">cy# [#0x138c9f930 nextResponder]</div><div class=\"line\">#&quot;&lt;UITableViewWrapperView: 0x137b57800; frame = (0 0; 320 504); gestureRecognizers = &lt;NSArray: 0x1383db660&gt;; layer = &lt;CALayer: 0x138af20c0&gt;; contentOffset: &#123;0, 0&#125;; contentSize: &#123;320, 504&#125;&gt;&quot;</div><div class=\"line\">cy# [#0x137b57800 nextResponder]</div><div class=\"line\">#&quot;&lt;MMTableView: 0x137b8ae00; baseClass = UITableView; frame = (0 0; 320 568); gestureRecognizers = &lt;NSArray: 0x138adb590&gt;; layer = &lt;CALayer: 0x138956890&gt;; contentOffset: &#123;0, 99.5&#125;; contentSize: &#123;320, 3193&#125;&gt;&quot;</div><div class=\"line\">cy# [#0x137b8ae00 nextResponder]</div><div class=\"line\">#&quot;&lt;UIView: 0x138ade5c0; frame = (0 0; 320 568); autoresize = W+H; layer = &lt;CALayer: 0x138ac9990&gt;&gt;&quot;</div><div class=\"line\">cy# [#0x138ade5c0 nextResponder]</div><div class=\"line\">#&quot;&lt;WCTimeLineViewController: 0x1379eb000&gt;&quot;</div></pre></td></tr></table></figure>\n<p>通过响应者链条找到<br>WCContentItemViewTemplateNewSight所属的Controller为WCTimeLineViewController。在这个类的头文件中并没有发现有价值的线索，不过我们注意到小视频所在的view是属于MMTableVIewCell的（见上图Reveal分析图），这是每一个iOS最熟悉的TableView，cell的数据是通过UITableViewDataSource的代理方法<code>- tableView:cellForRowAtIndexPath:</code>赋值的，通过这个方法肯定能知道到M的影子。在IDA中找到<code>[WCTimeLineViewController tableView:cellForRowAtIndexPath:]</code>,定位到基地址0x10128B6B0位置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">__text:000000010128B6B0     ADRP     X8, #selRef_genNormalCell_indexPath_@PAGE</div></pre></td></tr></table></figure>\n<p>这里的函数是WCTimeLineViewController中生成cell的方法，除了这个方法在这个类中还有另外三个生成cell的方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)genABTestTipCell:(id)arg1 indexPath:(id)arg2;</div><div class=\"line\">- (void)genRedHeartCell:(id)arg1 indexPath:(id)arg2;</div><div class=\"line\">- (void)genUploadFailCell:(id)arg1 indexPath:(id)arg2;</div></pre></td></tr></table></figure>\n<p>通过字面意思可以猜测出normal这个应该是生成小视频cell的方法。继续在IDA中寻找线索</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">__text:0000000101287CC8     ADRP     X8, #selRef_getTimelineDataItemOfIndex_@PAGE</div></pre></td></tr></table></figure>\n<p>在<code>genNormalCell:IndexPath:</code>方法中发现上面这个方法，可以大胆猜想这个方法是获取TimeLine（朋友圈）数据的方法，那小视频的数据肯定也是通过这个方法获取的，并且IDA可以看到这个方法中调用一个叫做<code>selRef_getTimelineDataItemOfIndex_</code>的方法，获取DataItem貌似就是cell的数据源啊！接下来用LLDB下断点验证猜想。<br>通过IDA可以找到这个方法对应的基地址为：0x101287CE4，先打印正在运行WeChat的ASLR偏移</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ lldb</div><div class=\"line\">(lldb) process connect connect://localhost:1234</div><div class=\"line\">(lldb) im li -o -f </div><div class=\"line\">[0] 0x0000000000050000 /var/mobile/Containers/Bundle/Application/2DCE8F30-9B6B-4652-901C-37EB1FF2A40D/WeChat.app/WeChat(0x0000000100050000)</div></pre></td></tr></table></figure>\n<p>所以我们下断点的位置是0x50000+0x101287CE4</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) br s -a 0x50000+0x101287CE4</div><div class=\"line\">Breakpoint 1: where = WeChat`___lldb_unnamed_symbol63721$$WeChat + 252, address = 0x00000001012d7ce4</div></pre></td></tr></table></figure>\n<p>打印x0的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x0</div><div class=\"line\">Class name: WCDataItem, addr: 0x15f5f03b0</div><div class=\"line\">tid: 12393001887435993280</div><div class=\"line\">username: wxid_z8twcz4o18fg12</div><div class=\"line\">createtime: 1477360950</div><div class=\"line\">commentUsers: (</div><div class=\"line\">)</div><div class=\"line\">contentObj: &lt;WCContentItem: 0x15f57d000&gt;</div></pre></td></tr></table></figure>\n<p>得到一个WCDataItem的对象，这里x0的值就是<code>selRef_getTimelineDataItemOfIndex_</code>执行完的返回值，然后把x0的值改掉</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) register write $x0 0</div><div class=\"line\">(lldb) c</div></pre></td></tr></table></figure>\n<p>此时会发现我们要刷新的那条小视频内容全部为空<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E8%A7%86%E9%A2%91-%E8%BD%AC%E5%8F%91%E5%B0%8F%E8%A7%86%E9%A2%91%E4%B8%BA%E7%A9%BA.jpg\" alt=\"小视频内容为空\"><br>到这里已经找到了小视频的源数据获取方法，问题是我们怎么拿到这个WCDataItem呢？继续看IDA分析函数的调用情况：  </p>\n<blockquote>\n<p>   WCTimeLineViewController - (void)genNormalCell:(id) indexPath:(id)  </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\">__text:0000000101287BCC                 STP             X28, X27, [SP,#var_60]!</div><div class=\"line\">__text:0000000101287BD0                 STP             X26, X25, [SP,#0x60+var_50]</div><div class=\"line\">__text:0000000101287BD4                 STP             X24, X23, [SP,#0x60+var_40]</div><div class=\"line\">__text:0000000101287BD8                 STP             X22, X21, [SP,#0x60+var_30]</div><div class=\"line\">__text:0000000101287BDC                 STP             X20, X19, [SP,#0x60+var_20]</div><div class=\"line\">__text:0000000101287BE0                 STP             X29, X30, [SP,#0x60+var_10]</div><div class=\"line\">__text:0000000101287BE4                 ADD             X29, SP, #0x60+var_10</div><div class=\"line\">__text:0000000101287BE8                 SUB             SP, SP, #0x80</div><div class=\"line\">__text:0000000101287BEC                 MOV             X19, X3</div><div class=\"line\">__text:0000000101287BF0                 MOV             X22, X0</div><div class=\"line\">__text:0000000101287BF4                 MOV             W25, #0x100000</div><div class=\"line\">__text:0000000101287BF8                 MOVK            W25, #1</div><div class=\"line\">__text:0000000101287BFC                 MOV             X0, X2</div><div class=\"line\">__text:0000000101287C00                 BL              _objc_retain</div><div class=\"line\">__text:0000000101287C04                 MOV             X28, X0</div><div class=\"line\">__text:0000000101287C08                 MOV             X0, X19</div><div class=\"line\">__text:0000000101287C0C                 BL              _objc_retain</div><div class=\"line\">__text:0000000101287C10                 MOV             X20, X0</div><div class=\"line\">__text:0000000101287C14                 STR             X20, [SP,#0xE0+var_98]</div><div class=\"line\">__text:0000000101287C18                 ADRP            X8, #selRef_row@PAGE</div><div class=\"line\">__text:0000000101287C1C                 LDR             X1, [X8,#selRef_row@PAGEOFF]</div><div class=\"line\">__text:0000000101287C20                 BL              _objc_msgSend</div><div class=\"line\">__text:0000000101287C24                 MOV             X26, X0</div><div class=\"line\">__text:0000000101287C28                 ADRP            X8, #selRef_section@PAGE</div><div class=\"line\">__text:0000000101287C2C                 LDR             X19, [X8,#selRef_section@PAGEOFF]</div><div class=\"line\">__text:0000000101287C30                 MOV             X0, X20</div><div class=\"line\">__text:0000000101287C34                 MOV             X1, X19</div><div class=\"line\">__text:0000000101287C38                 BL              _objc_msgSend</div><div class=\"line\">__text:0000000101287C3C                 STR             X0, [SP,#0xE0+var_A8]</div><div class=\"line\">__text:0000000101287C40                 MOV             X0, X20</div><div class=\"line\">__text:0000000101287C44                 MOV             X1, X19</div><div class=\"line\">__text:0000000101287C48                 BL              _objc_msgSend</div><div class=\"line\">__text:0000000101287C4C                 MOV             X2, X0</div><div class=\"line\">__text:0000000101287C50                 ADRP            X8, #selRef_calcDataItemIndex_@PAGE</div><div class=\"line\">__text:0000000101287C54                 LDR             X1, [X8,#selRef_calcDataItemIndex_@PAGEOFF]</div><div class=\"line\">__text:0000000101287C58                 MOV             X0, X22</div><div class=\"line\">__text:0000000101287C5C                 BL              _objc_msgSend</div><div class=\"line\">__text:0000000101287C60                 MOV             X21, X0</div><div class=\"line\">__text:0000000101287C64                 STR             X21, [SP,#0xE0+var_C0]</div><div class=\"line\">__text:0000000101287C68                 ADRP            X8, #classRef_MMServiceCenter@PAGE</div><div class=\"line\">__text:0000000101287C6C                 LDR             X0, [X8,#classRef_MMServiceCenter@PAGEOFF]</div><div class=\"line\">__text:0000000101287C70                 ADRP            X8, #selRef_defaultCenter@PAGE</div><div class=\"line\">__text:0000000101287C74                 LDR             X1, [X8,#selRef_defaultCenter@PAGEOFF]</div><div class=\"line\">__text:0000000101287C78                 STR             X1, [SP,#0xE0+var_B8]</div><div class=\"line\">__text:0000000101287C7C                 BL              _objc_msgSend</div><div class=\"line\">__text:0000000101287C80                 MOV             X29, X29</div><div class=\"line\">__text:0000000101287C84                 BL              _objc_retainAutoreleasedReturnValue</div><div class=\"line\">__text:0000000101287C88                 MOV             X19, X0</div><div class=\"line\">__text:0000000101287C8C                 ADRP            X8, #classRef_WCFacade@PAGE</div><div class=\"line\">__text:0000000101287C90                 LDR             X0, [X8,#classRef_WCFacade@PAGEOFF]</div><div class=\"line\">__text:0000000101287C94                 ADRP            X8, #selRef_class@PAGE</div><div class=\"line\">__text:0000000101287C98                 LDR             X1, [X8,#selRef_class@PAGEOFF]</div><div class=\"line\">__text:0000000101287C9C                 STR             X1, [SP,#0xE0+var_B0]</div><div class=\"line\">__text:0000000101287CA0                 BL              _objc_msgSend</div><div class=\"line\">__text:0000000101287CA4                 MOV             X2, X0</div><div class=\"line\">__text:0000000101287CA8                 ADRP            X8, #selRef_getService_@PAGE</div><div class=\"line\">__text:0000000101287CAC                 LDR             X1, [X8,#selRef_getService_@PAGEOFF]</div><div class=\"line\">__text:0000000101287CB0                 STR             X1, [SP,#0xE0+var_A0]</div><div class=\"line\">__text:0000000101287CB4                 MOV             X0, X19</div><div class=\"line\">__text:0000000101287CB8                 BL              _objc_msgSend</div><div class=\"line\">__text:0000000101287CBC                 MOV             X29, X29</div><div class=\"line\">__text:0000000101287CC0                 BL              _objc_retainAutoreleasedReturnValue</div><div class=\"line\">__text:0000000101287CC4                 MOV             X20, X0</div><div class=\"line\">__text:0000000101287CC8                 ADRP            X8, #selRef_getTimelineDataItemOfIndex_@PAGE</div><div class=\"line\">__text:0000000101287CCC                 LDR             X1, [X8,#selRef_getTimelineDataItemOfIndex_@PAGEOFF]</div><div class=\"line\">__text:0000000101287CD0                 STR             X1, [SP,#0xE0+var_C8]</div><div class=\"line\">__text:0000000101287CD4                 MOV             X2, X21</div><div class=\"line\">__text:0000000101287CD8                 BL              _objc_msgSend</div><div class=\"line\">__text:0000000101287CDC                 MOV             X29, X29</div><div class=\"line\">__text:0000000101287CE0                 BL              _objc_retainAutoreleasedReturnValue</div><div class=\"line\">__text:0000000101287CE4                 MOV             X21, X0</div><div class=\"line\">__text:0000000101287CE8                 MOV             X0, X20</div><div class=\"line\">......</div></pre></td></tr></table></figure>\n<p><code>selRef_getTimelineDataItemOfIndex_</code>传入的参数是x2，可以看到传值给x2的x21是函数<code>selRef_calcDataItemIndex_</code>的返回值，是一个unsigned long数据类型。继续分析，<code>selRef_getTimelineDataItemOfIndex_</code>函数的调用者是上一步<code>selRef_getService_</code>的返回值，经过断点分析发现是一个<code>WCFacade</code>对象。整理一下<code>selRef_getTimelineDataItemOfIndex_</code>的调用：<br><strong>调用者是<code>selRef_getService_</code>的返回值；参数是<code>selRef_calcDataItemIndex_</code>的返回值</strong><br>下面把目光转向那两个函数，用相同的原理分析它们各自怎么实现调用  </p>\n<ol>\n<li>先看<code>selRef_getService_</code>：<br>在0x101287CB4这个位置可以发现，这个函数的调用者是从通过x19 MOV的，打印x19发现是一个<code>MMServiceCenter</code>对象，往上找x19是在0x101287C88这个位置赋值的，结果很清晰x19是<code>[MMServiceCenter defaultCenter]</code>的返回值。<br>在0x101287CA4位置可以找到传入的参数x2，往上分析可以看出来它的参数是<code>[WCFacade class]</code>的返回值。  </li>\n<li>接着找<code>selRef_calcDataItemIndex_</code>：<br>在0x101287C58的位置找到它的调用者x0，x0通过x22赋值，继续向上寻找，发现在最上面0x101287BF0的位置，x22是x0赋值的，一开始的x0就是<code>WCTimeLineViewController</code>自身。<br>在0x101287C4C位置发现传入的参数来自x2,x2是通过上一步<code>selRef_section</code>函数的返回值x0赋值的，在0x101287C30位置可以发现<code>selRef_section</code>函数的调用者是x20赋值的，如下图所示，最终找到<code>selRef_section</code>的调用者是x3<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E8%A7%86%E9%A2%91%E8%BD%AC%E5%8F%91-selRef_section%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E8%80%85.png\" alt=\"selRef_section函数的调用者\"><br>x3就是函数<code>WCTimeLineViewController - (void)genNormalCell:(id) indexPath:(id)</code>的第二个参数indexPath,，所以<code>selRef_calcDataItemIndex_</code>的参数是<code>[IndexPath section]</code>。<br>对上面的分析结果做个梳理：<br>因此<code>getTimelineDataItemOfIndex:</code>的调用者可以通过</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[MMServiceCenter defaultCenter] getService:[WCFacade class]]</div></pre></td></tr></table></figure>\n<p>来获得,它的参数可以通过下面的函数获取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[WCTimeLineViewController calcDataItemIndex:[indexPath section]]</div></pre></td></tr></table></figure>\n<p>总感觉还少点什么？indexPath我们还没拿到呢！下一步就是拿到indexPath,这个就比较简单了，因为我们位于<code>[WCContentItemViewTemplateNewSight onLongTouch]</code>中，所以可以通过<code>[self nextResponder]</code>依次拿到MMTableViewCell、MMTableView和WCTimeLineViewController，再通过<code>[MMTableView indexPathForCell:MMTableViewCell]</code>拿到indexPath。<br>做完这些，已经拿到WCDataItem对象，接下来的重点要放在WCDataItem上，最终要获取我们要的小视频。到这个类的头文件中找线索，因为视频是下载完成后才能播放的，所以这里应该拿到了视频的路径，所以要注意url和path相关的属性或方法，然后找到下面这几个嫌疑对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@property(retain, nonatomic) NSString *sourceUrl2; </div><div class=\"line\">@property(retain, nonatomic) NSString *sourceUrl; </div><div class=\"line\">- (id)descriptionForKeyPaths;</div><div class=\"line\">- (id)keyPaths;</div></pre></td></tr></table></figure>\n<p>回到LLDB中，用断点打印这些值，看看有什么。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po [$x0 keyPaths]</div><div class=\"line\">&lt;__NSArrayI 0x15f74e9d0&gt;(</div><div class=\"line\">\ttid,</div><div class=\"line\">\tusername,</div><div class=\"line\">\tcreatetime,</div><div class=\"line\">\tcommentUsers,</div><div class=\"line\">\tcontentObj</div><div class=\"line\">)</div><div class=\"line\">(lldb) po [$x0 descriptionForKeyPaths]</div><div class=\"line\">Class name: WCDataItem, addr: 0x15f5f03b0</div><div class=\"line\">tid: 12393001887435993280</div><div class=\"line\">username: wxid_z8twcz4o18fg12</div><div class=\"line\">createtime: 1477360950</div><div class=\"line\">commentUsers: (</div><div class=\"line\">)</div><div class=\"line\">contentObj: &lt;WCContentItem: 0x15f57d000&gt;</div><div class=\"line\">(lldb) po [$x0 sourceUrl]</div><div class=\"line\"> nil</div><div class=\"line\">(lldb) po [$x0 sourceUrl2]</div><div class=\"line\"> nil</div></pre></td></tr></table></figure>\n<p>并没有什么有价值的线索，不过注意到WCDataItem里面有一个WCContentItem，看来只能从这儿入手了，去看一下头文件吧！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@property(retain, nonatomic) NSString *linkUrl; </div><div class=\"line\">@property(retain, nonatomic) NSString *linkUrl2; </div><div class=\"line\">@property(retain, nonatomic) NSMutableArray *mediaList;</div></pre></td></tr></table></figure>\n<p>在LLDB打印出来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po [[$x0 valueForKey:@&quot;contentObj&quot;] linkUrl]</div><div class=\"line\">https://support.weixin.qq.com/cgi-bin/mmsupport-bin/readtemplate?t=page/common_page__upgrade&amp;v=1</div><div class=\"line\">(lldb) po [[$x0 valueForKey:@&quot;contentObj&quot;] linkUrl2]</div><div class=\"line\"> nil</div><div class=\"line\">(lldb) po [[$x0 valueForKey:@&quot;contentObj&quot;] mediaList]</div><div class=\"line\">&lt;__NSArrayM 0x15f985e10&gt;(</div><div class=\"line\">&lt;WCMediaItem: 0x15dfebdf0&gt;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>mediaList数组里面有一个WCMediaItem对象，Media一般用来表示视频和音频，大胆猜测就是它了！赶紧找到头文件搜索一遍。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@property(retain, nonatomic) WCUrl *dataUrl;</div><div class=\"line\">- (id)pathForData;</div><div class=\"line\">- (id)pathForSightData;</div><div class=\"line\">- (id)pathForTempAttachVideoData;</div><div class=\"line\">- (id)videoStreamForData;</div></pre></td></tr></table></figure>\n<p>上面这些属性和方法中<code>pathForSightData</code>是最有可能拿到小视频路径的，继续验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po [[[[$x0 valueForKey:@&quot;contentObj&quot;] mediaList] lastObject] dataUrl]</div><div class=\"line\">type[1], url[http://vweixinf.tc.qq.com/102/20202/snsvideodownload?filekey=30270201010420301e020166040253480410d14adcddf086f4e131d11a5b1cca1bdf0203039fa00400&amp;bizid=1023&amp;hy=SH&amp;fileparam=302c0201010425302302040fde55e20204580ebd3602024eea02031e8d7d02030f42400204d970370a0201000400], enckey[0], encIdx[-1], token[]</div><div class=\"line\">(lldb) po [[[[$x0 valueForKey:@&quot;contentObj&quot;] mediaList] lastObject] pathForData]</div><div class=\"line\">/var/mobile/Containers/Data/Application/7C3A6322-1F57-49A0-ACDE-6EF0ED74D137/Library/WechatPrivate/6f696a1b596ce2499419d844f90418aa/wc/media/5/53/8fb0cdd77208de5b56169fb3458b45</div><div class=\"line\">(lldb) po [[[[$x0 valueForKey:@&quot;contentObj&quot;] mediaList] lastObject] pathForSightData]</div><div class=\"line\">/var/mobile/Containers/Data/Application/7C3A6322-1F57-49A0-ACDE-6EF0ED74D137/Library/WechatPrivate/6f696a1b596ce2499419d844f90418aa/wc/media/5/53/8fb0cdd77208de5b56169fb3458b45.mp4</div><div class=\"line\">(lldb) po [[[[$x0 valueForKey:@&quot;contentObj&quot;] mediaList] lastObject] pathForAttachVideoData]</div><div class=\"line\"> nil</div><div class=\"line\">(lldb) po [[[[$x0 valueForKey:@&quot;contentObj&quot;] mediaList] lastObject] videoStreamForData]</div><div class=\"line\"> nil</div></pre></td></tr></table></figure>\n<p>拿到小视频的网络url和本地路径了！这里可以用iFunBox或者scp从沙盒拷贝这个文件看看是不是这个cell应该播放的小视频。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ scp root@192.168.0.115:/var/mobile/Containers/Data/Application/7C3A6322-1F57-49A0-ACDE-6EF0ED74D137/Library/WechatPrivate/6f696a1b596ce2499419d844f90418aa/wc/media/5/53/8fb0cdd77208de5b56169fb3458b45.mp4 Desktop/</div><div class=\"line\">8fb0cdd77208de5b56169fb3458b45.mp4                100%  232KB 231.9KB/s   00:00</div></pre></td></tr></table></figure>\n<p>用QuickTime打开发现果然是我们要寻找的小视频。再验证一下url是否正确，把上面打印的dataUrl在浏览器中打开，发现也是这个小视频。分析这个类可以得出下面的结论：  </p>\n<ul>\n<li><strong>dataUrl：</strong>小视频的网络url</li>\n<li><strong>pathForData：</strong>小视频的本地路径</li>\n<li><strong>pathForSightData：</strong>小视频的本地路径（不带后缀）</li>\n</ul>\n<p>至此小视频的路径和取得方式分析已经完成，要实现转发还要继续分析微信的朋友圈发布。</p>\n<h2 id=\"二、实现转发功能\"><a href=\"#二、实现转发功能\" class=\"headerlink\" title=\"二、实现转发功能\"></a>二、实现转发功能</h2><h3 id=\"1-“走进死胡同”\"><a href=\"#1-“走进死胡同”\" class=\"headerlink\" title=\"1.“走进死胡同”\"></a>1.“走进死胡同”</h3><blockquote>\n<p>   这节是我在找小视频转发功能时走的弯路，扒到最后并没有找到实现方法，不过也提供了一些逆向中常用的思路和方法，不想看的可以跳到第二节。  </p>\n</blockquote>\n<h4 id=\"（1）找到小视频拍摄完成调用的方法名称\"><a href=\"#（1）找到小视频拍摄完成调用的方法名称\" class=\"headerlink\" title=\"（1）找到小视频拍摄完成调用的方法名称\"></a>（1）找到小视频拍摄完成调用的方法名称</h4><p>打开小视频的拍摄界面，用cycript注入，我们要找到发布小视频的方法是哪个，然后查看当前的窗口有哪些window（因为小视频的拍摄并不是在UIApplication的keyWindow中进行的）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy# [UIApp windows].toString()</div><div class=\"line\">(</div><div class=\"line\">    &quot;&lt;iConsoleWindow: 0x125f75e20; baseClass = UIWindow; frame = (0 0; 320 568); autoresize = W+H; gestureRecognizers = &lt;NSArray: 0x125f77b70&gt;; layer = &lt;UIWindowLayer: 0x125df4810&gt;&gt;&quot;,</div><div class=\"line\">    &quot;&lt;SvrErrorTipWindow: 0x127414d40; baseClass = UIWindow; frame = (0 64; 320 45); hidden = YES; gestureRecognizers = &lt;NSArray: 0x12740d930&gt;; layer = &lt;UIWindowLayer: 0x1274030b0&gt;&gt;&quot;,</div><div class=\"line\">    &quot;&lt;MMUIWindow: 0x127796440; baseClass = UIWindow; frame = (0 0; 320 568); gestureRecognizers = &lt;NSArray: 0x1278083c0&gt;; layer = &lt;UIWindowLayer: 0x127796750&gt;&gt;&quot;,</div><div class=\"line\">    &quot;&lt;UITextEffectsWindow: 0x1270e0d40; frame = (0 0; 320 568); opaque = NO; autoresize = W+H; layer = &lt;UIWindowLayer: 0x1270b4ba0&gt;&gt;&quot;,</div><div class=\"line\">    &quot;&lt;NewYearActionSheet: 0x127797e10; baseClass = UIWindow; frame = (0 0; 320 568); hidden = YES; userInteractionEnabled = NO; layer = &lt;UIWindowLayer: 0x1277d5490&gt;&gt;&quot;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>发现当前页面一共有5个window，其中MMUIWindow是小视频拍摄所在的window，打印它的UI树状结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy# [#0x127796440 recursiveDescription]</div></pre></td></tr></table></figure>\n<p>打印结果比较长，不贴了。找到这个按钮是拍摄小视频的按钮</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">|    |    |    |    |    | &lt;UIButton: 0x1277a9d70; frame = (89.5 368.827; 141 141); opaque = NO; gestureRecognizers = &lt;NSArray: 0x1277aaeb0&gt;; layer = &lt;CALayer: 0x1277a9600&gt;&gt;</div><div class=\"line\">|    |    |    |    |    |    | &lt;UIView: 0x1277aa0a0; frame = (0 0; 141 141); userInteractionEnabled = NO; tag = 252707333; layer = &lt;CALayer: 0x1277aa210&gt;&gt;</div><div class=\"line\">|    |    |    |    |    |    |    | &lt;UIImageView: 0x1277aa2e0; frame = (0 0; 141 141); opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x1277aa490&gt;&gt;</div></pre></td></tr></table></figure>\n<p>然后执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy# [#0x1277a9d70 setHidden:YES]</div></pre></td></tr></table></figure>\n<p>发现拍摄的按钮消失了，验证了我的猜想。寻找按钮的响应事件，可以通过target来寻找</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy# [#0x1277a9d70 allTargets]</div><div class=\"line\">[NSSet setWithArray:@[#&quot;&lt;MainFrameSightViewController: 0x1269a4600&gt;&quot;]]]</div><div class=\"line\">cy# [#0x1277a9d70 allControlEvents]</div><div class=\"line\">193</div><div class=\"line\">cy# [#0x1277a9d70 actionsForTarget:#0x1269a4600 forControlEvent:193]</div><div class=\"line\">null</div></pre></td></tr></table></figure>\n<p>发现按钮并没有对应的action，这就奇怪了！UIButton必须要有target和action，不然这个Button不能响应事件。我们试试其他的ControlEvent</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy# [#0x1277a9d70 actionsForTarget:#0x1269a4600 forControlEvent:UIControlEventTouchDown]</div><div class=\"line\">@[&quot;btnPress&quot;]</div><div class=\"line\">cy# [#0x1277a9d70 actionsForTarget:#0x1269a4600 forControlEvent:UIControlEventTouchUpOutside]</div><div class=\"line\">@[&quot;btnRelease&quot;]</div><div class=\"line\">cy# [#0x1277a9d70 actionsForTarget:#0x1269a4600 forControlEvent:UIControlEventTouchUpInside]</div><div class=\"line\">@[&quot;btnRelease&quot;]</div></pre></td></tr></table></figure>\n<p>结果发现这三个ContrlEvent有对应的action，我们再看看这三个枚举的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">typedef enum UIControlEvents : NSUInteger &#123;</div><div class=\"line\">    UIControlEventTouchDown = 1 &lt;&lt;  0,</div><div class=\"line\">    UIControlEventTouchDownRepeat = 1 &lt;&lt;  1,</div><div class=\"line\">    UIControlEventTouchDragInside = 1 &lt;&lt;  2,</div><div class=\"line\">    UIControlEventTouchDragOutside = 1 &lt;&lt;  3,</div><div class=\"line\">    UIControlEventTouchDragEnter = 1 &lt;&lt;  4,</div><div class=\"line\">    UIControlEventTouchDragExit = 1 &lt;&lt;  5,</div><div class=\"line\">    UIControlEventTouchUpInside = 1 &lt;&lt;  6,</div><div class=\"line\">    UIControlEventTouchUpOutside = 1 &lt;&lt;  7,</div><div class=\"line\">    UIControlEventTouchCancel = 1 &lt;&lt;  8,</div><div class=\"line\">\t......</div><div class=\"line\">&#125; UIControlEvents;</div></pre></td></tr></table></figure>\n<p>可以看出来UIControlEventTouchDown对应1，UIControlEventTouchUpInside对应128，UIControlEventTouchUpOutside对应64，三者相加正好193！原来调用<code>[#0x1277a9d70 allControlEvents]</code>的时候返回的应该是枚举，有多个枚举则把它们的值相加，是不是略坑？我也是这样觉得的！刚才我们把三种ControlEvent对应的action都打印出来了，继续LLDB+IDA进行动态分析。</p>\n<h4 id=\"（2）找到小视频拍摄完成跳转到发布界面的方法\"><a href=\"#（2）找到小视频拍摄完成跳转到发布界面的方法\" class=\"headerlink\" title=\"（2）找到小视频拍摄完成跳转到发布界面的方法\"></a>（2）找到小视频拍摄完成跳转到发布界面的方法</h4><p>因为要找到小视频发布的方法，所以对应的<code>btnPress</code>函数我们并不关心，把重点放在<code>btnRelease</code>上面，拍摄按钮松开后就会调用的方法。在IDA中找到这个方法<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E8%A7%86%E9%A2%91%E8%BD%AC%E5%8F%91-btnRelease.png\" alt=\"MainFrameSightViewController - (void)btnRelease\"><br>找到之后下个断点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) br s -a 0xac000+0x10209369C</div><div class=\"line\">Breakpoint 4: where = WeChat`___lldb_unnamed_symbol108894$$WeChat + 32, address = 0x000000010213f69c</div><div class=\"line\">Process 3813 stopped</div><div class=\"line\">* thread #1: tid = 0xf1ef0, 0x000000010213f69c WeChat`___lldb_unnamed_symbol108894$$WeChat + 32, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 4.1</div><div class=\"line\">    frame #0: 0x000000010213f69c WeChat`___lldb_unnamed_symbol108894$$WeChat + 32</div><div class=\"line\">WeChat`___lldb_unnamed_symbol108894$$WeChat:</div><div class=\"line\">-&gt;  0x10213f69c &lt;+32&gt;: bl     0x1028d0b60               ; symbol stub for: objc_msgSend</div><div class=\"line\">    0x10213f6a0 &lt;+36&gt;: cmp    w0, #2                    ; =2 </div><div class=\"line\">    0x10213f6a4 &lt;+40&gt;: b.ne   0x10213f6dc               ; &lt;+96&gt;</div><div class=\"line\">    0x10213f6a8 &lt;+44&gt;: adrp   x8, 5489</div></pre></td></tr></table></figure>\n<p>用手机拍摄小视频然后松开，触发了断点，说明我们的猜想是正确的。继续分析发现代码是从上图的右边走的，看了一下没有什么方法是跳转到发布视频的，不过仔细看一下有一个block，是系统的延时block，位置在0x102093760。然后我们跟着断点进去，在0x1028255A0跳转到x16所存的地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) si</div><div class=\"line\">Process 3873 stopped</div><div class=\"line\">* thread #1: tid = 0xf62c4, 0x00000001028d9598 WeChat`dispatch_after, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step into</div><div class=\"line\">    frame #0: 0x00000001028d9598 WeChat`dispatch_after</div><div class=\"line\">WeChat`dispatch_after:</div><div class=\"line\">-&gt;  0x1028d9598 &lt;+0&gt;: adrp   x16, 1655</div><div class=\"line\">    0x1028d959c &lt;+4&gt;: ldr    x16, [x16, #1056]</div><div class=\"line\">    0x1028d95a0 &lt;+8&gt;: br     x16</div><div class=\"line\"></div><div class=\"line\">WeChat`dispatch_apply:</div><div class=\"line\">    0x1028d95a4 &lt;+0&gt;: adrp   x16, 1655</div><div class=\"line\">(lldb) po $x2</div><div class=\"line\">&lt;__NSStackBlock__: 0x16fd49f88&gt;</div></pre></td></tr></table></figure>\n<p>发现传入的参数x2是一个block，我们再回顾一下dispatch_after函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block);</div></pre></td></tr></table></figure>\n<p>这个函数有三个参数，分别是dispatch_time_t、dispatch_queue_t、dispatch_block_t，那这里打印的x2就是要传入的block，所以我们猜测拍摄完小视频会有一个延时，然后执行刚才传入的block，所以x2中肯定有其他方法调用，下一步就是要知道这个block的位置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) memory read --size 8 --format x 0x16fd49f88</div><div class=\"line\">0x16fd49f88: 0x000000019f8fd218 0x00000000c2000000</div><div class=\"line\">0x16fd49f98: 0x000000010214777c 0x0000000102fb0e60</div><div class=\"line\">0x16fd49fa8: 0x000000015da32600 0x000000015ea1a430</div><div class=\"line\">0x16fd49fb8: 0x000000015cf5fee0 0x000000016fd49ff0</div></pre></td></tr></table></figure>\n<p>0x000000010214777c就是block所在的位置，当然要减掉当前WeChat的ASLR偏移，最终在IDA中的地址为0x10209377C，突然发现这就是<code>btnRelease</code>的子程序sub_10209377C。这个子程序非常简单，只有一个方法<code>selRef_logicCheckState_</code>有可能是我们的目标。先看看这个方法是谁调用的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) br s -a 0xb4000+0x1020937BC</div><div class=\"line\">......</div><div class=\"line\">Process 3873 stopped</div><div class=\"line\">* thread #1: tid = 0xf62c4, 0x00000001021477bc WeChat`___lldb_unnamed_symbol108895$$WeChat + 64, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 3.1</div><div class=\"line\">    frame #0: 0x00000001021477bc WeChat`___lldb_unnamed_symbol108895$$WeChat + 64</div><div class=\"line\">WeChat`___lldb_unnamed_symbol108895$$WeChat:</div><div class=\"line\">-&gt;  0x1021477bc &lt;+64&gt;: adrp   x8, 5489</div><div class=\"line\">    0x1021477c0 &lt;+68&gt;: ldr    x1, [x8, #1552]</div><div class=\"line\">    0x1021477c4 &lt;+72&gt;: orr    w2, wzr, #0x1</div><div class=\"line\">    0x1021477c8 &lt;+76&gt;: ldp    x29, x30, [sp, #16]</div><div class=\"line\">(lldb) po $x0</div><div class=\"line\">&lt;MainFrameSightViewController: 0x15d1f0c00&gt;</div></pre></td></tr></table></figure>\n<p>发现还是MainFrameSightViewController这个对象调用的，那<code>selRef_logicCheckState_</code>肯定也在这个类的头文件中，寻找一下果然发现了  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)logicCheckState:(int)arg1;</div></pre></td></tr></table></figure>\n<p>在IDA左侧窗口中寻找[MainFrameSightViewController logicCheckState:]，发现这个方法超级复杂，逻辑太多了，不着急慢慢捋。<br>在0x102094D6C位置我们发现一个switch jump，思路就很清晰了，我们只要找到小视频拍摄完成的这条线往下看就行了，LLDB来帮忙看看走的那条线。在0x102094D6C位置下个断点，这个断点在拍摄小视频的时候会多次触发，可以在拍摄之前把断点dis掉，拍摄松手之前再启用断点，打印此时的x8值  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) p/x $x8</div><div class=\"line\">(unsigned long) $38 = 0x0000000102174e10</div></pre></td></tr></table></figure>\n<p>x8是一个指针，它指向的地址是0x102174e10，用这个地址减去当前ASLR的偏移就可以找到在IDA中的基地址，发现是0x102094E10，拍摄完成的逻辑处理这条线找到了，一直走到0x102094E24位置之后跳转0x1020951C4，这个分支的内容较少，里面有三个函数  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">loc_1020951C4</div><div class=\"line\">ADRP            X8, #selRef_hideTips@PAGE</div><div class=\"line\">LDR             X1, [X8,#selRef_hideTips@PAGEOFF]</div><div class=\"line\">MOV             X0, X19</div><div class=\"line\">BL              _objc_msgSend</div><div class=\"line\">ADRP            X8, #selRef_finishWriter@PAGE</div><div class=\"line\">LDR             X1, [X8,#selRef_finishWriter@PAGEOFF]</div><div class=\"line\">MOV             X0, X19</div><div class=\"line\">BL              _objc_msgSend</div><div class=\"line\">ADRP            X8, #selRef_turnCancelBtnForFinishRecording@PAGE</div><div class=\"line\">LDR             X1, [X8,#selRef_turnCancelBtnForFinishRecording@PAGEOFF]</div><div class=\"line\">MOV             X0, X19</div><div class=\"line\">BL              _objc_msgSend</div><div class=\"line\">B               loc_102095288</div></pre></td></tr></table></figure>\n<p>其中<code>selRef_finishWriter</code>和<code>selRef_turnCancelBtnForFinishRecording</code>需要重点关注，这两个方法看上去都是小视频录制结束的意思，线索极有可能就在这两个函数中。通过查看调用者发现这两个方法都属于MainFrameSightViewController，继续在IDA中查看这两个方法。在<code>selRef_finishWriter</code>中靠近末尾0x102094248的位置发现一个方法名叫做<code>f_switchToSendingPanel</code>，下个断点，然后拍摄视频，发现这个方法并没有被触发。应该不是通过这个方法调用发布界面的，继续回到<code>selRef_finishWriter</code>方法中；在0x1020941DC的位置调用方法<code>selRef_stopRecording</code>，打印它的调用者发现这个方法属于<code>SightFacade</code>，继续在IDA中寻找这个方法的实现。在这个方法的0x101F9BED4位置又调用了<code>selRef_stopRecord</code>，同样打印调用者发现这个方法属于SightCaptureLogicF4，有点像剥洋葱，继续在寻找这个方法的实现。在这个方法内部0x101A98778位置又调用了<code>selRef_finishWriting</code>，同样的原理找到这个方法是属于SightMovieWriter。已经剥了3层了，继续往下：<br>在<code>SightMovieWriter - (void)finishWriting</code>中的0x10261D004位置分了两条线，这个位置下个断点，然后拍摄完小视频触发断点，打印x19的值  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x19</div><div class=\"line\">&lt;OS_dispatch_queue: CAPTURE.CALLBACK[0x13610bcd0] = &#123; xrefcnt = 0x4, refcnt = 0x4, suspend_cnt = 0x0, locked = 1, target = com.apple.root.default-qos.overcommit[0x1a0aa3700], width = 0x0, running = 0x0, barrier = 1 &#125;&gt;</div></pre></td></tr></table></figure>\n<p>所以代码不会跳转到loc_10261D054而是走的左侧，在左侧的代码中发现启用了一个block，这个block是子程序sub_10261D0AC，地址为0x10261D0AC，找到这个地址，结构如下图所示：<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E8%A7%86%E9%A2%91%E8%BD%AC%E5%8F%91sub_10261D0AC.png\" alt=\"sub_10261D0AC\"><br>可以看出来主要分两条线，我们在第一个方框的末尾也就是0x10261D108位置下个断点，等拍摄完毕触发断点之后打印x0的值为1，这里的汇编代码为  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">__text:000000010261D104                 CMP             X0, #2</div><div class=\"line\">__text:000000010261D108                 B.EQ            loc_10261D234</div></pre></td></tr></table></figure>\n<p>B.EQ是在上一步的结果为0才会跳转到loc_10261D234，但是这里的结果是不为0的，将x0的值改为2让上一步的结果为0  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x0</div><div class=\"line\">1</div><div class=\"line\">(lldb) register write $x0 2</div><div class=\"line\">(lldb) po $x0</div><div class=\"line\">2</div></pre></td></tr></table></figure>\n<p>此时放开断点，等待跳转到小视频发布界面，结果是一直卡在这个界面没有任何反应，所以猜测实现跳转的逻辑应该在右边的那条线，继续顺着右边的线寻找：<br>在右侧0x10261D3AC位置发现调用了下面的这个方法  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)finishWritingWithCompletionHandler:(void (^)(void))handler;</div></pre></td></tr></table></figure>\n<p>这个方法是系统提供的AVAssetWriter里面的方法，在视频写入完成之后要做的操作，这个里是要传入一个block的，因为只有一个参数所以对应的变量是x2，打印x2的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x2</div><div class=\"line\">&lt;__NSStackBlock__: 0x16e086c78&gt;</div><div class=\"line\">(lldb) memory read --size 8 --format x 0x16e086c78</div><div class=\"line\">0x16e086c78: 0x00000001a0aa5218 0x00000000c2000000</div><div class=\"line\">0x16e086c88: 0x00000001026d94b0 0x0000000102fc98c0</div><div class=\"line\">0x16e086c98: 0x0000000136229fd0 0x000000016e086d00</div><div class=\"line\">0x16e086ca8: 0x00000001997f5318 0xfffffffec9e882ff</div></pre></td></tr></table></figure>\n<p>并且通过栈内存找到block位置为0x10261D4B0（需要减去ASLR的偏移）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">sub_10261D4B0</div><div class=\"line\">var_20= -0x20</div><div class=\"line\">var_10= -0x10</div><div class=\"line\">STP             X20, X19, [SP,#var_20]!</div><div class=\"line\">STP             X29, X30, [SP,#0x20+var_10]</div><div class=\"line\">ADD             X29, SP, #0x20+var_10</div><div class=\"line\">MOV             X19, X0</div><div class=\"line\">LDR             X0, [X19,#0x20]</div><div class=\"line\">ADRP            X8, #selRef_stopAmr@PAGE</div><div class=\"line\">LDR             X1, [X8,#selRef_stopAmr@PAGEOFF]</div><div class=\"line\">BL              _objc_msgSend</div><div class=\"line\">LDR             X0, [X19,#0x20]</div><div class=\"line\">ADRP            X8, #selRef_compressAudio@PAGE</div><div class=\"line\">LDR             X1, [X8,#selRef_compressAudio@PAGEOFF]</div><div class=\"line\">LDP             X29, X30, [SP,#0x20+var_10]</div><div class=\"line\">LDP             X20, X19, [SP+0x20+var_20],#0x20</div><div class=\"line\">B               _objc_msgSend</div><div class=\"line\">; End of function sub_10261D4B0</div></pre></td></tr></table></figure>\n<p>只调用了两个方法，一个是<code>selRef_stopAmr</code>停止amr（一种音频格式），另一个是<code>selRef_compressAudio</code>压缩音频，拍摄完成的下一步操作应该不会放在这两个方法里面，找了这么久也没有头绪，这个路看来走不通了，不要钻牛角尖，战略性撤退寻找其他入口。<br><strong>逆向的乐趣就是一直寻找真相的路上，能体会到成功的乐趣，也有可能方向错了离真相反而越来越远，不要气馁调整方向继续前进！</strong></p>\n<h3 id=\"2-“另辟蹊径”\"><a href=\"#2-“另辟蹊径”\" class=\"headerlink\" title=\"2.“另辟蹊径”\"></a>2.“另辟蹊径”</h3><blockquote>\n<p>（由于微信在后台偷偷升级了，下面的内容都是微信6.3.30版本的ASLR，上面的分析基于6.3.28版本）</p>\n</blockquote>\n<p>注意到在点击朋友圈右上角的相机按钮底部会弹出一个Sheet，第一个就是Sight小视频，从这里入手，用cycript查看Sight按钮对应的事件是哪个  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">iPhone-5S:~ root# cycript -p &quot;WeChat&quot;</div><div class=\"line\">cy# [UIApp windows].toString()</div><div class=\"line\">`(</div><div class=\"line\">    &quot;&lt;iConsoleWindow: 0x14d6ccc00; baseClass = UIWindow; frame = (0 0; 320 568); autoresize = W+H; gestureRecognizers = &lt;NSArray: 0x14d7df110&gt;; layer = &lt;UIWindowLayer: 0x14d7d6f60&gt;&gt;&quot;,</div><div class=\"line\">    &quot;&lt;SvrErrorTipWindow: 0x14eaa5800; baseClass = UIWindow; frame = (0 0; 320 45); hidden = YES; gestureRecognizers = &lt;NSArray: 0x14e9e8950&gt;; layer = &lt;UIWindowLayer: 0x14e9e6510&gt;&gt;&quot;,</div><div class=\"line\">    &quot;&lt;UITextEffectsWindow: 0x14ec38ba0; frame = (0 0; 320 568); opaque = NO; autoresize = W+H; layer = &lt;UIWindowLayer: 0x14ec39360&gt;&gt;&quot;,</div><div class=\"line\">    &quot;&lt;UITextEffectsWindow: 0x14e9c67a0; frame = (0 0; 320 568); layer = &lt;UIWindowLayer: 0x14d683ff0&gt;&gt;&quot;,</div><div class=\"line\">    &quot;&lt;UIRemoteKeyboardWindow: 0x14f226e40; frame = (0 0; 320 568); opaque = NO; autoresize = W+H; layer = &lt;UIWindowLayer: 0x14d6f4de0&gt;&gt;&quot;,</div><div class=\"line\">    &quot;&lt;NewYearActionSheet: 0x14f1704a0; baseClass = UIWindow; frame = (0 0; 320 568); gestureRecognizers = &lt;NSArray: 0x14ef9bf90&gt;; layer = &lt;UIWindowLayer: 0x14ef61a20&gt;&gt;&quot;</div><div class=\"line\">)`</div><div class=\"line\">cy# [#0x14f1704a0 recursiveDescription].toString()</div></pre></td></tr></table></figure>\n<p>底部的Sheet是NewYearActionSheet，然后打印NewYearActionSheet的UI树状结构图（比较长不贴了）。然后找到Sight对应的UIButton是0x14f36d470   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy# [#0x14f36d470 allTargets]</div><div class=\"line\">[NSSet setWithArray:@[#&quot;&lt;NewYearActionSheet: 0x14f1704a0; baseClass = UIWindow; frame = (0 0; 320 568); gestureRecognizers = &lt;NSArray: 0x14ef9bf90&gt;; layer = &lt;UIWindowLayer: 0x14ef61a20&gt;&gt;&quot;]]]</div><div class=\"line\">cy# [#0x14f36d470 allControlEvents]</div><div class=\"line\">64</div><div class=\"line\">cy# [#0x14f36d470 actionsForTarget:#0x14f1704a0 forControlEvent:64]</div><div class=\"line\">@[&quot;OnDefaultButtonTapped:&quot;]</div></pre></td></tr></table></figure>\n<p>通过UIControl的<code>actionsForTarget:forControlEvent:</code>方法可以找到按钮绑定的事件，Sight按钮的触发方法为<code>OnDefaultButtonTapped:</code>，回到IDA中在NewYearActionSheet中找到这个方法们继续往下分析只有这个方法<code>selRef_dismissWithClickedButtonIndex_animated</code>，通过打印它的调用者发现还是NewYearActionSheet，继续点进去找到<code>newYearActionSheet_clickedButtonAtIndex</code>方法，看样子不是NewYearActionSheet自己的，打印调用者x0发现它属于类WCTimeLineViewController。跟着断点走下去在0x1012B78CC位置调用了方法<code>#selRef_showSightWindowForMomentWithMask_byViewController_scene</code><br>通过观察发现这个方法的调用者是0x1012B78AC这个位置的返回值x0，这是一个类SightFacade，猜测这个方法在SightFacade里面，去头文件里找一下果然发现这个方法  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)showSightWindowForMomentWithMask:(id)arg1 byViewController:(id)arg2 scene:(int)arg3;</div></pre></td></tr></table></figure>\n<p>这个方法应该就是跳转到小视频界面的方法了。下面分别打印它的参数  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x2</div><div class=\"line\">&lt;UIImage: 0x14f046660&gt;, &#123;320, 568&#125;</div><div class=\"line\">(lldb) po $x3</div><div class=\"line\">&lt;WCTimeLineViewController: 0x14e214800&gt;</div><div class=\"line\">(lldb) po $x4</div><div class=\"line\">2</div><div class=\"line\">(lldb) po $x0</div><div class=\"line\">&lt;SightFacade: 0x14f124b40&gt;</div></pre></td></tr></table></figure>\n<p>其中x2、x3、x4分别对应三个参数，x0是调用者，跳到这个方法内部查看怎么实现的。发现在这个方法中进行了小视频拍摄界面的初始化工作，首先初始化一个MainFrameSightViewController，再创建一个UINavigationController将MainFrameSightViewController放进去，接下来初始化一个MMWindowController调用  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (id)initWithViewController:(id)arg1 windowLevel:(int)arg2;</div></pre></td></tr></table></figure>\n<p>方法将UINavigationController放了进去，完成小视频拍摄界面的所有UI创建工作。<br>拍摄完成之后进入发布界面，此时用cycript找到当前的Controller是SightMomentEditViewController，由此萌生一个想法，跳过前面的拍摄界面直接进入发布界面不就可以了吗？我们自己创建一个SightMomentEditViewController然后放到UINavigationController里面，然后再将这个导航控制器放到MMWindowController里面。<strong>（这里我已经写好tweak进行了验证，具体的tweak思路编写在后文有）</strong>结果是的确可以弹出发布的界面，但是导航栏的NavgationBar遮住了原来的，整个界面是透明的，很难看，而且发布完成之后无法销毁整个MMWindowController，还是停留在发布界面。我们要的结果不是这个，不过确实有很大的收获，最起码可以直接调用发布界面了，小视频也能正常转发。我个人猜测，当前界面不能被销毁的原因是因为MMWindowController新建了一个window,它跟TimeLine所在的keyWindow不是同一个，SightMomentEditViewController的按钮触发的方法是没有办法销毁这个window的，所以有一个大胆的猜想，我直接在当前的WCTimeLineViewController上把SightMomentEditViewController展示出来不就可以了吗？  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[WCTimelineVC presentViewController:editSightVC animated:YES completion:^&#123;</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<p>像这样展示岂不妙哉？不过通过观察SightMomentEditViewController的头文件，结合小视频发布时界面上的元素，推测创建这个控制器至少需要两个属性，一个是小视频的路径，另一个是小视频的缩略图，将这两个关键属性给了SightMomentEditViewController那么应该就可以正常展示了   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">SightMomentEditViewController *editSightVC = [[%c(SightMomentEditViewController) alloc] init];</div><div class=\"line\">NSString *localPath = [[self iOSREMediaItemFromSight] pathForSightData];</div><div class=\"line\">UIImage *image = [[self valueForKey:@&quot;_sightView&quot;] getImage];</div><div class=\"line\">[editSightVC setRealMoviePath:localPath];</div><div class=\"line\">[editSightVC setMoviePath:localPath];</div><div class=\"line\">[editSightVC setRealThumbImage:image];</div><div class=\"line\">[editSightVC setThumbImage:image];</div><div class=\"line\">[WCTimelineVC presentViewController:editSightVC animated:YES completion:^&#123;</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<p>小视频的发布界面可以正常显示并且所有功能都可以正常使用，唯一的问题是返回按钮没有效果，并不能销毁SightMomentEditViewController。用cycript查看左侧按钮的actionEvent找到它的响应函数是<code>- (void)popSelf;</code>，点击左侧返回触发的是pop方法，但是这个控制器并不在navgationController里面，所以无效，我们要对这个方法进行重写  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)popSelf</div><div class=\"line\">&#123;</div><div class=\"line\">    [self dismissViewControllerAnimated:YES completion:^&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时再点击返回按钮就可以正常退出了，此外，在WCContentItemViewTemplateNewSight中发现了一个方法叫做<code>- (void)sendSightToFriend;</code>，可以直接将小视频转发给好友，至此小视频转发的功能已经找到了。</p>\n","excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>此文为逆向微信二进制文件，实现朋友圈小视频转发的教程，从最开始的汇编代码入手到最后重签名安装等操作，手把手教你玩转微信！学会之后再去逆向微信其他功能易如反掌。<br>本篇文章由于篇幅太长分成了两篇，<strong>上篇</strong>讲解的是逆向工作，也就是怎么找到相关的函数和方法实现，<strong>下篇</strong>讲解的是怎么在非越狱机重签名安装和越狱机tweak安装的详细过程。<br><strong>正文的第二部分还提供了微信自动抢红包、修改微信步数的代码，这些都可以照葫芦画瓢按照本文的套路一步步逆向找到，这里就不再赘述。</strong><br>在实践之前，需要准备好一部越狱的手机，然后将下文列出的所有工具安装好。IDA跟Reveal都是破解版，IDA的正版要2000多刀，对于这么牛逼的逆向工具确实物有所值，不过不是专门研究逆向的公司也没必要用正版的，下个Windows的破解版就好，Mac上暂时没找到。Mac上可以用hopper代替IDA，也是一款很牛逼的逆向工具。废话不多说，正式开始吧！</p>","more":"<h1 id=\"逆向微信朋友圈（上篇）\"><a href=\"#逆向微信朋友圈（上篇）\" class=\"headerlink\" title=\"逆向微信朋友圈（上篇）\"></a>逆向微信朋友圈（上篇）</h1><h2 id=\"一、获取朋友圈的小视频\"><a href=\"#一、获取朋友圈的小视频\" class=\"headerlink\" title=\"一、获取朋友圈的小视频\"></a>一、获取朋友圈的小视频</h2><blockquote>\n<p>   注意：本文逆向的微信的二进制文件为6.3.28版本，如果是不同的微信版本，二进制文件中的基地址也不相同</p>\n</blockquote>\n<h4 id=\"本文涉及到的工具\"><a href=\"#本文涉及到的工具\" class=\"headerlink\" title=\"本文涉及到的工具\"></a>本文涉及到的工具</h4><ol>\n<li><a href=\"http://www.cycript.org\">cycript</a> </li>\n<li>LLDB与debugserver（Xcode自带）</li>\n<li>OpenSSH</li>\n<li>IDA</li>\n<li>Reveal</li>\n<li><a href=\"https://github.com/theos/theos\">theos</a></li>\n<li><a href=\"http://www.cydiasubstrate.com\">CydiaSubstrate</a></li>\n<li>iOSOpenDev</li>\n<li>ideviceinstaller</li>\n<li>tcprelay（本地端口映射，USB连接SSH，不映射可通过WiFi连接） </li>\n<li><a href=\"https://github.com/stefanesser/dumpdecrypted\">dumpdecrypted</a></li>\n<li><a href=\"http://stevenygard.com/projects/class-dump/\">class-dump</a> </li>\n<li><a href=\"https://github.com/DanTheMan827/ios-app-signer\">iOS App Signer</a></li>\n<li>编译好的<a href=\"https://github.com/gaoshilei/yololib\">yololib</a></li>\n</ol>\n<p><strong>逆向环境为MacOS    +    iPhone5S 9.1越狱机</strong><br>先用dumpdecrypted给微信砸壳（不会的请我写的看<a href=\"http://www.gaoshilei.com/2016/07/17/dumpdecrypted给App砸壳/\">这篇教程</a>），获得一个WeChat.decrypted文件，先把这个文件扔到IDA中分析（60MB左右的二进制文件，IDA差不多40分钟才能分析完），用class-dump导出所有头文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ class-dump -S -s -H /Users/gaoshilei/Desktop/reverse/binary_for_class-dump/WeChat.decrypted -o /Users/gaoshilei/Desktop/reverse/binary_for_class-dump/class-Header/WeChat</div></pre></td></tr></table></figure>\n<p>我滴个亲娘！一共有8000个头文件，微信果然工程量浩大！稳定一下情绪，理一理思路继续搞。要取得小视频的下载链接，找到播放视频的View，顺藤摸瓜就能找到小视频的URL。用Reveal查看小视频的播放窗口<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E8%A7%86%E9%A2%91%E8%BD%AC%E5%8F%91Reveal.png\" alt=\"Reveal\"><br>可以看出来WCContentItemViewTemplateNewSigh这个对象是小视频的播放窗口，它的subView有WCSightView，SightView、SightPlayerView，这几个类就是我们的切入点。<br>保存视频到favorite的时候是长按视频弹出选项的，那么在WCContentItemViewTemplateNewSight这个类里面可能有手势相关的方法，去刚才导出的头文件中找线索。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)onLongTouch;</div><div class=\"line\">- (void)onLongPressedWCSight:(id)arg1;</div><div class=\"line\">- (void)onLongPressedWCSightFullScreenWindow:(id)arg1;</div></pre></td></tr></table></figure>\n<p>这几个方法跟长按手势相关，再去IDA中找到这些函数，逐个查看。onLongPressedWCSight和onLongPressedWCSightFullScreenWindow都比较简单，onLongTouch比较长，而且发现了内部调用了方法Favorites_Add，因为长按视频的时候出来一个选项就是Favorites，并且我看到这个函数调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ADRP            X8, #selRef_sightVideoPath@PAGE</div><div class=\"line\">LDR             X1, [X8,#selRef_sightVideoPath@PAGEOFF]</div></pre></td></tr></table></figure>\n<p>这里拿到了小视频的地址，可以推测这个函数跟收藏有关，下面打断点测试。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) im li -o -f</div><div class=\"line\">[  0] 0x000000000003c000 /var/mobile/Containers/Bundle/Application/2F1D52EC-C57E-4F95-B715-EF04351232E8/WeChat.app/WeChat(0x000000010003c000)</div></pre></td></tr></table></figure>\n<p>可以看到WeChat的ASLR为0x3c000，在IDA查找到这三个函数的基地址，分别下断点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) br s -a 0x1020D3A10+0x3c000</div><div class=\"line\">Breakpoint 1: where = WeChat`___lldb_unnamed_symbol110094$$WeChat + 28, address = 0x000000010210fa10</div><div class=\"line\">(lldb) br s -a 0x1020D3370+0x3c000</div><div class=\"line\">Breakpoint 2: where = WeChat`___lldb_unnamed_symbol110091$$WeChat + 8, address = 0x000000010210f370</div><div class=\"line\">(lldb) br s -a 0x1020D33E4+0x3c000</div><div class=\"line\">Breakpoint 3: where = WeChat`___lldb_unnamed_symbol110092$$WeChat + 12, address = 0x000000010210f3e4</div></pre></td></tr></table></figure>\n<p>回到微信里面长按小视频，看断点触发情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Process 3721 stopped</div><div class=\"line\">* thread #1: tid = 0x658fc, 0x000000010210f370 WeChat`___lldb_unnamed_symbol110091$$WeChat + 8, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 2.1</div><div class=\"line\">    frame #0: 0x000000010210f370 WeChat`___lldb_unnamed_symbol110091$$WeChat + 8</div><div class=\"line\">WeChat`___lldb_unnamed_symbol110091$$WeChat:</div><div class=\"line\">-&gt;  0x10210f370 &lt;+8&gt;:  add    x29, sp, #16              ; =16 </div><div class=\"line\">    0x10210f374 &lt;+12&gt;: mov    x19, x0</div><div class=\"line\">    0x10210f378 &lt;+16&gt;: adrp   x8, 4968</div><div class=\"line\">    0x10210f37c &lt;+20&gt;: ldr    x0, [x8, #744]</div><div class=\"line\">(lldb) c</div><div class=\"line\">Process 3721 resuming</div><div class=\"line\">Process 3721 stopped</div><div class=\"line\">* thread #1: tid = 0x658fc, 0x000000010210fa10 WeChat`___lldb_unnamed_symbol110094$$WeChat + 28, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 1.1</div><div class=\"line\">    frame #0: 0x000000010210fa10 WeChat`___lldb_unnamed_symbol110094$$WeChat + 28</div><div class=\"line\">WeChat`___lldb_unnamed_symbol110094$$WeChat:</div><div class=\"line\">-&gt;  0x10210fa10 &lt;+28&gt;: add    x29, sp, #96              ; =96 </div><div class=\"line\">    0x10210fa14 &lt;+32&gt;: sub    sp, sp, #96               ; =96 </div><div class=\"line\">    0x10210fa18 &lt;+36&gt;: mov    x19, x0</div><div class=\"line\">    0x10210fa1c &lt;+40&gt;: adrp   x8, 4863</div><div class=\"line\">……</div></pre></td></tr></table></figure>\n<p>发现断点2先被触发，接着触发断点1，后面断点2和1又各触发了1次，断点3一直很安静。可以排除onLongPressedWCSightFullScreenWindow与收藏小视频的联系。小视频的踪影就要在剩下的两个方法中寻找了。通过V找到C，顺藤摸瓜找到M屡试不爽！用cycript注入WeChat，拿到播放小视频的view所在的Controller。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy# [#0x138c18030 nextResponder]</div><div class=\"line\">#&quot;&lt;WCTimeLineCellView: 0x138c34620; frame = (0 0; 319 249); tag = 1048577; layer = &lt;CALayer: 0x138362ba0&gt;&gt;&quot;</div><div class=\"line\">cy# [#0x138c34620 nextResponder]</div><div class=\"line\">#&quot;&lt;UITableViewCellContentView: 0x138223c70; frame = (0 0; 320 256); gestureRecognizers = &lt;NSArray: 0x1384ec480&gt;; layer = &lt;CALayer: 0x138081dc0&gt;&gt;&quot;</div><div class=\"line\">cy# [#0x138223c70 nextResponder]</div><div class=\"line\">#&quot;&lt;MMTableViewCell: 0x138c9f930; baseClass = UITableViewCell; frame = (0 307; 320 256); autoresize = W; layer = &lt;CALayer: 0x1382dcd10&gt;&gt;&quot;</div><div class=\"line\">cy# [#0x138c9f930 nextResponder]</div><div class=\"line\">#&quot;&lt;UITableViewWrapperView: 0x137b57800; frame = (0 0; 320 504); gestureRecognizers = &lt;NSArray: 0x1383db660&gt;; layer = &lt;CALayer: 0x138af20c0&gt;; contentOffset: &#123;0, 0&#125;; contentSize: &#123;320, 504&#125;&gt;&quot;</div><div class=\"line\">cy# [#0x137b57800 nextResponder]</div><div class=\"line\">#&quot;&lt;MMTableView: 0x137b8ae00; baseClass = UITableView; frame = (0 0; 320 568); gestureRecognizers = &lt;NSArray: 0x138adb590&gt;; layer = &lt;CALayer: 0x138956890&gt;; contentOffset: &#123;0, 99.5&#125;; contentSize: &#123;320, 3193&#125;&gt;&quot;</div><div class=\"line\">cy# [#0x137b8ae00 nextResponder]</div><div class=\"line\">#&quot;&lt;UIView: 0x138ade5c0; frame = (0 0; 320 568); autoresize = W+H; layer = &lt;CALayer: 0x138ac9990&gt;&gt;&quot;</div><div class=\"line\">cy# [#0x138ade5c0 nextResponder]</div><div class=\"line\">#&quot;&lt;WCTimeLineViewController: 0x1379eb000&gt;&quot;</div></pre></td></tr></table></figure>\n<p>通过响应者链条找到<br>WCContentItemViewTemplateNewSight所属的Controller为WCTimeLineViewController。在这个类的头文件中并没有发现有价值的线索，不过我们注意到小视频所在的view是属于MMTableVIewCell的（见上图Reveal分析图），这是每一个iOS最熟悉的TableView，cell的数据是通过UITableViewDataSource的代理方法<code>- tableView:cellForRowAtIndexPath:</code>赋值的，通过这个方法肯定能知道到M的影子。在IDA中找到<code>[WCTimeLineViewController tableView:cellForRowAtIndexPath:]</code>,定位到基地址0x10128B6B0位置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">__text:000000010128B6B0     ADRP     X8, #selRef_genNormalCell_indexPath_@PAGE</div></pre></td></tr></table></figure>\n<p>这里的函数是WCTimeLineViewController中生成cell的方法，除了这个方法在这个类中还有另外三个生成cell的方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)genABTestTipCell:(id)arg1 indexPath:(id)arg2;</div><div class=\"line\">- (void)genRedHeartCell:(id)arg1 indexPath:(id)arg2;</div><div class=\"line\">- (void)genUploadFailCell:(id)arg1 indexPath:(id)arg2;</div></pre></td></tr></table></figure>\n<p>通过字面意思可以猜测出normal这个应该是生成小视频cell的方法。继续在IDA中寻找线索</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">__text:0000000101287CC8     ADRP     X8, #selRef_getTimelineDataItemOfIndex_@PAGE</div></pre></td></tr></table></figure>\n<p>在<code>genNormalCell:IndexPath:</code>方法中发现上面这个方法，可以大胆猜想这个方法是获取TimeLine（朋友圈）数据的方法，那小视频的数据肯定也是通过这个方法获取的，并且IDA可以看到这个方法中调用一个叫做<code>selRef_getTimelineDataItemOfIndex_</code>的方法，获取DataItem貌似就是cell的数据源啊！接下来用LLDB下断点验证猜想。<br>通过IDA可以找到这个方法对应的基地址为：0x101287CE4，先打印正在运行WeChat的ASLR偏移</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ lldb</div><div class=\"line\">(lldb) process connect connect://localhost:1234</div><div class=\"line\">(lldb) im li -o -f </div><div class=\"line\">[0] 0x0000000000050000 /var/mobile/Containers/Bundle/Application/2DCE8F30-9B6B-4652-901C-37EB1FF2A40D/WeChat.app/WeChat(0x0000000100050000)</div></pre></td></tr></table></figure>\n<p>所以我们下断点的位置是0x50000+0x101287CE4</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) br s -a 0x50000+0x101287CE4</div><div class=\"line\">Breakpoint 1: where = WeChat`___lldb_unnamed_symbol63721$$WeChat + 252, address = 0x00000001012d7ce4</div></pre></td></tr></table></figure>\n<p>打印x0的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x0</div><div class=\"line\">Class name: WCDataItem, addr: 0x15f5f03b0</div><div class=\"line\">tid: 12393001887435993280</div><div class=\"line\">username: wxid_z8twcz4o18fg12</div><div class=\"line\">createtime: 1477360950</div><div class=\"line\">commentUsers: (</div><div class=\"line\">)</div><div class=\"line\">contentObj: &lt;WCContentItem: 0x15f57d000&gt;</div></pre></td></tr></table></figure>\n<p>得到一个WCDataItem的对象，这里x0的值就是<code>selRef_getTimelineDataItemOfIndex_</code>执行完的返回值，然后把x0的值改掉</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) register write $x0 0</div><div class=\"line\">(lldb) c</div></pre></td></tr></table></figure>\n<p>此时会发现我们要刷新的那条小视频内容全部为空<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E8%A7%86%E9%A2%91-%E8%BD%AC%E5%8F%91%E5%B0%8F%E8%A7%86%E9%A2%91%E4%B8%BA%E7%A9%BA.jpg\" alt=\"小视频内容为空\"><br>到这里已经找到了小视频的源数据获取方法，问题是我们怎么拿到这个WCDataItem呢？继续看IDA分析函数的调用情况：  </p>\n<blockquote>\n<p>   WCTimeLineViewController - (void)genNormalCell:(id) indexPath:(id)  </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\">__text:0000000101287BCC                 STP             X28, X27, [SP,#var_60]!</div><div class=\"line\">__text:0000000101287BD0                 STP             X26, X25, [SP,#0x60+var_50]</div><div class=\"line\">__text:0000000101287BD4                 STP             X24, X23, [SP,#0x60+var_40]</div><div class=\"line\">__text:0000000101287BD8                 STP             X22, X21, [SP,#0x60+var_30]</div><div class=\"line\">__text:0000000101287BDC                 STP             X20, X19, [SP,#0x60+var_20]</div><div class=\"line\">__text:0000000101287BE0                 STP             X29, X30, [SP,#0x60+var_10]</div><div class=\"line\">__text:0000000101287BE4                 ADD             X29, SP, #0x60+var_10</div><div class=\"line\">__text:0000000101287BE8                 SUB             SP, SP, #0x80</div><div class=\"line\">__text:0000000101287BEC                 MOV             X19, X3</div><div class=\"line\">__text:0000000101287BF0                 MOV             X22, X0</div><div class=\"line\">__text:0000000101287BF4                 MOV             W25, #0x100000</div><div class=\"line\">__text:0000000101287BF8                 MOVK            W25, #1</div><div class=\"line\">__text:0000000101287BFC                 MOV             X0, X2</div><div class=\"line\">__text:0000000101287C00                 BL              _objc_retain</div><div class=\"line\">__text:0000000101287C04                 MOV             X28, X0</div><div class=\"line\">__text:0000000101287C08                 MOV             X0, X19</div><div class=\"line\">__text:0000000101287C0C                 BL              _objc_retain</div><div class=\"line\">__text:0000000101287C10                 MOV             X20, X0</div><div class=\"line\">__text:0000000101287C14                 STR             X20, [SP,#0xE0+var_98]</div><div class=\"line\">__text:0000000101287C18                 ADRP            X8, #selRef_row@PAGE</div><div class=\"line\">__text:0000000101287C1C                 LDR             X1, [X8,#selRef_row@PAGEOFF]</div><div class=\"line\">__text:0000000101287C20                 BL              _objc_msgSend</div><div class=\"line\">__text:0000000101287C24                 MOV             X26, X0</div><div class=\"line\">__text:0000000101287C28                 ADRP            X8, #selRef_section@PAGE</div><div class=\"line\">__text:0000000101287C2C                 LDR             X19, [X8,#selRef_section@PAGEOFF]</div><div class=\"line\">__text:0000000101287C30                 MOV             X0, X20</div><div class=\"line\">__text:0000000101287C34                 MOV             X1, X19</div><div class=\"line\">__text:0000000101287C38                 BL              _objc_msgSend</div><div class=\"line\">__text:0000000101287C3C                 STR             X0, [SP,#0xE0+var_A8]</div><div class=\"line\">__text:0000000101287C40                 MOV             X0, X20</div><div class=\"line\">__text:0000000101287C44                 MOV             X1, X19</div><div class=\"line\">__text:0000000101287C48                 BL              _objc_msgSend</div><div class=\"line\">__text:0000000101287C4C                 MOV             X2, X0</div><div class=\"line\">__text:0000000101287C50                 ADRP            X8, #selRef_calcDataItemIndex_@PAGE</div><div class=\"line\">__text:0000000101287C54                 LDR             X1, [X8,#selRef_calcDataItemIndex_@PAGEOFF]</div><div class=\"line\">__text:0000000101287C58                 MOV             X0, X22</div><div class=\"line\">__text:0000000101287C5C                 BL              _objc_msgSend</div><div class=\"line\">__text:0000000101287C60                 MOV             X21, X0</div><div class=\"line\">__text:0000000101287C64                 STR             X21, [SP,#0xE0+var_C0]</div><div class=\"line\">__text:0000000101287C68                 ADRP            X8, #classRef_MMServiceCenter@PAGE</div><div class=\"line\">__text:0000000101287C6C                 LDR             X0, [X8,#classRef_MMServiceCenter@PAGEOFF]</div><div class=\"line\">__text:0000000101287C70                 ADRP            X8, #selRef_defaultCenter@PAGE</div><div class=\"line\">__text:0000000101287C74                 LDR             X1, [X8,#selRef_defaultCenter@PAGEOFF]</div><div class=\"line\">__text:0000000101287C78                 STR             X1, [SP,#0xE0+var_B8]</div><div class=\"line\">__text:0000000101287C7C                 BL              _objc_msgSend</div><div class=\"line\">__text:0000000101287C80                 MOV             X29, X29</div><div class=\"line\">__text:0000000101287C84                 BL              _objc_retainAutoreleasedReturnValue</div><div class=\"line\">__text:0000000101287C88                 MOV             X19, X0</div><div class=\"line\">__text:0000000101287C8C                 ADRP            X8, #classRef_WCFacade@PAGE</div><div class=\"line\">__text:0000000101287C90                 LDR             X0, [X8,#classRef_WCFacade@PAGEOFF]</div><div class=\"line\">__text:0000000101287C94                 ADRP            X8, #selRef_class@PAGE</div><div class=\"line\">__text:0000000101287C98                 LDR             X1, [X8,#selRef_class@PAGEOFF]</div><div class=\"line\">__text:0000000101287C9C                 STR             X1, [SP,#0xE0+var_B0]</div><div class=\"line\">__text:0000000101287CA0                 BL              _objc_msgSend</div><div class=\"line\">__text:0000000101287CA4                 MOV             X2, X0</div><div class=\"line\">__text:0000000101287CA8                 ADRP            X8, #selRef_getService_@PAGE</div><div class=\"line\">__text:0000000101287CAC                 LDR             X1, [X8,#selRef_getService_@PAGEOFF]</div><div class=\"line\">__text:0000000101287CB0                 STR             X1, [SP,#0xE0+var_A0]</div><div class=\"line\">__text:0000000101287CB4                 MOV             X0, X19</div><div class=\"line\">__text:0000000101287CB8                 BL              _objc_msgSend</div><div class=\"line\">__text:0000000101287CBC                 MOV             X29, X29</div><div class=\"line\">__text:0000000101287CC0                 BL              _objc_retainAutoreleasedReturnValue</div><div class=\"line\">__text:0000000101287CC4                 MOV             X20, X0</div><div class=\"line\">__text:0000000101287CC8                 ADRP            X8, #selRef_getTimelineDataItemOfIndex_@PAGE</div><div class=\"line\">__text:0000000101287CCC                 LDR             X1, [X8,#selRef_getTimelineDataItemOfIndex_@PAGEOFF]</div><div class=\"line\">__text:0000000101287CD0                 STR             X1, [SP,#0xE0+var_C8]</div><div class=\"line\">__text:0000000101287CD4                 MOV             X2, X21</div><div class=\"line\">__text:0000000101287CD8                 BL              _objc_msgSend</div><div class=\"line\">__text:0000000101287CDC                 MOV             X29, X29</div><div class=\"line\">__text:0000000101287CE0                 BL              _objc_retainAutoreleasedReturnValue</div><div class=\"line\">__text:0000000101287CE4                 MOV             X21, X0</div><div class=\"line\">__text:0000000101287CE8                 MOV             X0, X20</div><div class=\"line\">......</div></pre></td></tr></table></figure>\n<p><code>selRef_getTimelineDataItemOfIndex_</code>传入的参数是x2，可以看到传值给x2的x21是函数<code>selRef_calcDataItemIndex_</code>的返回值，是一个unsigned long数据类型。继续分析，<code>selRef_getTimelineDataItemOfIndex_</code>函数的调用者是上一步<code>selRef_getService_</code>的返回值，经过断点分析发现是一个<code>WCFacade</code>对象。整理一下<code>selRef_getTimelineDataItemOfIndex_</code>的调用：<br><strong>调用者是<code>selRef_getService_</code>的返回值；参数是<code>selRef_calcDataItemIndex_</code>的返回值</strong><br>下面把目光转向那两个函数，用相同的原理分析它们各自怎么实现调用  </p>\n<ol>\n<li>先看<code>selRef_getService_</code>：<br>在0x101287CB4这个位置可以发现，这个函数的调用者是从通过x19 MOV的，打印x19发现是一个<code>MMServiceCenter</code>对象，往上找x19是在0x101287C88这个位置赋值的，结果很清晰x19是<code>[MMServiceCenter defaultCenter]</code>的返回值。<br>在0x101287CA4位置可以找到传入的参数x2，往上分析可以看出来它的参数是<code>[WCFacade class]</code>的返回值。  </li>\n<li>接着找<code>selRef_calcDataItemIndex_</code>：<br>在0x101287C58的位置找到它的调用者x0，x0通过x22赋值，继续向上寻找，发现在最上面0x101287BF0的位置，x22是x0赋值的，一开始的x0就是<code>WCTimeLineViewController</code>自身。<br>在0x101287C4C位置发现传入的参数来自x2,x2是通过上一步<code>selRef_section</code>函数的返回值x0赋值的，在0x101287C30位置可以发现<code>selRef_section</code>函数的调用者是x20赋值的，如下图所示，最终找到<code>selRef_section</code>的调用者是x3<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E8%A7%86%E9%A2%91%E8%BD%AC%E5%8F%91-selRef_section%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E8%80%85.png\" alt=\"selRef_section函数的调用者\"><br>x3就是函数<code>WCTimeLineViewController - (void)genNormalCell:(id) indexPath:(id)</code>的第二个参数indexPath,，所以<code>selRef_calcDataItemIndex_</code>的参数是<code>[IndexPath section]</code>。<br>对上面的分析结果做个梳理：<br>因此<code>getTimelineDataItemOfIndex:</code>的调用者可以通过</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[MMServiceCenter defaultCenter] getService:[WCFacade class]]</div></pre></td></tr></table></figure>\n<p>来获得,它的参数可以通过下面的函数获取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[WCTimeLineViewController calcDataItemIndex:[indexPath section]]</div></pre></td></tr></table></figure>\n<p>总感觉还少点什么？indexPath我们还没拿到呢！下一步就是拿到indexPath,这个就比较简单了，因为我们位于<code>[WCContentItemViewTemplateNewSight onLongTouch]</code>中，所以可以通过<code>[self nextResponder]</code>依次拿到MMTableViewCell、MMTableView和WCTimeLineViewController，再通过<code>[MMTableView indexPathForCell:MMTableViewCell]</code>拿到indexPath。<br>做完这些，已经拿到WCDataItem对象，接下来的重点要放在WCDataItem上，最终要获取我们要的小视频。到这个类的头文件中找线索，因为视频是下载完成后才能播放的，所以这里应该拿到了视频的路径，所以要注意url和path相关的属性或方法，然后找到下面这几个嫌疑对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@property(retain, nonatomic) NSString *sourceUrl2; </div><div class=\"line\">@property(retain, nonatomic) NSString *sourceUrl; </div><div class=\"line\">- (id)descriptionForKeyPaths;</div><div class=\"line\">- (id)keyPaths;</div></pre></td></tr></table></figure>\n<p>回到LLDB中，用断点打印这些值，看看有什么。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po [$x0 keyPaths]</div><div class=\"line\">&lt;__NSArrayI 0x15f74e9d0&gt;(</div><div class=\"line\">\ttid,</div><div class=\"line\">\tusername,</div><div class=\"line\">\tcreatetime,</div><div class=\"line\">\tcommentUsers,</div><div class=\"line\">\tcontentObj</div><div class=\"line\">)</div><div class=\"line\">(lldb) po [$x0 descriptionForKeyPaths]</div><div class=\"line\">Class name: WCDataItem, addr: 0x15f5f03b0</div><div class=\"line\">tid: 12393001887435993280</div><div class=\"line\">username: wxid_z8twcz4o18fg12</div><div class=\"line\">createtime: 1477360950</div><div class=\"line\">commentUsers: (</div><div class=\"line\">)</div><div class=\"line\">contentObj: &lt;WCContentItem: 0x15f57d000&gt;</div><div class=\"line\">(lldb) po [$x0 sourceUrl]</div><div class=\"line\"> nil</div><div class=\"line\">(lldb) po [$x0 sourceUrl2]</div><div class=\"line\"> nil</div></pre></td></tr></table></figure>\n<p>并没有什么有价值的线索，不过注意到WCDataItem里面有一个WCContentItem，看来只能从这儿入手了，去看一下头文件吧！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@property(retain, nonatomic) NSString *linkUrl; </div><div class=\"line\">@property(retain, nonatomic) NSString *linkUrl2; </div><div class=\"line\">@property(retain, nonatomic) NSMutableArray *mediaList;</div></pre></td></tr></table></figure>\n<p>在LLDB打印出来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po [[$x0 valueForKey:@&quot;contentObj&quot;] linkUrl]</div><div class=\"line\">https://support.weixin.qq.com/cgi-bin/mmsupport-bin/readtemplate?t=page/common_page__upgrade&amp;v=1</div><div class=\"line\">(lldb) po [[$x0 valueForKey:@&quot;contentObj&quot;] linkUrl2]</div><div class=\"line\"> nil</div><div class=\"line\">(lldb) po [[$x0 valueForKey:@&quot;contentObj&quot;] mediaList]</div><div class=\"line\">&lt;__NSArrayM 0x15f985e10&gt;(</div><div class=\"line\">&lt;WCMediaItem: 0x15dfebdf0&gt;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>mediaList数组里面有一个WCMediaItem对象，Media一般用来表示视频和音频，大胆猜测就是它了！赶紧找到头文件搜索一遍。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@property(retain, nonatomic) WCUrl *dataUrl;</div><div class=\"line\">- (id)pathForData;</div><div class=\"line\">- (id)pathForSightData;</div><div class=\"line\">- (id)pathForTempAttachVideoData;</div><div class=\"line\">- (id)videoStreamForData;</div></pre></td></tr></table></figure>\n<p>上面这些属性和方法中<code>pathForSightData</code>是最有可能拿到小视频路径的，继续验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po [[[[$x0 valueForKey:@&quot;contentObj&quot;] mediaList] lastObject] dataUrl]</div><div class=\"line\">type[1], url[http://vweixinf.tc.qq.com/102/20202/snsvideodownload?filekey=30270201010420301e020166040253480410d14adcddf086f4e131d11a5b1cca1bdf0203039fa00400&amp;bizid=1023&amp;hy=SH&amp;fileparam=302c0201010425302302040fde55e20204580ebd3602024eea02031e8d7d02030f42400204d970370a0201000400], enckey[0], encIdx[-1], token[]</div><div class=\"line\">(lldb) po [[[[$x0 valueForKey:@&quot;contentObj&quot;] mediaList] lastObject] pathForData]</div><div class=\"line\">/var/mobile/Containers/Data/Application/7C3A6322-1F57-49A0-ACDE-6EF0ED74D137/Library/WechatPrivate/6f696a1b596ce2499419d844f90418aa/wc/media/5/53/8fb0cdd77208de5b56169fb3458b45</div><div class=\"line\">(lldb) po [[[[$x0 valueForKey:@&quot;contentObj&quot;] mediaList] lastObject] pathForSightData]</div><div class=\"line\">/var/mobile/Containers/Data/Application/7C3A6322-1F57-49A0-ACDE-6EF0ED74D137/Library/WechatPrivate/6f696a1b596ce2499419d844f90418aa/wc/media/5/53/8fb0cdd77208de5b56169fb3458b45.mp4</div><div class=\"line\">(lldb) po [[[[$x0 valueForKey:@&quot;contentObj&quot;] mediaList] lastObject] pathForAttachVideoData]</div><div class=\"line\"> nil</div><div class=\"line\">(lldb) po [[[[$x0 valueForKey:@&quot;contentObj&quot;] mediaList] lastObject] videoStreamForData]</div><div class=\"line\"> nil</div></pre></td></tr></table></figure>\n<p>拿到小视频的网络url和本地路径了！这里可以用iFunBox或者scp从沙盒拷贝这个文件看看是不是这个cell应该播放的小视频。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ scp root@192.168.0.115:/var/mobile/Containers/Data/Application/7C3A6322-1F57-49A0-ACDE-6EF0ED74D137/Library/WechatPrivate/6f696a1b596ce2499419d844f90418aa/wc/media/5/53/8fb0cdd77208de5b56169fb3458b45.mp4 Desktop/</div><div class=\"line\">8fb0cdd77208de5b56169fb3458b45.mp4                100%  232KB 231.9KB/s   00:00</div></pre></td></tr></table></figure>\n<p>用QuickTime打开发现果然是我们要寻找的小视频。再验证一下url是否正确，把上面打印的dataUrl在浏览器中打开，发现也是这个小视频。分析这个类可以得出下面的结论：  </p>\n<ul>\n<li><strong>dataUrl：</strong>小视频的网络url</li>\n<li><strong>pathForData：</strong>小视频的本地路径</li>\n<li><strong>pathForSightData：</strong>小视频的本地路径（不带后缀）</li>\n</ul>\n<p>至此小视频的路径和取得方式分析已经完成，要实现转发还要继续分析微信的朋友圈发布。</p>\n<h2 id=\"二、实现转发功能\"><a href=\"#二、实现转发功能\" class=\"headerlink\" title=\"二、实现转发功能\"></a>二、实现转发功能</h2><h3 id=\"1-“走进死胡同”\"><a href=\"#1-“走进死胡同”\" class=\"headerlink\" title=\"1.“走进死胡同”\"></a>1.“走进死胡同”</h3><blockquote>\n<p>   这节是我在找小视频转发功能时走的弯路，扒到最后并没有找到实现方法，不过也提供了一些逆向中常用的思路和方法，不想看的可以跳到第二节。  </p>\n</blockquote>\n<h4 id=\"（1）找到小视频拍摄完成调用的方法名称\"><a href=\"#（1）找到小视频拍摄完成调用的方法名称\" class=\"headerlink\" title=\"（1）找到小视频拍摄完成调用的方法名称\"></a>（1）找到小视频拍摄完成调用的方法名称</h4><p>打开小视频的拍摄界面，用cycript注入，我们要找到发布小视频的方法是哪个，然后查看当前的窗口有哪些window（因为小视频的拍摄并不是在UIApplication的keyWindow中进行的）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy# [UIApp windows].toString()</div><div class=\"line\">(</div><div class=\"line\">    &quot;&lt;iConsoleWindow: 0x125f75e20; baseClass = UIWindow; frame = (0 0; 320 568); autoresize = W+H; gestureRecognizers = &lt;NSArray: 0x125f77b70&gt;; layer = &lt;UIWindowLayer: 0x125df4810&gt;&gt;&quot;,</div><div class=\"line\">    &quot;&lt;SvrErrorTipWindow: 0x127414d40; baseClass = UIWindow; frame = (0 64; 320 45); hidden = YES; gestureRecognizers = &lt;NSArray: 0x12740d930&gt;; layer = &lt;UIWindowLayer: 0x1274030b0&gt;&gt;&quot;,</div><div class=\"line\">    &quot;&lt;MMUIWindow: 0x127796440; baseClass = UIWindow; frame = (0 0; 320 568); gestureRecognizers = &lt;NSArray: 0x1278083c0&gt;; layer = &lt;UIWindowLayer: 0x127796750&gt;&gt;&quot;,</div><div class=\"line\">    &quot;&lt;UITextEffectsWindow: 0x1270e0d40; frame = (0 0; 320 568); opaque = NO; autoresize = W+H; layer = &lt;UIWindowLayer: 0x1270b4ba0&gt;&gt;&quot;,</div><div class=\"line\">    &quot;&lt;NewYearActionSheet: 0x127797e10; baseClass = UIWindow; frame = (0 0; 320 568); hidden = YES; userInteractionEnabled = NO; layer = &lt;UIWindowLayer: 0x1277d5490&gt;&gt;&quot;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>发现当前页面一共有5个window，其中MMUIWindow是小视频拍摄所在的window，打印它的UI树状结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy# [#0x127796440 recursiveDescription]</div></pre></td></tr></table></figure>\n<p>打印结果比较长，不贴了。找到这个按钮是拍摄小视频的按钮</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">|    |    |    |    |    | &lt;UIButton: 0x1277a9d70; frame = (89.5 368.827; 141 141); opaque = NO; gestureRecognizers = &lt;NSArray: 0x1277aaeb0&gt;; layer = &lt;CALayer: 0x1277a9600&gt;&gt;</div><div class=\"line\">|    |    |    |    |    |    | &lt;UIView: 0x1277aa0a0; frame = (0 0; 141 141); userInteractionEnabled = NO; tag = 252707333; layer = &lt;CALayer: 0x1277aa210&gt;&gt;</div><div class=\"line\">|    |    |    |    |    |    |    | &lt;UIImageView: 0x1277aa2e0; frame = (0 0; 141 141); opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x1277aa490&gt;&gt;</div></pre></td></tr></table></figure>\n<p>然后执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy# [#0x1277a9d70 setHidden:YES]</div></pre></td></tr></table></figure>\n<p>发现拍摄的按钮消失了，验证了我的猜想。寻找按钮的响应事件，可以通过target来寻找</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy# [#0x1277a9d70 allTargets]</div><div class=\"line\">[NSSet setWithArray:@[#&quot;&lt;MainFrameSightViewController: 0x1269a4600&gt;&quot;]]]</div><div class=\"line\">cy# [#0x1277a9d70 allControlEvents]</div><div class=\"line\">193</div><div class=\"line\">cy# [#0x1277a9d70 actionsForTarget:#0x1269a4600 forControlEvent:193]</div><div class=\"line\">null</div></pre></td></tr></table></figure>\n<p>发现按钮并没有对应的action，这就奇怪了！UIButton必须要有target和action，不然这个Button不能响应事件。我们试试其他的ControlEvent</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy# [#0x1277a9d70 actionsForTarget:#0x1269a4600 forControlEvent:UIControlEventTouchDown]</div><div class=\"line\">@[&quot;btnPress&quot;]</div><div class=\"line\">cy# [#0x1277a9d70 actionsForTarget:#0x1269a4600 forControlEvent:UIControlEventTouchUpOutside]</div><div class=\"line\">@[&quot;btnRelease&quot;]</div><div class=\"line\">cy# [#0x1277a9d70 actionsForTarget:#0x1269a4600 forControlEvent:UIControlEventTouchUpInside]</div><div class=\"line\">@[&quot;btnRelease&quot;]</div></pre></td></tr></table></figure>\n<p>结果发现这三个ContrlEvent有对应的action，我们再看看这三个枚举的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">typedef enum UIControlEvents : NSUInteger &#123;</div><div class=\"line\">    UIControlEventTouchDown = 1 &lt;&lt;  0,</div><div class=\"line\">    UIControlEventTouchDownRepeat = 1 &lt;&lt;  1,</div><div class=\"line\">    UIControlEventTouchDragInside = 1 &lt;&lt;  2,</div><div class=\"line\">    UIControlEventTouchDragOutside = 1 &lt;&lt;  3,</div><div class=\"line\">    UIControlEventTouchDragEnter = 1 &lt;&lt;  4,</div><div class=\"line\">    UIControlEventTouchDragExit = 1 &lt;&lt;  5,</div><div class=\"line\">    UIControlEventTouchUpInside = 1 &lt;&lt;  6,</div><div class=\"line\">    UIControlEventTouchUpOutside = 1 &lt;&lt;  7,</div><div class=\"line\">    UIControlEventTouchCancel = 1 &lt;&lt;  8,</div><div class=\"line\">\t......</div><div class=\"line\">&#125; UIControlEvents;</div></pre></td></tr></table></figure>\n<p>可以看出来UIControlEventTouchDown对应1，UIControlEventTouchUpInside对应128，UIControlEventTouchUpOutside对应64，三者相加正好193！原来调用<code>[#0x1277a9d70 allControlEvents]</code>的时候返回的应该是枚举，有多个枚举则把它们的值相加，是不是略坑？我也是这样觉得的！刚才我们把三种ControlEvent对应的action都打印出来了，继续LLDB+IDA进行动态分析。</p>\n<h4 id=\"（2）找到小视频拍摄完成跳转到发布界面的方法\"><a href=\"#（2）找到小视频拍摄完成跳转到发布界面的方法\" class=\"headerlink\" title=\"（2）找到小视频拍摄完成跳转到发布界面的方法\"></a>（2）找到小视频拍摄完成跳转到发布界面的方法</h4><p>因为要找到小视频发布的方法，所以对应的<code>btnPress</code>函数我们并不关心，把重点放在<code>btnRelease</code>上面，拍摄按钮松开后就会调用的方法。在IDA中找到这个方法<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E8%A7%86%E9%A2%91%E8%BD%AC%E5%8F%91-btnRelease.png\" alt=\"MainFrameSightViewController - (void)btnRelease\"><br>找到之后下个断点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) br s -a 0xac000+0x10209369C</div><div class=\"line\">Breakpoint 4: where = WeChat`___lldb_unnamed_symbol108894$$WeChat + 32, address = 0x000000010213f69c</div><div class=\"line\">Process 3813 stopped</div><div class=\"line\">* thread #1: tid = 0xf1ef0, 0x000000010213f69c WeChat`___lldb_unnamed_symbol108894$$WeChat + 32, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 4.1</div><div class=\"line\">    frame #0: 0x000000010213f69c WeChat`___lldb_unnamed_symbol108894$$WeChat + 32</div><div class=\"line\">WeChat`___lldb_unnamed_symbol108894$$WeChat:</div><div class=\"line\">-&gt;  0x10213f69c &lt;+32&gt;: bl     0x1028d0b60               ; symbol stub for: objc_msgSend</div><div class=\"line\">    0x10213f6a0 &lt;+36&gt;: cmp    w0, #2                    ; =2 </div><div class=\"line\">    0x10213f6a4 &lt;+40&gt;: b.ne   0x10213f6dc               ; &lt;+96&gt;</div><div class=\"line\">    0x10213f6a8 &lt;+44&gt;: adrp   x8, 5489</div></pre></td></tr></table></figure>\n<p>用手机拍摄小视频然后松开，触发了断点，说明我们的猜想是正确的。继续分析发现代码是从上图的右边走的，看了一下没有什么方法是跳转到发布视频的，不过仔细看一下有一个block，是系统的延时block，位置在0x102093760。然后我们跟着断点进去，在0x1028255A0跳转到x16所存的地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) si</div><div class=\"line\">Process 3873 stopped</div><div class=\"line\">* thread #1: tid = 0xf62c4, 0x00000001028d9598 WeChat`dispatch_after, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step into</div><div class=\"line\">    frame #0: 0x00000001028d9598 WeChat`dispatch_after</div><div class=\"line\">WeChat`dispatch_after:</div><div class=\"line\">-&gt;  0x1028d9598 &lt;+0&gt;: adrp   x16, 1655</div><div class=\"line\">    0x1028d959c &lt;+4&gt;: ldr    x16, [x16, #1056]</div><div class=\"line\">    0x1028d95a0 &lt;+8&gt;: br     x16</div><div class=\"line\"></div><div class=\"line\">WeChat`dispatch_apply:</div><div class=\"line\">    0x1028d95a4 &lt;+0&gt;: adrp   x16, 1655</div><div class=\"line\">(lldb) po $x2</div><div class=\"line\">&lt;__NSStackBlock__: 0x16fd49f88&gt;</div></pre></td></tr></table></figure>\n<p>发现传入的参数x2是一个block，我们再回顾一下dispatch_after函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block);</div></pre></td></tr></table></figure>\n<p>这个函数有三个参数，分别是dispatch_time_t、dispatch_queue_t、dispatch_block_t，那这里打印的x2就是要传入的block，所以我们猜测拍摄完小视频会有一个延时，然后执行刚才传入的block，所以x2中肯定有其他方法调用，下一步就是要知道这个block的位置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) memory read --size 8 --format x 0x16fd49f88</div><div class=\"line\">0x16fd49f88: 0x000000019f8fd218 0x00000000c2000000</div><div class=\"line\">0x16fd49f98: 0x000000010214777c 0x0000000102fb0e60</div><div class=\"line\">0x16fd49fa8: 0x000000015da32600 0x000000015ea1a430</div><div class=\"line\">0x16fd49fb8: 0x000000015cf5fee0 0x000000016fd49ff0</div></pre></td></tr></table></figure>\n<p>0x000000010214777c就是block所在的位置，当然要减掉当前WeChat的ASLR偏移，最终在IDA中的地址为0x10209377C，突然发现这就是<code>btnRelease</code>的子程序sub_10209377C。这个子程序非常简单，只有一个方法<code>selRef_logicCheckState_</code>有可能是我们的目标。先看看这个方法是谁调用的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) br s -a 0xb4000+0x1020937BC</div><div class=\"line\">......</div><div class=\"line\">Process 3873 stopped</div><div class=\"line\">* thread #1: tid = 0xf62c4, 0x00000001021477bc WeChat`___lldb_unnamed_symbol108895$$WeChat + 64, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 3.1</div><div class=\"line\">    frame #0: 0x00000001021477bc WeChat`___lldb_unnamed_symbol108895$$WeChat + 64</div><div class=\"line\">WeChat`___lldb_unnamed_symbol108895$$WeChat:</div><div class=\"line\">-&gt;  0x1021477bc &lt;+64&gt;: adrp   x8, 5489</div><div class=\"line\">    0x1021477c0 &lt;+68&gt;: ldr    x1, [x8, #1552]</div><div class=\"line\">    0x1021477c4 &lt;+72&gt;: orr    w2, wzr, #0x1</div><div class=\"line\">    0x1021477c8 &lt;+76&gt;: ldp    x29, x30, [sp, #16]</div><div class=\"line\">(lldb) po $x0</div><div class=\"line\">&lt;MainFrameSightViewController: 0x15d1f0c00&gt;</div></pre></td></tr></table></figure>\n<p>发现还是MainFrameSightViewController这个对象调用的，那<code>selRef_logicCheckState_</code>肯定也在这个类的头文件中，寻找一下果然发现了  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)logicCheckState:(int)arg1;</div></pre></td></tr></table></figure>\n<p>在IDA左侧窗口中寻找[MainFrameSightViewController logicCheckState:]，发现这个方法超级复杂，逻辑太多了，不着急慢慢捋。<br>在0x102094D6C位置我们发现一个switch jump，思路就很清晰了，我们只要找到小视频拍摄完成的这条线往下看就行了，LLDB来帮忙看看走的那条线。在0x102094D6C位置下个断点，这个断点在拍摄小视频的时候会多次触发，可以在拍摄之前把断点dis掉，拍摄松手之前再启用断点，打印此时的x8值  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) p/x $x8</div><div class=\"line\">(unsigned long) $38 = 0x0000000102174e10</div></pre></td></tr></table></figure>\n<p>x8是一个指针，它指向的地址是0x102174e10，用这个地址减去当前ASLR的偏移就可以找到在IDA中的基地址，发现是0x102094E10，拍摄完成的逻辑处理这条线找到了，一直走到0x102094E24位置之后跳转0x1020951C4，这个分支的内容较少，里面有三个函数  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">loc_1020951C4</div><div class=\"line\">ADRP            X8, #selRef_hideTips@PAGE</div><div class=\"line\">LDR             X1, [X8,#selRef_hideTips@PAGEOFF]</div><div class=\"line\">MOV             X0, X19</div><div class=\"line\">BL              _objc_msgSend</div><div class=\"line\">ADRP            X8, #selRef_finishWriter@PAGE</div><div class=\"line\">LDR             X1, [X8,#selRef_finishWriter@PAGEOFF]</div><div class=\"line\">MOV             X0, X19</div><div class=\"line\">BL              _objc_msgSend</div><div class=\"line\">ADRP            X8, #selRef_turnCancelBtnForFinishRecording@PAGE</div><div class=\"line\">LDR             X1, [X8,#selRef_turnCancelBtnForFinishRecording@PAGEOFF]</div><div class=\"line\">MOV             X0, X19</div><div class=\"line\">BL              _objc_msgSend</div><div class=\"line\">B               loc_102095288</div></pre></td></tr></table></figure>\n<p>其中<code>selRef_finishWriter</code>和<code>selRef_turnCancelBtnForFinishRecording</code>需要重点关注，这两个方法看上去都是小视频录制结束的意思，线索极有可能就在这两个函数中。通过查看调用者发现这两个方法都属于MainFrameSightViewController，继续在IDA中查看这两个方法。在<code>selRef_finishWriter</code>中靠近末尾0x102094248的位置发现一个方法名叫做<code>f_switchToSendingPanel</code>，下个断点，然后拍摄视频，发现这个方法并没有被触发。应该不是通过这个方法调用发布界面的，继续回到<code>selRef_finishWriter</code>方法中；在0x1020941DC的位置调用方法<code>selRef_stopRecording</code>，打印它的调用者发现这个方法属于<code>SightFacade</code>，继续在IDA中寻找这个方法的实现。在这个方法的0x101F9BED4位置又调用了<code>selRef_stopRecord</code>，同样打印调用者发现这个方法属于SightCaptureLogicF4，有点像剥洋葱，继续在寻找这个方法的实现。在这个方法内部0x101A98778位置又调用了<code>selRef_finishWriting</code>，同样的原理找到这个方法是属于SightMovieWriter。已经剥了3层了，继续往下：<br>在<code>SightMovieWriter - (void)finishWriting</code>中的0x10261D004位置分了两条线，这个位置下个断点，然后拍摄完小视频触发断点，打印x19的值  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x19</div><div class=\"line\">&lt;OS_dispatch_queue: CAPTURE.CALLBACK[0x13610bcd0] = &#123; xrefcnt = 0x4, refcnt = 0x4, suspend_cnt = 0x0, locked = 1, target = com.apple.root.default-qos.overcommit[0x1a0aa3700], width = 0x0, running = 0x0, barrier = 1 &#125;&gt;</div></pre></td></tr></table></figure>\n<p>所以代码不会跳转到loc_10261D054而是走的左侧，在左侧的代码中发现启用了一个block，这个block是子程序sub_10261D0AC，地址为0x10261D0AC，找到这个地址，结构如下图所示：<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E8%A7%86%E9%A2%91%E8%BD%AC%E5%8F%91sub_10261D0AC.png\" alt=\"sub_10261D0AC\"><br>可以看出来主要分两条线，我们在第一个方框的末尾也就是0x10261D108位置下个断点，等拍摄完毕触发断点之后打印x0的值为1，这里的汇编代码为  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">__text:000000010261D104                 CMP             X0, #2</div><div class=\"line\">__text:000000010261D108                 B.EQ            loc_10261D234</div></pre></td></tr></table></figure>\n<p>B.EQ是在上一步的结果为0才会跳转到loc_10261D234，但是这里的结果是不为0的，将x0的值改为2让上一步的结果为0  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x0</div><div class=\"line\">1</div><div class=\"line\">(lldb) register write $x0 2</div><div class=\"line\">(lldb) po $x0</div><div class=\"line\">2</div></pre></td></tr></table></figure>\n<p>此时放开断点，等待跳转到小视频发布界面，结果是一直卡在这个界面没有任何反应，所以猜测实现跳转的逻辑应该在右边的那条线，继续顺着右边的线寻找：<br>在右侧0x10261D3AC位置发现调用了下面的这个方法  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)finishWritingWithCompletionHandler:(void (^)(void))handler;</div></pre></td></tr></table></figure>\n<p>这个方法是系统提供的AVAssetWriter里面的方法，在视频写入完成之后要做的操作，这个里是要传入一个block的，因为只有一个参数所以对应的变量是x2，打印x2的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x2</div><div class=\"line\">&lt;__NSStackBlock__: 0x16e086c78&gt;</div><div class=\"line\">(lldb) memory read --size 8 --format x 0x16e086c78</div><div class=\"line\">0x16e086c78: 0x00000001a0aa5218 0x00000000c2000000</div><div class=\"line\">0x16e086c88: 0x00000001026d94b0 0x0000000102fc98c0</div><div class=\"line\">0x16e086c98: 0x0000000136229fd0 0x000000016e086d00</div><div class=\"line\">0x16e086ca8: 0x00000001997f5318 0xfffffffec9e882ff</div></pre></td></tr></table></figure>\n<p>并且通过栈内存找到block位置为0x10261D4B0（需要减去ASLR的偏移）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">sub_10261D4B0</div><div class=\"line\">var_20= -0x20</div><div class=\"line\">var_10= -0x10</div><div class=\"line\">STP             X20, X19, [SP,#var_20]!</div><div class=\"line\">STP             X29, X30, [SP,#0x20+var_10]</div><div class=\"line\">ADD             X29, SP, #0x20+var_10</div><div class=\"line\">MOV             X19, X0</div><div class=\"line\">LDR             X0, [X19,#0x20]</div><div class=\"line\">ADRP            X8, #selRef_stopAmr@PAGE</div><div class=\"line\">LDR             X1, [X8,#selRef_stopAmr@PAGEOFF]</div><div class=\"line\">BL              _objc_msgSend</div><div class=\"line\">LDR             X0, [X19,#0x20]</div><div class=\"line\">ADRP            X8, #selRef_compressAudio@PAGE</div><div class=\"line\">LDR             X1, [X8,#selRef_compressAudio@PAGEOFF]</div><div class=\"line\">LDP             X29, X30, [SP,#0x20+var_10]</div><div class=\"line\">LDP             X20, X19, [SP+0x20+var_20],#0x20</div><div class=\"line\">B               _objc_msgSend</div><div class=\"line\">; End of function sub_10261D4B0</div></pre></td></tr></table></figure>\n<p>只调用了两个方法，一个是<code>selRef_stopAmr</code>停止amr（一种音频格式），另一个是<code>selRef_compressAudio</code>压缩音频，拍摄完成的下一步操作应该不会放在这两个方法里面，找了这么久也没有头绪，这个路看来走不通了，不要钻牛角尖，战略性撤退寻找其他入口。<br><strong>逆向的乐趣就是一直寻找真相的路上，能体会到成功的乐趣，也有可能方向错了离真相反而越来越远，不要气馁调整方向继续前进！</strong></p>\n<h3 id=\"2-“另辟蹊径”\"><a href=\"#2-“另辟蹊径”\" class=\"headerlink\" title=\"2.“另辟蹊径”\"></a>2.“另辟蹊径”</h3><blockquote>\n<p>（由于微信在后台偷偷升级了，下面的内容都是微信6.3.30版本的ASLR，上面的分析基于6.3.28版本）</p>\n</blockquote>\n<p>注意到在点击朋友圈右上角的相机按钮底部会弹出一个Sheet，第一个就是Sight小视频，从这里入手，用cycript查看Sight按钮对应的事件是哪个  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">iPhone-5S:~ root# cycript -p &quot;WeChat&quot;</div><div class=\"line\">cy# [UIApp windows].toString()</div><div class=\"line\">`(</div><div class=\"line\">    &quot;&lt;iConsoleWindow: 0x14d6ccc00; baseClass = UIWindow; frame = (0 0; 320 568); autoresize = W+H; gestureRecognizers = &lt;NSArray: 0x14d7df110&gt;; layer = &lt;UIWindowLayer: 0x14d7d6f60&gt;&gt;&quot;,</div><div class=\"line\">    &quot;&lt;SvrErrorTipWindow: 0x14eaa5800; baseClass = UIWindow; frame = (0 0; 320 45); hidden = YES; gestureRecognizers = &lt;NSArray: 0x14e9e8950&gt;; layer = &lt;UIWindowLayer: 0x14e9e6510&gt;&gt;&quot;,</div><div class=\"line\">    &quot;&lt;UITextEffectsWindow: 0x14ec38ba0; frame = (0 0; 320 568); opaque = NO; autoresize = W+H; layer = &lt;UIWindowLayer: 0x14ec39360&gt;&gt;&quot;,</div><div class=\"line\">    &quot;&lt;UITextEffectsWindow: 0x14e9c67a0; frame = (0 0; 320 568); layer = &lt;UIWindowLayer: 0x14d683ff0&gt;&gt;&quot;,</div><div class=\"line\">    &quot;&lt;UIRemoteKeyboardWindow: 0x14f226e40; frame = (0 0; 320 568); opaque = NO; autoresize = W+H; layer = &lt;UIWindowLayer: 0x14d6f4de0&gt;&gt;&quot;,</div><div class=\"line\">    &quot;&lt;NewYearActionSheet: 0x14f1704a0; baseClass = UIWindow; frame = (0 0; 320 568); gestureRecognizers = &lt;NSArray: 0x14ef9bf90&gt;; layer = &lt;UIWindowLayer: 0x14ef61a20&gt;&gt;&quot;</div><div class=\"line\">)`</div><div class=\"line\">cy# [#0x14f1704a0 recursiveDescription].toString()</div></pre></td></tr></table></figure>\n<p>底部的Sheet是NewYearActionSheet，然后打印NewYearActionSheet的UI树状结构图（比较长不贴了）。然后找到Sight对应的UIButton是0x14f36d470   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy# [#0x14f36d470 allTargets]</div><div class=\"line\">[NSSet setWithArray:@[#&quot;&lt;NewYearActionSheet: 0x14f1704a0; baseClass = UIWindow; frame = (0 0; 320 568); gestureRecognizers = &lt;NSArray: 0x14ef9bf90&gt;; layer = &lt;UIWindowLayer: 0x14ef61a20&gt;&gt;&quot;]]]</div><div class=\"line\">cy# [#0x14f36d470 allControlEvents]</div><div class=\"line\">64</div><div class=\"line\">cy# [#0x14f36d470 actionsForTarget:#0x14f1704a0 forControlEvent:64]</div><div class=\"line\">@[&quot;OnDefaultButtonTapped:&quot;]</div></pre></td></tr></table></figure>\n<p>通过UIControl的<code>actionsForTarget:forControlEvent:</code>方法可以找到按钮绑定的事件，Sight按钮的触发方法为<code>OnDefaultButtonTapped:</code>，回到IDA中在NewYearActionSheet中找到这个方法们继续往下分析只有这个方法<code>selRef_dismissWithClickedButtonIndex_animated</code>，通过打印它的调用者发现还是NewYearActionSheet，继续点进去找到<code>newYearActionSheet_clickedButtonAtIndex</code>方法，看样子不是NewYearActionSheet自己的，打印调用者x0发现它属于类WCTimeLineViewController。跟着断点走下去在0x1012B78CC位置调用了方法<code>#selRef_showSightWindowForMomentWithMask_byViewController_scene</code><br>通过观察发现这个方法的调用者是0x1012B78AC这个位置的返回值x0，这是一个类SightFacade，猜测这个方法在SightFacade里面，去头文件里找一下果然发现这个方法  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)showSightWindowForMomentWithMask:(id)arg1 byViewController:(id)arg2 scene:(int)arg3;</div></pre></td></tr></table></figure>\n<p>这个方法应该就是跳转到小视频界面的方法了。下面分别打印它的参数  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x2</div><div class=\"line\">&lt;UIImage: 0x14f046660&gt;, &#123;320, 568&#125;</div><div class=\"line\">(lldb) po $x3</div><div class=\"line\">&lt;WCTimeLineViewController: 0x14e214800&gt;</div><div class=\"line\">(lldb) po $x4</div><div class=\"line\">2</div><div class=\"line\">(lldb) po $x0</div><div class=\"line\">&lt;SightFacade: 0x14f124b40&gt;</div></pre></td></tr></table></figure>\n<p>其中x2、x3、x4分别对应三个参数，x0是调用者，跳到这个方法内部查看怎么实现的。发现在这个方法中进行了小视频拍摄界面的初始化工作，首先初始化一个MainFrameSightViewController，再创建一个UINavigationController将MainFrameSightViewController放进去，接下来初始化一个MMWindowController调用  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (id)initWithViewController:(id)arg1 windowLevel:(int)arg2;</div></pre></td></tr></table></figure>\n<p>方法将UINavigationController放了进去，完成小视频拍摄界面的所有UI创建工作。<br>拍摄完成之后进入发布界面，此时用cycript找到当前的Controller是SightMomentEditViewController，由此萌生一个想法，跳过前面的拍摄界面直接进入发布界面不就可以了吗？我们自己创建一个SightMomentEditViewController然后放到UINavigationController里面，然后再将这个导航控制器放到MMWindowController里面。<strong>（这里我已经写好tweak进行了验证，具体的tweak思路编写在后文有）</strong>结果是的确可以弹出发布的界面，但是导航栏的NavgationBar遮住了原来的，整个界面是透明的，很难看，而且发布完成之后无法销毁整个MMWindowController，还是停留在发布界面。我们要的结果不是这个，不过确实有很大的收获，最起码可以直接调用发布界面了，小视频也能正常转发。我个人猜测，当前界面不能被销毁的原因是因为MMWindowController新建了一个window,它跟TimeLine所在的keyWindow不是同一个，SightMomentEditViewController的按钮触发的方法是没有办法销毁这个window的，所以有一个大胆的猜想，我直接在当前的WCTimeLineViewController上把SightMomentEditViewController展示出来不就可以了吗？  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[WCTimelineVC presentViewController:editSightVC animated:YES completion:^&#123;</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<p>像这样展示岂不妙哉？不过通过观察SightMomentEditViewController的头文件，结合小视频发布时界面上的元素，推测创建这个控制器至少需要两个属性，一个是小视频的路径，另一个是小视频的缩略图，将这两个关键属性给了SightMomentEditViewController那么应该就可以正常展示了   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">SightMomentEditViewController *editSightVC = [[%c(SightMomentEditViewController) alloc] init];</div><div class=\"line\">NSString *localPath = [[self iOSREMediaItemFromSight] pathForSightData];</div><div class=\"line\">UIImage *image = [[self valueForKey:@&quot;_sightView&quot;] getImage];</div><div class=\"line\">[editSightVC setRealMoviePath:localPath];</div><div class=\"line\">[editSightVC setMoviePath:localPath];</div><div class=\"line\">[editSightVC setRealThumbImage:image];</div><div class=\"line\">[editSightVC setThumbImage:image];</div><div class=\"line\">[WCTimelineVC presentViewController:editSightVC animated:YES completion:^&#123;</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<p>小视频的发布界面可以正常显示并且所有功能都可以正常使用，唯一的问题是返回按钮没有效果，并不能销毁SightMomentEditViewController。用cycript查看左侧按钮的actionEvent找到它的响应函数是<code>- (void)popSelf;</code>，点击左侧返回触发的是pop方法，但是这个控制器并不在navgationController里面，所以无效，我们要对这个方法进行重写  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)popSelf</div><div class=\"line\">&#123;</div><div class=\"line\">    [self dismissViewControllerAnimated:YES completion:^&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时再点击返回按钮就可以正常退出了，此外，在WCContentItemViewTemplateNewSight中发现了一个方法叫做<code>- (void)sendSightToFriend;</code>，可以直接将小视频转发给好友，至此小视频转发的功能已经找到了。</p>"},{"title":"手把手教你逆向微信之朋友圈小视频转发（下）","date":"2016-11-10T16:00:00.000Z","_content":">\t接上篇[《手把手教你逆向微信之朋友圈小视频转发（上）》](http://www.gaoshilei.com/2016/11/09/手把手教你逆向微信之朋友圈小视频转发（上）/)\n\n##\t\t代码编写及重签名打包安装 （下篇） \n小视频的转发支持4个功能，转发至朋友圈、转发至好友、保存到本地相册、拷贝小视频链接到粘贴板。如果小视频没有下载长按时只会出现拷贝url链接。 \n<!-- more -->\n*（非越狱机和不想利用tweak安装的越狱机[点我跳到第二节](#section_two)）*\n###\t1.越狱机打包安装（tweak安装）  \n1>\t新建tweak工程  \n2>\t编写tweak文件\n\n这里要hook两个类，分别是WCContentItemViewTemplateNewSight和SightMomentEditViewController，在WCContentItemViewTemplateNewSight中hook住onLongTouch方法然后添加menu弹出菜单，依次添加响应的方法，具体的代码如下：  \n\n-\t拷贝小视频的url链接\n\n```oc\n  NSString *localPath = [[self iOSREMediaItemFromSight] pathForSightData];\n    UISaveVideoAtPathToSavedPhotosAlbum(localPath, nil, nil, nil);\n}\n```\n\n-\t保存小视频到本地相册\n\n```oc\nNSString *localPath = [[self iOSREMediaItemFromSight] pathForSightData];\n    UISaveVideoAtPathToSavedPhotosAlbum(localPath, nil, nil, nil);\n```\n\n-\t转发到朋友圈\n\n```oc\n SightMomentEditViewController *editSightVC = [[%c(SightMomentEditViewController) alloc] init];\n    NSString *localPath = [[self iOSREMediaItemFromSight] pathForSightData];\n    UIImage *image = [[self valueForKey:@\"_sightView\"] getImage];\n    [editSightVC setRealMoviePath:localPath];\n    [editSightVC setMoviePath:localPath];\n    [editSightVC setRealThumbImage:image];\n    [editSightVC setThumbImage:image];\n    [WCTimelineVC presentViewController:editSightVC animated:YES completion:^{\n\n    }];\n```\n\n-\t转发给好友\n\n```oc\n[self sendSightToFriend];\n```\n\n-\t长按手势\n\n```Objective-C\n    UIMenuController *menuController = [UIMenuController sharedMenuController];\n    if (menuController.isMenuVisible) return;//防止出现menu闪屏的情况\n    [self becomeFirstResponder];\n    NSString *localPath = [[self iOSREMediaItemFromSight] pathForSightData];\n    BOOL isExist =[[NSFileManager defaultManager] fileExistsAtPath:localPath];\n    UIMenuItem *retweetMenuItem = [[UIMenuItem alloc] initWithTitle:@\"朋友圈\" action:@selector(SLRetweetSight)];\n    UIMenuItem *saveToDiskMenuItem = [[UIMenuItem alloc] initWithTitle:@\"保存到相册\" action:@selector(SLSightSaveToDisk)];\n    UIMenuItem *sendToFriendsMenuItem = [[UIMenuItem alloc] initWithTitle:@\"好友\" action:@selector(SLSightSendToFriends)];\n    UIMenuItem *copyURLMenuItem = [[UIMenuItem alloc] initWithTitle:@\"复制链接\" action:@selector(SLSightCopyUrl)];\n    if(isExist){\n        [menuController setMenuItems:@[retweetMenuItem,sendToFriendsMenuItem,saveToDiskMenuItem,copyURLMenuItem]];\n    }else{\n        [menuController setMenuItems:@[copyURLMenuItem]];\n    }\n    [menuController setTargetRect:CGRectZero inView:self];\n    [menuController setMenuVisible:YES animated:YES];\n```\n\n具体的tweak文件我放在了github上，[WCSightRetweet传送门](https://github.com/gaoshilei/WCSightRetweet)\n\n3>\t编写WCTimelineRetweet.h头文件\n编写这个头文件的目的是防止tweak在编译期间报错，我们可以在编写好tweak试着编译一下，然后根据报错信息来添加这个头文件的内容，在这个文件中要声明在tweak我们用到的微信的类和方法，具体请看代码：\n\n```\n@interface WCUrl : NSObject\n@property(retain, nonatomic) NSString *url;\n@end\n@interface WCContentItem : NSObject\n@property(retain, nonatomic) NSMutableArray *mediaList;\n@end\n@interface WCDataItem : NSObject\n@property(retain, nonatomic) WCContentItem *contentObj;\n@end\n@interface WCMediaItem : NSObject\n@property(retain, nonatomic) WCUrl *dataUrl;\n- (id)pathForSightData;\n@end\n@interface MMServiceCenter : NSObject\n+ (id)defaultCenter;\n- (id)getService:(Class)arg1;\n@end\n@interface WCFacade : NSObject\n- (id)getTimelineDataItemOfIndex:(long long)arg1;\n@end\n@interface WCSightView : UIView\n- (id)getImage;\n@end\n@interface WCContentItemViewTemplateNewSight : UIView{\n    WCSightView *_sightView;\n}\n- (WCMediaItem *)iOSREMediaItemFromSight;\n- (void)iOSREOnSaveToDisk;\n- (void)iOSREOnCopyURL;\n- (void)sendSightToFriend;\n@end\n@interface SightMomentEditViewController : UIViewController\n@property(retain, nonatomic) NSString *moviePath;\n@property(retain, nonatomic) NSString *realMoviePath;\n@property(retain, nonatomic) UIImage *thumbImage;\n@property(retain, nonatomic) UIImage *realThumbImage;\n- (void)makeInputController;\n@end\n@interface MMWindowController : NSObject\n- (id)initWithViewController:(id)arg1 windowLevel:(int)arg2;\n- (void)showWindowAnimated:(_Bool)arg1;\n@end\n@interface WCTimeLineViewController : UIViewController\n- (long long)calcDataItemIndex:(long long)arg1;\n@end\n@interface MMTableViewCell : UIView\n@end\n@interface MMTableView : UIView\n- (id)indexPathForCell:(id)cell;\n@end\n```\n\n4>\tMakefile文件修改\n\n```oc\nTHEOS_DEVICE_IP = 192.168.0.115//手机所在的IP\ninclude $(THEOS)/makefiles/common.mk\nARCHS = arm64//支持的CPU架构\nTWEAK_NAME = WCTimelineSightRetweet\nWCTimelineSightRetweet_FILES = Tweak.xm\nWCTimelineSightRetweet_FRAMEWORKS = UIKit CoreGraphics//导入系统的framework\ninclude $(THEOS_MAKE_PATH)/tweak.mk\n\nafter-install::\n\tinstall.exec \"killall -9 WeChat\"//安装完成杀掉的进程\n```\n\ncontrol文件不需要做修改，然后执行命令`make package install`安装到手机，微信会被杀掉，然后再次打开微信转发小视频的功能已经加上了。  \n\n###\t<span id=\"section_two\">2.微信重签名打包安装 </span> \n####\t准备工作\n#####\t（1）\t安装iOSOpenDev  \n1>\t安装 [macports](https://www.macports.org/install.php) (安装过程需要连接VPN,否则无法安装成功)\n\n2>\t安装完MacPorts后打开终端，输入 `sudo port -v selfupdate` 更新MacPorts到最新版本，时间可能比较长。\n\n3>\t更新完MacPorts后安装DPKG文件，在终端输入`sudo port -f install dpkg`\n\n4>\t下载安装 [iOSOpendev](http://iosopendev.com/download) 如果安装失败，可以通过 `Command + L` 查看安装中出现的问题。\n\n```\nPackageKit: Install Failed: Error Domain=PKInstallErrorDomain Code=112 \"运行软件包“iOSOpenDev-1.6-2.pkg”的脚本时出错。\" UserInfo={NSFilePath=./postinstall, NSURL=file://localhost/Users/ice/Downloads/iOSOpenDev-1.6-2.pkg#iodsetup.pkg, PKInstallPackageIdentifier=com.iosopendev.iosopendev162.iod-setup.pkg, NSLocalizedDescription=运行软件包“iOSOpenDev-1.6-2.pkg”的脚本时出错。} {\n        NSFilePath = \"./postinstall\";\n        NSLocalizedDescription = \"\\U8fd0\\U884c\\U8f6f\\U4ef6\\U5305\\U201ciOSOpenDev-1.6-2.pkg\\U201d\\U7684\\U811a\\U672c\\U65f6\\U51fa\\U9519\\U3002\";\n        NSURL = \"file://localhost/Users/ice/Downloads/iOSOpenDev-1.6-2.pkg#iodsetup.pkg\";\n        PKInstallPackageIdentifier = \"com.iosopendev.iosopendev162.iod-setup.pkg\"\n}\n```\n\n这里有一个解决方案：下载[iOSOpenDevInstallSolve](https://github.com/gaoshilei/iOSOpenDevInstallSolve)中的Specifications文件夹  \n\n**修复安装失败问题**  \n打开步骤4下载的Specifications文件夹，里面应该有8个文件,如果你有安装多个xcode注意放到对应的xcode里面。  \n1.\tiPhoneOS开头的四个文件放到/应用程序/Xcode/Content/Developer/Platforms/IphoneOS.platform/Developer/Library/Xcode/Specifications文件夹下（如果没有，请自己创建一个Specifications文件夹）  \n2.\tiPhone Simulator 开头的另外四个文件放入/应用程序/Xcode/Content/Developer/Platforms/iPhoneSimulator.platform/Developer/Library/Xcode/Specifications文件夹下(如果没有，请同样创建一个)  \n3.\t在/应用程序/Xcode/Content/Developer/Platforms/iPhoneSimulator.platform/Developer/文件夹下创建usr文件夹，usr文件夹下再创建一个名为bin的文件夹。  \n**注意：有时候会提示安装失败，打开Xcode新建工程，如果在工程的选项菜单中有iOSOpenDev就表示安装成功了，不用管那个安装提示。**  \n\n#####\t（2）\t安装ideviceinstaller\n>\t安装ipa包用的，也可以通过itool之类的工具，不过ideviceinstaller可以看到安装过程的过程，方便我们找到出错原因。\n\n执行命令\n\n```oc\nbrew install ideviceinstaller\n```\n如果提示brew命令找不到，那就是你的Mac还没有安装[Homebrew](http://brew.sh/index_zh-cn.html)  \n常见的报错信息：  \n\n```oc\nERROR: Could not connect to lockdownd, error code -5\n```\n这个时候只要重新安装libimobiledevice就可以了（因为ideviceinstaller依赖很多其他插件）  \n执行下面的命令：\n\n```oc\n$   brew uninstall libimobiledevice\n$   brew install --HEAD libimobiledevice\n```\n\n下载[iOS App Signer](https://github.com/DanTheMan827/ios-app-signer)重签名工具*（省去很多命令行操作，一键重签名！）*  \n\n（3）\t下载砸壳的微信应用\n>\t因为AppStore的包是被加密（有壳），无法进行重签名，所以要用砸壳的，可以用dumpdecrypted自己砸壳，也可以直接利用PP助手或者itool助手下载越狱版已经砸过壳的微信应用。  \n\n（4）\t安装yololib  \nyololib可以将dylib注入进WeChat二进制文件中，这样才能是你的Hook有作用，下载之后编译得到[yololib](https://github.com/gaoshilei/yololib)\n\n####\t代码注入以及打包安装 \n\n#####\t（1）生成静态库  \n在上一步中已经安装好iOSOpendev，此时打开Xcode新建项目，在选择工程界面会出现iOSOpendev的工程，这里我们要选择CaptainHook Tweak项目\n![iOSOpenDev](http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E9%87%8D%E7%AD%BE%E5%90%8DiOSDev.png)\n新建好的工程只有一个.mm文件，我们只需要把所有hook方法写在这个文件中即可。  \n因为非越狱机不能像越狱机一样可以安装tweak插件对原来的应用进行hook，CaptainHook使用的Runtime机制实现，利用宏命令封装类定义、方法替换等功能，简单介绍它的使用方法：  \n\n1.\thook某个类\n \n```oc\nCHDeclareClass(WCContentItemViewTemplateNewSight); \n```\n`CHDeclareClass(ClassName)`表示要hook哪个类，一般写在对这个类操作的最前面。\n\n2.\t在hook的类种新建方法  \n\n```oc\nCHDeclareMethod0(id, WCContentItemViewTemplateNewSight, SLSightDataItem){......}\n```\n`CHDeclareMethod(count, return_type, class_type, name1, arg1, ....)`表示新建一个方法，count表示这个方法的参数个数，return_type表示返回类型，class_type填写这个方法所在的类名，name1表示方法名，arg1表示第一个参数，如果没有参数则不填，以此类推。  \n\n3.\thook原来的方法  \n\n```oc\nCHOptimizedMethod0(self, void, WCContentItemViewTemplateNewSight, onLongTouch){\nCHSuper(0, className, Method);//可选\n......\n}\n```\n`CHOptimizedMethod(count, optimization, return_type, class_type, name1, type1, arg1)` 表示hook原来的方法（如果不加`CHSuper(0, className, Method)`表示复写原来的方法，CHSuper表示在当前位置调用原来的方法实现），count表示hook的方法参数个数，optimization一般填self，return_type即方法返回值类型，class_type填当前类的类名，name1是方法名，arg1是参数，如果没有参数不同填写arg，以此类推。  \n\n4.\t构造函数\n\n```oc\nCHConstructor\n{\n    @autoreleasepool\n    {\n        CHLoadLateClass(WCContentItemViewTemplateNewSight);\n        CHHook(0, WCContentItemViewTemplateNewSight, onLongTouch);    \n     }\n}\n```\n这是CaptainHook的入口函数，所有被hook的类必须在这里声明加载，类里面的方法要在这里声明hook。  \n然后就可以往类和方法中写代码了，代码太长不贴了，请自行下载  \n**[MMPlugin传送门](https://github.com/gaoshilei/MMPlugin)**  \n**这个项目中包含了小视频转发、自动抢红包、修改微信运动步数功能，自动抢红包和修改微信运动步数功能可以手动关闭。**\n>\t注意：如果用到了系统的类记住要导入相应的类库（比方说UIKit）和头文件否则编译的时候会报错。\n\n编译成功之后就可以在Products文件夹中找到编译好的静态库了  \n![编译好的静态库](http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E9%87%8D%E7%AD%BE%E5%90%8D-%E7%BC%96%E8%AF%91%E5%A5%BD%E7%9A%84%E9%9D%99%E6%80%81%E5%BA%93.png)  \n在finder中找到它，拷贝出来待用。\n#####\t(2)\t签名+打包+安装  \n进行到这里目前应该有的材料有：\n\n-\t砸壳的微信app    \n- \t编译好的MMPlugin.dylib\n-  安装好的iOS App Signer\n-  编译好的yololib文件  \n-  ideviceinstaller\n\n从原来的微信app中找到WeChat二进制文件拷贝出来待用，**删除weChat.app中的Watch文件夹、PlugIns文件夹中的WeChatShareExtensionNew.appex**，这步操作必须要做，不然安装的时候会报签名错误。  \n执行下面的命令将MMPlugin.dylib注入到WeChat二进制文件中，命令如下：\n\n```shell\nLeonLei-MBP:WeChat gaoshilei$ ./yololib WeChat MMPlugin.dylib\n```\n**执行这个命令时要确保yololib、WeChat、WeChat.app处于同一目录下。** \n\n完成之后将MMPlugin.dylib和WeChat拷贝到原来的WeChat.app中，覆盖掉原来的WeChat文件。  \n打开iOS App Signer按照下图选择好各项参数：\n![iOS App Signer](http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E9%87%8D%E7%AD%BE%E5%90%8D-iOSAppSigner.png)  \n我这里选择的是企业级证书，个人开发者证书也是可以的，一定要选择生产环境的，选好之后点击start，稍等片刻一个经过重签名的ipa包就生成了。  \n连上你的手机执行下面的命令查看ideviceinstaller是否连接上手机：\n\n```shell\nLeonLei-MBP:WeChat gaoshilei$ ideviceinfo\n```\n如果打印出一大堆手机的信息表示连接成功可以安装ipa包，如果不成功请根据错误提示进行调整。执行下面的命令进行安装：  \n\n```shell\nLeonLei-MBP:WeChat gaoshilei$ ideviceinstaller -i WeChat.ipa \nWARNING: could not locate iTunesMetadata.plist in archive!\nWARNING: could not locate Payload/WeChat.app/SC_Info/WeChat.sinf in archive!\nCopying 'WeChat.ipa' to device... DONE.\nInstalling 'com.xxxxxxxxxxxx'\n - CreatingStagingDirectory (5%)\n - ExtractingPackage (15%)\n - InspectingPackage (20%)\n - TakingInstallLock (20%)\n - PreflightingApplication (30%)\n - InstallingEmbeddedProfile (30%)\n - VerifyingApplication (40%)\n - CreatingContainer (50%)\n - InstallingApplication (60%)\n - PostflightingApplication (70%)\n - SandboxingApplication (80%)\n - GeneratingApplicationMap (90%)\n - Complete\n```\n安装完成，在手机上打开微信试试我们添加的新功能吧！如果某个环节卡住会报错，请根据报错信息进行修改。请看效果图：  \n![小视频转发](http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E9%87%8D%E7%AD%BE%E5%90%8D-%E5%B0%8F%E8%A7%86%E9%A2%91%E8%BD%AC%E5%8F%91%E6%95%88%E6%9E%9C%E5%9B%BE.jpg)  \n\n####\t有任何问题请在文章评论区留言，或者在博客首页点击邮件联系我。\n","source":"_posts/手把手教你逆向微信之朋友圈小视频转发（下）.md","raw":"title: 手把手教你逆向微信之朋友圈小视频转发（下）\ndate: 2016-11-11\ncategories:\n- 逆向工程\ntags:\n- 微信\n- 逆向工程\n- 重签名  \npermalink: 手把手教你逆向微信之朋友圈小视频转发（下）\n\n---\n>\t接上篇[《手把手教你逆向微信之朋友圈小视频转发（上）》](http://www.gaoshilei.com/2016/11/09/手把手教你逆向微信之朋友圈小视频转发（上）/)\n\n##\t\t代码编写及重签名打包安装 （下篇） \n小视频的转发支持4个功能，转发至朋友圈、转发至好友、保存到本地相册、拷贝小视频链接到粘贴板。如果小视频没有下载长按时只会出现拷贝url链接。 \n<!-- more -->\n*（非越狱机和不想利用tweak安装的越狱机[点我跳到第二节](#section_two)）*\n###\t1.越狱机打包安装（tweak安装）  \n1>\t新建tweak工程  \n2>\t编写tweak文件\n\n这里要hook两个类，分别是WCContentItemViewTemplateNewSight和SightMomentEditViewController，在WCContentItemViewTemplateNewSight中hook住onLongTouch方法然后添加menu弹出菜单，依次添加响应的方法，具体的代码如下：  \n\n-\t拷贝小视频的url链接\n\n```oc\n  NSString *localPath = [[self iOSREMediaItemFromSight] pathForSightData];\n    UISaveVideoAtPathToSavedPhotosAlbum(localPath, nil, nil, nil);\n}\n```\n\n-\t保存小视频到本地相册\n\n```oc\nNSString *localPath = [[self iOSREMediaItemFromSight] pathForSightData];\n    UISaveVideoAtPathToSavedPhotosAlbum(localPath, nil, nil, nil);\n```\n\n-\t转发到朋友圈\n\n```oc\n SightMomentEditViewController *editSightVC = [[%c(SightMomentEditViewController) alloc] init];\n    NSString *localPath = [[self iOSREMediaItemFromSight] pathForSightData];\n    UIImage *image = [[self valueForKey:@\"_sightView\"] getImage];\n    [editSightVC setRealMoviePath:localPath];\n    [editSightVC setMoviePath:localPath];\n    [editSightVC setRealThumbImage:image];\n    [editSightVC setThumbImage:image];\n    [WCTimelineVC presentViewController:editSightVC animated:YES completion:^{\n\n    }];\n```\n\n-\t转发给好友\n\n```oc\n[self sendSightToFriend];\n```\n\n-\t长按手势\n\n```Objective-C\n    UIMenuController *menuController = [UIMenuController sharedMenuController];\n    if (menuController.isMenuVisible) return;//防止出现menu闪屏的情况\n    [self becomeFirstResponder];\n    NSString *localPath = [[self iOSREMediaItemFromSight] pathForSightData];\n    BOOL isExist =[[NSFileManager defaultManager] fileExistsAtPath:localPath];\n    UIMenuItem *retweetMenuItem = [[UIMenuItem alloc] initWithTitle:@\"朋友圈\" action:@selector(SLRetweetSight)];\n    UIMenuItem *saveToDiskMenuItem = [[UIMenuItem alloc] initWithTitle:@\"保存到相册\" action:@selector(SLSightSaveToDisk)];\n    UIMenuItem *sendToFriendsMenuItem = [[UIMenuItem alloc] initWithTitle:@\"好友\" action:@selector(SLSightSendToFriends)];\n    UIMenuItem *copyURLMenuItem = [[UIMenuItem alloc] initWithTitle:@\"复制链接\" action:@selector(SLSightCopyUrl)];\n    if(isExist){\n        [menuController setMenuItems:@[retweetMenuItem,sendToFriendsMenuItem,saveToDiskMenuItem,copyURLMenuItem]];\n    }else{\n        [menuController setMenuItems:@[copyURLMenuItem]];\n    }\n    [menuController setTargetRect:CGRectZero inView:self];\n    [menuController setMenuVisible:YES animated:YES];\n```\n\n具体的tweak文件我放在了github上，[WCSightRetweet传送门](https://github.com/gaoshilei/WCSightRetweet)\n\n3>\t编写WCTimelineRetweet.h头文件\n编写这个头文件的目的是防止tweak在编译期间报错，我们可以在编写好tweak试着编译一下，然后根据报错信息来添加这个头文件的内容，在这个文件中要声明在tweak我们用到的微信的类和方法，具体请看代码：\n\n```\n@interface WCUrl : NSObject\n@property(retain, nonatomic) NSString *url;\n@end\n@interface WCContentItem : NSObject\n@property(retain, nonatomic) NSMutableArray *mediaList;\n@end\n@interface WCDataItem : NSObject\n@property(retain, nonatomic) WCContentItem *contentObj;\n@end\n@interface WCMediaItem : NSObject\n@property(retain, nonatomic) WCUrl *dataUrl;\n- (id)pathForSightData;\n@end\n@interface MMServiceCenter : NSObject\n+ (id)defaultCenter;\n- (id)getService:(Class)arg1;\n@end\n@interface WCFacade : NSObject\n- (id)getTimelineDataItemOfIndex:(long long)arg1;\n@end\n@interface WCSightView : UIView\n- (id)getImage;\n@end\n@interface WCContentItemViewTemplateNewSight : UIView{\n    WCSightView *_sightView;\n}\n- (WCMediaItem *)iOSREMediaItemFromSight;\n- (void)iOSREOnSaveToDisk;\n- (void)iOSREOnCopyURL;\n- (void)sendSightToFriend;\n@end\n@interface SightMomentEditViewController : UIViewController\n@property(retain, nonatomic) NSString *moviePath;\n@property(retain, nonatomic) NSString *realMoviePath;\n@property(retain, nonatomic) UIImage *thumbImage;\n@property(retain, nonatomic) UIImage *realThumbImage;\n- (void)makeInputController;\n@end\n@interface MMWindowController : NSObject\n- (id)initWithViewController:(id)arg1 windowLevel:(int)arg2;\n- (void)showWindowAnimated:(_Bool)arg1;\n@end\n@interface WCTimeLineViewController : UIViewController\n- (long long)calcDataItemIndex:(long long)arg1;\n@end\n@interface MMTableViewCell : UIView\n@end\n@interface MMTableView : UIView\n- (id)indexPathForCell:(id)cell;\n@end\n```\n\n4>\tMakefile文件修改\n\n```oc\nTHEOS_DEVICE_IP = 192.168.0.115//手机所在的IP\ninclude $(THEOS)/makefiles/common.mk\nARCHS = arm64//支持的CPU架构\nTWEAK_NAME = WCTimelineSightRetweet\nWCTimelineSightRetweet_FILES = Tweak.xm\nWCTimelineSightRetweet_FRAMEWORKS = UIKit CoreGraphics//导入系统的framework\ninclude $(THEOS_MAKE_PATH)/tweak.mk\n\nafter-install::\n\tinstall.exec \"killall -9 WeChat\"//安装完成杀掉的进程\n```\n\ncontrol文件不需要做修改，然后执行命令`make package install`安装到手机，微信会被杀掉，然后再次打开微信转发小视频的功能已经加上了。  \n\n###\t<span id=\"section_two\">2.微信重签名打包安装 </span> \n####\t准备工作\n#####\t（1）\t安装iOSOpenDev  \n1>\t安装 [macports](https://www.macports.org/install.php) (安装过程需要连接VPN,否则无法安装成功)\n\n2>\t安装完MacPorts后打开终端，输入 `sudo port -v selfupdate` 更新MacPorts到最新版本，时间可能比较长。\n\n3>\t更新完MacPorts后安装DPKG文件，在终端输入`sudo port -f install dpkg`\n\n4>\t下载安装 [iOSOpendev](http://iosopendev.com/download) 如果安装失败，可以通过 `Command + L` 查看安装中出现的问题。\n\n```\nPackageKit: Install Failed: Error Domain=PKInstallErrorDomain Code=112 \"运行软件包“iOSOpenDev-1.6-2.pkg”的脚本时出错。\" UserInfo={NSFilePath=./postinstall, NSURL=file://localhost/Users/ice/Downloads/iOSOpenDev-1.6-2.pkg#iodsetup.pkg, PKInstallPackageIdentifier=com.iosopendev.iosopendev162.iod-setup.pkg, NSLocalizedDescription=运行软件包“iOSOpenDev-1.6-2.pkg”的脚本时出错。} {\n        NSFilePath = \"./postinstall\";\n        NSLocalizedDescription = \"\\U8fd0\\U884c\\U8f6f\\U4ef6\\U5305\\U201ciOSOpenDev-1.6-2.pkg\\U201d\\U7684\\U811a\\U672c\\U65f6\\U51fa\\U9519\\U3002\";\n        NSURL = \"file://localhost/Users/ice/Downloads/iOSOpenDev-1.6-2.pkg#iodsetup.pkg\";\n        PKInstallPackageIdentifier = \"com.iosopendev.iosopendev162.iod-setup.pkg\"\n}\n```\n\n这里有一个解决方案：下载[iOSOpenDevInstallSolve](https://github.com/gaoshilei/iOSOpenDevInstallSolve)中的Specifications文件夹  \n\n**修复安装失败问题**  \n打开步骤4下载的Specifications文件夹，里面应该有8个文件,如果你有安装多个xcode注意放到对应的xcode里面。  \n1.\tiPhoneOS开头的四个文件放到/应用程序/Xcode/Content/Developer/Platforms/IphoneOS.platform/Developer/Library/Xcode/Specifications文件夹下（如果没有，请自己创建一个Specifications文件夹）  \n2.\tiPhone Simulator 开头的另外四个文件放入/应用程序/Xcode/Content/Developer/Platforms/iPhoneSimulator.platform/Developer/Library/Xcode/Specifications文件夹下(如果没有，请同样创建一个)  \n3.\t在/应用程序/Xcode/Content/Developer/Platforms/iPhoneSimulator.platform/Developer/文件夹下创建usr文件夹，usr文件夹下再创建一个名为bin的文件夹。  \n**注意：有时候会提示安装失败，打开Xcode新建工程，如果在工程的选项菜单中有iOSOpenDev就表示安装成功了，不用管那个安装提示。**  \n\n#####\t（2）\t安装ideviceinstaller\n>\t安装ipa包用的，也可以通过itool之类的工具，不过ideviceinstaller可以看到安装过程的过程，方便我们找到出错原因。\n\n执行命令\n\n```oc\nbrew install ideviceinstaller\n```\n如果提示brew命令找不到，那就是你的Mac还没有安装[Homebrew](http://brew.sh/index_zh-cn.html)  \n常见的报错信息：  \n\n```oc\nERROR: Could not connect to lockdownd, error code -5\n```\n这个时候只要重新安装libimobiledevice就可以了（因为ideviceinstaller依赖很多其他插件）  \n执行下面的命令：\n\n```oc\n$   brew uninstall libimobiledevice\n$   brew install --HEAD libimobiledevice\n```\n\n下载[iOS App Signer](https://github.com/DanTheMan827/ios-app-signer)重签名工具*（省去很多命令行操作，一键重签名！）*  \n\n（3）\t下载砸壳的微信应用\n>\t因为AppStore的包是被加密（有壳），无法进行重签名，所以要用砸壳的，可以用dumpdecrypted自己砸壳，也可以直接利用PP助手或者itool助手下载越狱版已经砸过壳的微信应用。  \n\n（4）\t安装yololib  \nyololib可以将dylib注入进WeChat二进制文件中，这样才能是你的Hook有作用，下载之后编译得到[yololib](https://github.com/gaoshilei/yololib)\n\n####\t代码注入以及打包安装 \n\n#####\t（1）生成静态库  \n在上一步中已经安装好iOSOpendev，此时打开Xcode新建项目，在选择工程界面会出现iOSOpendev的工程，这里我们要选择CaptainHook Tweak项目\n![iOSOpenDev](http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E9%87%8D%E7%AD%BE%E5%90%8DiOSDev.png)\n新建好的工程只有一个.mm文件，我们只需要把所有hook方法写在这个文件中即可。  \n因为非越狱机不能像越狱机一样可以安装tweak插件对原来的应用进行hook，CaptainHook使用的Runtime机制实现，利用宏命令封装类定义、方法替换等功能，简单介绍它的使用方法：  \n\n1.\thook某个类\n \n```oc\nCHDeclareClass(WCContentItemViewTemplateNewSight); \n```\n`CHDeclareClass(ClassName)`表示要hook哪个类，一般写在对这个类操作的最前面。\n\n2.\t在hook的类种新建方法  \n\n```oc\nCHDeclareMethod0(id, WCContentItemViewTemplateNewSight, SLSightDataItem){......}\n```\n`CHDeclareMethod(count, return_type, class_type, name1, arg1, ....)`表示新建一个方法，count表示这个方法的参数个数，return_type表示返回类型，class_type填写这个方法所在的类名，name1表示方法名，arg1表示第一个参数，如果没有参数则不填，以此类推。  \n\n3.\thook原来的方法  \n\n```oc\nCHOptimizedMethod0(self, void, WCContentItemViewTemplateNewSight, onLongTouch){\nCHSuper(0, className, Method);//可选\n......\n}\n```\n`CHOptimizedMethod(count, optimization, return_type, class_type, name1, type1, arg1)` 表示hook原来的方法（如果不加`CHSuper(0, className, Method)`表示复写原来的方法，CHSuper表示在当前位置调用原来的方法实现），count表示hook的方法参数个数，optimization一般填self，return_type即方法返回值类型，class_type填当前类的类名，name1是方法名，arg1是参数，如果没有参数不同填写arg，以此类推。  \n\n4.\t构造函数\n\n```oc\nCHConstructor\n{\n    @autoreleasepool\n    {\n        CHLoadLateClass(WCContentItemViewTemplateNewSight);\n        CHHook(0, WCContentItemViewTemplateNewSight, onLongTouch);    \n     }\n}\n```\n这是CaptainHook的入口函数，所有被hook的类必须在这里声明加载，类里面的方法要在这里声明hook。  \n然后就可以往类和方法中写代码了，代码太长不贴了，请自行下载  \n**[MMPlugin传送门](https://github.com/gaoshilei/MMPlugin)**  \n**这个项目中包含了小视频转发、自动抢红包、修改微信运动步数功能，自动抢红包和修改微信运动步数功能可以手动关闭。**\n>\t注意：如果用到了系统的类记住要导入相应的类库（比方说UIKit）和头文件否则编译的时候会报错。\n\n编译成功之后就可以在Products文件夹中找到编译好的静态库了  \n![编译好的静态库](http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E9%87%8D%E7%AD%BE%E5%90%8D-%E7%BC%96%E8%AF%91%E5%A5%BD%E7%9A%84%E9%9D%99%E6%80%81%E5%BA%93.png)  \n在finder中找到它，拷贝出来待用。\n#####\t(2)\t签名+打包+安装  \n进行到这里目前应该有的材料有：\n\n-\t砸壳的微信app    \n- \t编译好的MMPlugin.dylib\n-  安装好的iOS App Signer\n-  编译好的yololib文件  \n-  ideviceinstaller\n\n从原来的微信app中找到WeChat二进制文件拷贝出来待用，**删除weChat.app中的Watch文件夹、PlugIns文件夹中的WeChatShareExtensionNew.appex**，这步操作必须要做，不然安装的时候会报签名错误。  \n执行下面的命令将MMPlugin.dylib注入到WeChat二进制文件中，命令如下：\n\n```shell\nLeonLei-MBP:WeChat gaoshilei$ ./yololib WeChat MMPlugin.dylib\n```\n**执行这个命令时要确保yololib、WeChat、WeChat.app处于同一目录下。** \n\n完成之后将MMPlugin.dylib和WeChat拷贝到原来的WeChat.app中，覆盖掉原来的WeChat文件。  \n打开iOS App Signer按照下图选择好各项参数：\n![iOS App Signer](http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E9%87%8D%E7%AD%BE%E5%90%8D-iOSAppSigner.png)  \n我这里选择的是企业级证书，个人开发者证书也是可以的，一定要选择生产环境的，选好之后点击start，稍等片刻一个经过重签名的ipa包就生成了。  \n连上你的手机执行下面的命令查看ideviceinstaller是否连接上手机：\n\n```shell\nLeonLei-MBP:WeChat gaoshilei$ ideviceinfo\n```\n如果打印出一大堆手机的信息表示连接成功可以安装ipa包，如果不成功请根据错误提示进行调整。执行下面的命令进行安装：  \n\n```shell\nLeonLei-MBP:WeChat gaoshilei$ ideviceinstaller -i WeChat.ipa \nWARNING: could not locate iTunesMetadata.plist in archive!\nWARNING: could not locate Payload/WeChat.app/SC_Info/WeChat.sinf in archive!\nCopying 'WeChat.ipa' to device... DONE.\nInstalling 'com.xxxxxxxxxxxx'\n - CreatingStagingDirectory (5%)\n - ExtractingPackage (15%)\n - InspectingPackage (20%)\n - TakingInstallLock (20%)\n - PreflightingApplication (30%)\n - InstallingEmbeddedProfile (30%)\n - VerifyingApplication (40%)\n - CreatingContainer (50%)\n - InstallingApplication (60%)\n - PostflightingApplication (70%)\n - SandboxingApplication (80%)\n - GeneratingApplicationMap (90%)\n - Complete\n```\n安装完成，在手机上打开微信试试我们添加的新功能吧！如果某个环节卡住会报错，请根据报错信息进行修改。请看效果图：  \n![小视频转发](http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E9%87%8D%E7%AD%BE%E5%90%8D-%E5%B0%8F%E8%A7%86%E9%A2%91%E8%BD%AC%E5%8F%91%E6%95%88%E6%9E%9C%E5%9B%BE.jpg)  \n\n####\t有任何问题请在文章评论区留言，或者在博客首页点击邮件联系我。\n","slug":"手把手教你逆向微信之朋友圈小视频转发（下）","published":1,"updated":"2016-11-11T09:42:02.823Z","_id":"civdheww000064h6qpfg5y0om","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>   接上篇<a href=\"http://www.gaoshilei.com/2016/11/09/手把手教你逆向微信之朋友圈小视频转发（上）/\">《手把手教你逆向微信之朋友圈小视频转发（上）》</a></p>\n</blockquote>\n<h2 id=\"代码编写及重签名打包安装-（下篇）\"><a href=\"#代码编写及重签名打包安装-（下篇）\" class=\"headerlink\" title=\"代码编写及重签名打包安装 （下篇）\"></a>代码编写及重签名打包安装 （下篇）</h2><p>小视频的转发支持4个功能，转发至朋友圈、转发至好友、保存到本地相册、拷贝小视频链接到粘贴板。如果小视频没有下载长按时只会出现拷贝url链接。<br><a id=\"more\"></a><br><em>（非越狱机和不想利用tweak安装的越狱机<a href=\"#section_two\">点我跳到第二节</a>）</em></p>\n<h3 id=\"1-越狱机打包安装（tweak安装）\"><a href=\"#1-越狱机打包安装（tweak安装）\" class=\"headerlink\" title=\"1.越狱机打包安装（tweak安装）\"></a>1.越狱机打包安装（tweak安装）</h3><p>1&gt;    新建tweak工程<br>2&gt;    编写tweak文件</p>\n<p>这里要hook两个类，分别是WCContentItemViewTemplateNewSight和SightMomentEditViewController，在WCContentItemViewTemplateNewSight中hook住onLongTouch方法然后添加menu弹出菜单，依次添加响应的方法，具体的代码如下：  </p>\n<ul>\n<li>拷贝小视频的url链接</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">  NSString *localPath = [[self iOSREMediaItemFromSight] pathForSightData];</div><div class=\"line\">    UISaveVideoAtPathToSavedPhotosAlbum(localPath, nil, nil, nil);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>保存小视频到本地相册</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSString *localPath = [[self iOSREMediaItemFromSight] pathForSightData];</div><div class=\"line\">    UISaveVideoAtPathToSavedPhotosAlbum(localPath, nil, nil, nil);</div></pre></td></tr></table></figure>\n<ul>\n<li>转发到朋友圈</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">SightMomentEditViewController *editSightVC = [[%c(SightMomentEditViewController) alloc] init];</div><div class=\"line\">   NSString *localPath = [[self iOSREMediaItemFromSight] pathForSightData];</div><div class=\"line\">   UIImage *image = [[self valueForKey:@&quot;_sightView&quot;] getImage];</div><div class=\"line\">   [editSightVC setRealMoviePath:localPath];</div><div class=\"line\">   [editSightVC setMoviePath:localPath];</div><div class=\"line\">   [editSightVC setRealThumbImage:image];</div><div class=\"line\">   [editSightVC setThumbImage:image];</div><div class=\"line\">   [WCTimelineVC presentViewController:editSightVC animated:YES completion:^&#123;</div><div class=\"line\"></div><div class=\"line\">   &#125;];</div></pre></td></tr></table></figure>\n<ul>\n<li>转发给好友</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[self sendSightToFriend];</div></pre></td></tr></table></figure>\n<ul>\n<li>长按手势</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">UIMenuController *menuController = [UIMenuController sharedMenuController];</div><div class=\"line\">if (menuController.isMenuVisible) return;//防止出现menu闪屏的情况</div><div class=\"line\">[self becomeFirstResponder];</div><div class=\"line\">NSString *localPath = [[self iOSREMediaItemFromSight] pathForSightData];</div><div class=\"line\">BOOL isExist =[[NSFileManager defaultManager] fileExistsAtPath:localPath];</div><div class=\"line\">UIMenuItem *retweetMenuItem = [[UIMenuItem alloc] initWithTitle:@&quot;朋友圈&quot; action:@selector(SLRetweetSight)];</div><div class=\"line\">UIMenuItem *saveToDiskMenuItem = [[UIMenuItem alloc] initWithTitle:@&quot;保存到相册&quot; action:@selector(SLSightSaveToDisk)];</div><div class=\"line\">UIMenuItem *sendToFriendsMenuItem = [[UIMenuItem alloc] initWithTitle:@&quot;好友&quot; action:@selector(SLSightSendToFriends)];</div><div class=\"line\">UIMenuItem *copyURLMenuItem = [[UIMenuItem alloc] initWithTitle:@&quot;复制链接&quot; action:@selector(SLSightCopyUrl)];</div><div class=\"line\">if(isExist)&#123;</div><div class=\"line\">    [menuController setMenuItems:@[retweetMenuItem,sendToFriendsMenuItem,saveToDiskMenuItem,copyURLMenuItem]];</div><div class=\"line\">&#125;else&#123;</div><div class=\"line\">    [menuController setMenuItems:@[copyURLMenuItem]];</div><div class=\"line\">&#125;</div><div class=\"line\">[menuController setTargetRect:CGRectZero inView:self];</div><div class=\"line\">[menuController setMenuVisible:YES animated:YES];</div></pre></td></tr></table></figure>\n<p>具体的tweak文件我放在了github上，<a href=\"https://github.com/gaoshilei/WCSightRetweet\" target=\"_blank\" rel=\"external\">WCSightRetweet传送门</a></p>\n<p>3&gt;    编写WCTimelineRetweet.h头文件<br>编写这个头文件的目的是防止tweak在编译期间报错，我们可以在编写好tweak试着编译一下，然后根据报错信息来添加这个头文件的内容，在这个文件中要声明在tweak我们用到的微信的类和方法，具体请看代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface WCUrl : NSObject</div><div class=\"line\">@property(retain, nonatomic) NSString *url;</div><div class=\"line\">@end</div><div class=\"line\">@interface WCContentItem : NSObject</div><div class=\"line\">@property(retain, nonatomic) NSMutableArray *mediaList;</div><div class=\"line\">@end</div><div class=\"line\">@interface WCDataItem : NSObject</div><div class=\"line\">@property(retain, nonatomic) WCContentItem *contentObj;</div><div class=\"line\">@end</div><div class=\"line\">@interface WCMediaItem : NSObject</div><div class=\"line\">@property(retain, nonatomic) WCUrl *dataUrl;</div><div class=\"line\">- (id)pathForSightData;</div><div class=\"line\">@end</div><div class=\"line\">@interface MMServiceCenter : NSObject</div><div class=\"line\">+ (id)defaultCenter;</div><div class=\"line\">- (id)getService:(Class)arg1;</div><div class=\"line\">@end</div><div class=\"line\">@interface WCFacade : NSObject</div><div class=\"line\">- (id)getTimelineDataItemOfIndex:(long long)arg1;</div><div class=\"line\">@end</div><div class=\"line\">@interface WCSightView : UIView</div><div class=\"line\">- (id)getImage;</div><div class=\"line\">@end</div><div class=\"line\">@interface WCContentItemViewTemplateNewSight : UIView&#123;</div><div class=\"line\">    WCSightView *_sightView;</div><div class=\"line\">&#125;</div><div class=\"line\">- (WCMediaItem *)iOSREMediaItemFromSight;</div><div class=\"line\">- (void)iOSREOnSaveToDisk;</div><div class=\"line\">- (void)iOSREOnCopyURL;</div><div class=\"line\">- (void)sendSightToFriend;</div><div class=\"line\">@end</div><div class=\"line\">@interface SightMomentEditViewController : UIViewController</div><div class=\"line\">@property(retain, nonatomic) NSString *moviePath;</div><div class=\"line\">@property(retain, nonatomic) NSString *realMoviePath;</div><div class=\"line\">@property(retain, nonatomic) UIImage *thumbImage;</div><div class=\"line\">@property(retain, nonatomic) UIImage *realThumbImage;</div><div class=\"line\">- (void)makeInputController;</div><div class=\"line\">@end</div><div class=\"line\">@interface MMWindowController : NSObject</div><div class=\"line\">- (id)initWithViewController:(id)arg1 windowLevel:(int)arg2;</div><div class=\"line\">- (void)showWindowAnimated:(_Bool)arg1;</div><div class=\"line\">@end</div><div class=\"line\">@interface WCTimeLineViewController : UIViewController</div><div class=\"line\">- (long long)calcDataItemIndex:(long long)arg1;</div><div class=\"line\">@end</div><div class=\"line\">@interface MMTableViewCell : UIView</div><div class=\"line\">@end</div><div class=\"line\">@interface MMTableView : UIView</div><div class=\"line\">- (id)indexPathForCell:(id)cell;</div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p>4&gt;    Makefile文件修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">THEOS_DEVICE_IP = 192.168.0.115//手机所在的IP</div><div class=\"line\">include $(THEOS)/makefiles/common.mk</div><div class=\"line\">ARCHS = arm64//支持的CPU架构</div><div class=\"line\">TWEAK_NAME = WCTimelineSightRetweet</div><div class=\"line\">WCTimelineSightRetweet_FILES = Tweak.xm</div><div class=\"line\">WCTimelineSightRetweet_FRAMEWORKS = UIKit CoreGraphics//导入系统的framework</div><div class=\"line\">include $(THEOS_MAKE_PATH)/tweak.mk</div><div class=\"line\"></div><div class=\"line\">after-install::</div><div class=\"line\">\tinstall.exec &quot;killall -9 WeChat&quot;//安装完成杀掉的进程</div></pre></td></tr></table></figure>\n<p>control文件不需要做修改，然后执行命令<code>make package install</code>安装到手机，微信会被杀掉，然后再次打开微信转发小视频的功能已经加上了。  </p>\n<h3 id=\"2-微信重签名打包安装\"><a href=\"#2-微信重签名打包安装\" class=\"headerlink\" title=\"2.微信重签名打包安装 \"></a><span id=\"section_two\">2.微信重签名打包安装 </span></h3><h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><h5 id=\"（1）-安装iOSOpenDev\"><a href=\"#（1）-安装iOSOpenDev\" class=\"headerlink\" title=\"（1）    安装iOSOpenDev\"></a>（1）    安装iOSOpenDev</h5><p>1&gt;    安装 <a href=\"https://www.macports.org/install.php\" target=\"_blank\" rel=\"external\">macports</a> (安装过程需要连接VPN,否则无法安装成功)</p>\n<p>2&gt;    安装完MacPorts后打开终端，输入 <code>sudo port -v selfupdate</code> 更新MacPorts到最新版本，时间可能比较长。</p>\n<p>3&gt;    更新完MacPorts后安装DPKG文件，在终端输入<code>sudo port -f install dpkg</code></p>\n<p>4&gt;    下载安装 <a href=\"http://iosopendev.com/download\" target=\"_blank\" rel=\"external\">iOSOpendev</a> 如果安装失败，可以通过 <code>Command + L</code> 查看安装中出现的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">PackageKit: Install Failed: Error Domain=PKInstallErrorDomain Code=112 &quot;运行软件包“iOSOpenDev-1.6-2.pkg”的脚本时出错。&quot; UserInfo=&#123;NSFilePath=./postinstall, NSURL=file://localhost/Users/ice/Downloads/iOSOpenDev-1.6-2.pkg#iodsetup.pkg, PKInstallPackageIdentifier=com.iosopendev.iosopendev162.iod-setup.pkg, NSLocalizedDescription=运行软件包“iOSOpenDev-1.6-2.pkg”的脚本时出错。&#125; &#123;</div><div class=\"line\">        NSFilePath = &quot;./postinstall&quot;;</div><div class=\"line\">        NSLocalizedDescription = &quot;\\U8fd0\\U884c\\U8f6f\\U4ef6\\U5305\\U201ciOSOpenDev-1.6-2.pkg\\U201d\\U7684\\U811a\\U672c\\U65f6\\U51fa\\U9519\\U3002&quot;;</div><div class=\"line\">        NSURL = &quot;file://localhost/Users/ice/Downloads/iOSOpenDev-1.6-2.pkg#iodsetup.pkg&quot;;</div><div class=\"line\">        PKInstallPackageIdentifier = &quot;com.iosopendev.iosopendev162.iod-setup.pkg&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里有一个解决方案：下载<a href=\"https://github.com/gaoshilei/iOSOpenDevInstallSolve\" target=\"_blank\" rel=\"external\">iOSOpenDevInstallSolve</a>中的Specifications文件夹  </p>\n<p><strong>修复安装失败问题</strong><br>打开步骤4下载的Specifications文件夹，里面应该有8个文件,如果你有安装多个xcode注意放到对应的xcode里面。  </p>\n<ol>\n<li>iPhoneOS开头的四个文件放到/应用程序/Xcode/Content/Developer/Platforms/IphoneOS.platform/Developer/Library/Xcode/Specifications文件夹下（如果没有，请自己创建一个Specifications文件夹）  </li>\n<li>iPhone Simulator 开头的另外四个文件放入/应用程序/Xcode/Content/Developer/Platforms/iPhoneSimulator.platform/Developer/Library/Xcode/Specifications文件夹下(如果没有，请同样创建一个)  </li>\n<li>在/应用程序/Xcode/Content/Developer/Platforms/iPhoneSimulator.platform/Developer/文件夹下创建usr文件夹，usr文件夹下再创建一个名为bin的文件夹。<br><strong>注意：有时候会提示安装失败，打开Xcode新建工程，如果在工程的选项菜单中有iOSOpenDev就表示安装成功了，不用管那个安装提示。</strong>  </li>\n</ol>\n<h5 id=\"（2）-安装ideviceinstaller\"><a href=\"#（2）-安装ideviceinstaller\" class=\"headerlink\" title=\"（2）    安装ideviceinstaller\"></a>（2）    安装ideviceinstaller</h5><blockquote>\n<p>   安装ipa包用的，也可以通过itool之类的工具，不过ideviceinstaller可以看到安装过程的过程，方便我们找到出错原因。</p>\n</blockquote>\n<p>执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install ideviceinstaller</div></pre></td></tr></table></figure>\n<p>如果提示brew命令找不到，那就是你的Mac还没有安装<a href=\"http://brew.sh/index_zh-cn.html\" target=\"_blank\" rel=\"external\">Homebrew</a><br>常见的报错信息：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ERROR: Could not connect to lockdownd, error code -5</div></pre></td></tr></table></figure>\n<p>这个时候只要重新安装libimobiledevice就可以了（因为ideviceinstaller依赖很多其他插件）<br>执行下面的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$   brew uninstall libimobiledevice</div><div class=\"line\">$   brew install --HEAD libimobiledevice</div></pre></td></tr></table></figure>\n<p>下载<a href=\"https://github.com/DanTheMan827/ios-app-signer\" target=\"_blank\" rel=\"external\">iOS App Signer</a>重签名工具<em>（省去很多命令行操作，一键重签名！）</em>  </p>\n<p>（3）    下载砸壳的微信应用</p>\n<blockquote>\n<p>   因为AppStore的包是被加密（有壳），无法进行重签名，所以要用砸壳的，可以用dumpdecrypted自己砸壳，也可以直接利用PP助手或者itool助手下载越狱版已经砸过壳的微信应用。  </p>\n</blockquote>\n<p>（4）    安装yololib<br>yololib可以将dylib注入进WeChat二进制文件中，这样才能是你的Hook有作用，下载之后编译得到<a href=\"https://github.com/gaoshilei/yololib\" target=\"_blank\" rel=\"external\">yololib</a></p>\n<h4 id=\"代码注入以及打包安装\"><a href=\"#代码注入以及打包安装\" class=\"headerlink\" title=\"代码注入以及打包安装\"></a>代码注入以及打包安装</h4><h5 id=\"（1）生成静态库\"><a href=\"#（1）生成静态库\" class=\"headerlink\" title=\"（1）生成静态库\"></a>（1）生成静态库</h5><p>在上一步中已经安装好iOSOpendev，此时打开Xcode新建项目，在选择工程界面会出现iOSOpendev的工程，这里我们要选择CaptainHook Tweak项目<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E9%87%8D%E7%AD%BE%E5%90%8DiOSDev.png\" alt=\"iOSOpenDev\"><br>新建好的工程只有一个.mm文件，我们只需要把所有hook方法写在这个文件中即可。<br>因为非越狱机不能像越狱机一样可以安装tweak插件对原来的应用进行hook，CaptainHook使用的Runtime机制实现，利用宏命令封装类定义、方法替换等功能，简单介绍它的使用方法：  </p>\n<ol>\n<li>hook某个类</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CHDeclareClass(WCContentItemViewTemplateNewSight);</div></pre></td></tr></table></figure>\n<p><code>CHDeclareClass(ClassName)</code>表示要hook哪个类，一般写在对这个类操作的最前面。</p>\n<ol>\n<li>在hook的类种新建方法  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CHDeclareMethod0(id, WCContentItemViewTemplateNewSight, SLSightDataItem)&#123;......&#125;</div></pre></td></tr></table></figure>\n<p><code>CHDeclareMethod(count, return_type, class_type, name1, arg1, ....)</code>表示新建一个方法，count表示这个方法的参数个数，return_type表示返回类型，class_type填写这个方法所在的类名，name1表示方法名，arg1表示第一个参数，如果没有参数则不填，以此类推。  </p>\n<ol>\n<li>hook原来的方法  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">CHOptimizedMethod0(self, void, WCContentItemViewTemplateNewSight, onLongTouch)&#123;</div><div class=\"line\">CHSuper(0, className, Method);//可选</div><div class=\"line\">......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>CHOptimizedMethod(count, optimization, return_type, class_type, name1, type1, arg1)</code> 表示hook原来的方法（如果不加<code>CHSuper(0, className, Method)</code>表示复写原来的方法，CHSuper表示在当前位置调用原来的方法实现），count表示hook的方法参数个数，optimization一般填self，return_type即方法返回值类型，class_type填当前类的类名，name1是方法名，arg1是参数，如果没有参数不同填写arg，以此类推。  </p>\n<ol>\n<li>构造函数</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">CHConstructor</div><div class=\"line\">&#123;</div><div class=\"line\">    @autoreleasepool</div><div class=\"line\">    &#123;</div><div class=\"line\">        CHLoadLateClass(WCContentItemViewTemplateNewSight);</div><div class=\"line\">        CHHook(0, WCContentItemViewTemplateNewSight, onLongTouch);    </div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这是CaptainHook的入口函数，所有被hook的类必须在这里声明加载，类里面的方法要在这里声明hook。<br>然后就可以往类和方法中写代码了，代码太长不贴了，请自行下载<br><strong><a href=\"https://github.com/gaoshilei/MMPlugin\" target=\"_blank\" rel=\"external\">MMPlugin传送门</a></strong><br><strong>这个项目中包含了小视频转发、自动抢红包、修改微信运动步数功能，自动抢红包和修改微信运动步数功能可以手动关闭。</strong></p>\n<blockquote>\n<p>   注意：如果用到了系统的类记住要导入相应的类库（比方说UIKit）和头文件否则编译的时候会报错。</p>\n</blockquote>\n<p>编译成功之后就可以在Products文件夹中找到编译好的静态库了<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E9%87%8D%E7%AD%BE%E5%90%8D-%E7%BC%96%E8%AF%91%E5%A5%BD%E7%9A%84%E9%9D%99%E6%80%81%E5%BA%93.png\" alt=\"编译好的静态库\"><br>在finder中找到它，拷贝出来待用。</p>\n<h5 id=\"2-签名-打包-安装\"><a href=\"#2-签名-打包-安装\" class=\"headerlink\" title=\"(2)    签名+打包+安装\"></a>(2)    签名+打包+安装</h5><p>进行到这里目前应该有的材料有：</p>\n<ul>\n<li>砸壳的微信app    </li>\n<li>编译好的MMPlugin.dylib</li>\n<li>安装好的iOS App Signer</li>\n<li>编译好的yololib文件  </li>\n<li>ideviceinstaller</li>\n</ul>\n<p>从原来的微信app中找到WeChat二进制文件拷贝出来待用，<strong>删除weChat.app中的Watch文件夹、PlugIns文件夹中的WeChatShareExtensionNew.appex</strong>，这步操作必须要做，不然安装的时候会报签名错误。<br>执行下面的命令将MMPlugin.dylib注入到WeChat二进制文件中，命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:WeChat gaoshilei$ ./yololib WeChat MMPlugin.dylib</div></pre></td></tr></table></figure>\n<p><strong>执行这个命令时要确保yololib、WeChat、WeChat.app处于同一目录下。</strong> </p>\n<p>完成之后将MMPlugin.dylib和WeChat拷贝到原来的WeChat.app中，覆盖掉原来的WeChat文件。<br>打开iOS App Signer按照下图选择好各项参数：<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E9%87%8D%E7%AD%BE%E5%90%8D-iOSAppSigner.png\" alt=\"iOS App Signer\"><br>我这里选择的是企业级证书，个人开发者证书也是可以的，一定要选择生产环境的，选好之后点击start，稍等片刻一个经过重签名的ipa包就生成了。<br>连上你的手机执行下面的命令查看ideviceinstaller是否连接上手机：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:WeChat gaoshilei$ ideviceinfo</div></pre></td></tr></table></figure>\n<p>如果打印出一大堆手机的信息表示连接成功可以安装ipa包，如果不成功请根据错误提示进行调整。执行下面的命令进行安装：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:WeChat gaoshilei$ ideviceinstaller -i WeChat.ipa </div><div class=\"line\">WARNING: could not locate iTunesMetadata.plist in archive!</div><div class=\"line\">WARNING: could not locate Payload/WeChat.app/SC_Info/WeChat.sinf in archive!</div><div class=\"line\">Copying &apos;WeChat.ipa&apos; to device... DONE.</div><div class=\"line\">Installing &apos;com.xxxxxxxxxxxx&apos;</div><div class=\"line\"> - CreatingStagingDirectory (5%)</div><div class=\"line\"> - ExtractingPackage (15%)</div><div class=\"line\"> - InspectingPackage (20%)</div><div class=\"line\"> - TakingInstallLock (20%)</div><div class=\"line\"> - PreflightingApplication (30%)</div><div class=\"line\"> - InstallingEmbeddedProfile (30%)</div><div class=\"line\"> - VerifyingApplication (40%)</div><div class=\"line\"> - CreatingContainer (50%)</div><div class=\"line\"> - InstallingApplication (60%)</div><div class=\"line\"> - PostflightingApplication (70%)</div><div class=\"line\"> - SandboxingApplication (80%)</div><div class=\"line\"> - GeneratingApplicationMap (90%)</div><div class=\"line\"> - Complete</div></pre></td></tr></table></figure>\n<p>安装完成，在手机上打开微信试试我们添加的新功能吧！如果某个环节卡住会报错，请根据报错信息进行修改。请看效果图：<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E9%87%8D%E7%AD%BE%E5%90%8D-%E5%B0%8F%E8%A7%86%E9%A2%91%E8%BD%AC%E5%8F%91%E6%95%88%E6%9E%9C%E5%9B%BE.jpg\" alt=\"小视频转发\">  </p>\n<h4 id=\"有任何问题请在文章评论区留言，或者在博客首页点击邮件联系我。\"><a href=\"#有任何问题请在文章评论区留言，或者在博客首页点击邮件联系我。\" class=\"headerlink\" title=\"有任何问题请在文章评论区留言，或者在博客首页点击邮件联系我。\"></a>有任何问题请在文章评论区留言，或者在博客首页点击邮件联系我。</h4>","excerpt":"<blockquote>\n<p>   接上篇<a href=\"http://www.gaoshilei.com/2016/11/09/手把手教你逆向微信之朋友圈小视频转发（上）/\">《手把手教你逆向微信之朋友圈小视频转发（上）》</a></p>\n</blockquote>\n<h2 id=\"代码编写及重签名打包安装-（下篇）\"><a href=\"#代码编写及重签名打包安装-（下篇）\" class=\"headerlink\" title=\"代码编写及重签名打包安装 （下篇）\"></a>代码编写及重签名打包安装 （下篇）</h2><p>小视频的转发支持4个功能，转发至朋友圈、转发至好友、保存到本地相册、拷贝小视频链接到粘贴板。如果小视频没有下载长按时只会出现拷贝url链接。<br>","more":"<br><em>（非越狱机和不想利用tweak安装的越狱机<a href=\"#section_two\">点我跳到第二节</a>）</em></p>\n<h3 id=\"1-越狱机打包安装（tweak安装）\"><a href=\"#1-越狱机打包安装（tweak安装）\" class=\"headerlink\" title=\"1.越狱机打包安装（tweak安装）\"></a>1.越狱机打包安装（tweak安装）</h3><p>1&gt;    新建tweak工程<br>2&gt;    编写tweak文件</p>\n<p>这里要hook两个类，分别是WCContentItemViewTemplateNewSight和SightMomentEditViewController，在WCContentItemViewTemplateNewSight中hook住onLongTouch方法然后添加menu弹出菜单，依次添加响应的方法，具体的代码如下：  </p>\n<ul>\n<li>拷贝小视频的url链接</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">  NSString *localPath = [[self iOSREMediaItemFromSight] pathForSightData];</div><div class=\"line\">    UISaveVideoAtPathToSavedPhotosAlbum(localPath, nil, nil, nil);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>保存小视频到本地相册</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSString *localPath = [[self iOSREMediaItemFromSight] pathForSightData];</div><div class=\"line\">    UISaveVideoAtPathToSavedPhotosAlbum(localPath, nil, nil, nil);</div></pre></td></tr></table></figure>\n<ul>\n<li>转发到朋友圈</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">SightMomentEditViewController *editSightVC = [[%c(SightMomentEditViewController) alloc] init];</div><div class=\"line\">   NSString *localPath = [[self iOSREMediaItemFromSight] pathForSightData];</div><div class=\"line\">   UIImage *image = [[self valueForKey:@&quot;_sightView&quot;] getImage];</div><div class=\"line\">   [editSightVC setRealMoviePath:localPath];</div><div class=\"line\">   [editSightVC setMoviePath:localPath];</div><div class=\"line\">   [editSightVC setRealThumbImage:image];</div><div class=\"line\">   [editSightVC setThumbImage:image];</div><div class=\"line\">   [WCTimelineVC presentViewController:editSightVC animated:YES completion:^&#123;</div><div class=\"line\"></div><div class=\"line\">   &#125;];</div></pre></td></tr></table></figure>\n<ul>\n<li>转发给好友</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[self sendSightToFriend];</div></pre></td></tr></table></figure>\n<ul>\n<li>长按手势</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">UIMenuController *menuController = [UIMenuController sharedMenuController];</div><div class=\"line\">if (menuController.isMenuVisible) return;//防止出现menu闪屏的情况</div><div class=\"line\">[self becomeFirstResponder];</div><div class=\"line\">NSString *localPath = [[self iOSREMediaItemFromSight] pathForSightData];</div><div class=\"line\">BOOL isExist =[[NSFileManager defaultManager] fileExistsAtPath:localPath];</div><div class=\"line\">UIMenuItem *retweetMenuItem = [[UIMenuItem alloc] initWithTitle:@&quot;朋友圈&quot; action:@selector(SLRetweetSight)];</div><div class=\"line\">UIMenuItem *saveToDiskMenuItem = [[UIMenuItem alloc] initWithTitle:@&quot;保存到相册&quot; action:@selector(SLSightSaveToDisk)];</div><div class=\"line\">UIMenuItem *sendToFriendsMenuItem = [[UIMenuItem alloc] initWithTitle:@&quot;好友&quot; action:@selector(SLSightSendToFriends)];</div><div class=\"line\">UIMenuItem *copyURLMenuItem = [[UIMenuItem alloc] initWithTitle:@&quot;复制链接&quot; action:@selector(SLSightCopyUrl)];</div><div class=\"line\">if(isExist)&#123;</div><div class=\"line\">    [menuController setMenuItems:@[retweetMenuItem,sendToFriendsMenuItem,saveToDiskMenuItem,copyURLMenuItem]];</div><div class=\"line\">&#125;else&#123;</div><div class=\"line\">    [menuController setMenuItems:@[copyURLMenuItem]];</div><div class=\"line\">&#125;</div><div class=\"line\">[menuController setTargetRect:CGRectZero inView:self];</div><div class=\"line\">[menuController setMenuVisible:YES animated:YES];</div></pre></td></tr></table></figure>\n<p>具体的tweak文件我放在了github上，<a href=\"https://github.com/gaoshilei/WCSightRetweet\">WCSightRetweet传送门</a></p>\n<p>3&gt;    编写WCTimelineRetweet.h头文件<br>编写这个头文件的目的是防止tweak在编译期间报错，我们可以在编写好tweak试着编译一下，然后根据报错信息来添加这个头文件的内容，在这个文件中要声明在tweak我们用到的微信的类和方法，具体请看代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface WCUrl : NSObject</div><div class=\"line\">@property(retain, nonatomic) NSString *url;</div><div class=\"line\">@end</div><div class=\"line\">@interface WCContentItem : NSObject</div><div class=\"line\">@property(retain, nonatomic) NSMutableArray *mediaList;</div><div class=\"line\">@end</div><div class=\"line\">@interface WCDataItem : NSObject</div><div class=\"line\">@property(retain, nonatomic) WCContentItem *contentObj;</div><div class=\"line\">@end</div><div class=\"line\">@interface WCMediaItem : NSObject</div><div class=\"line\">@property(retain, nonatomic) WCUrl *dataUrl;</div><div class=\"line\">- (id)pathForSightData;</div><div class=\"line\">@end</div><div class=\"line\">@interface MMServiceCenter : NSObject</div><div class=\"line\">+ (id)defaultCenter;</div><div class=\"line\">- (id)getService:(Class)arg1;</div><div class=\"line\">@end</div><div class=\"line\">@interface WCFacade : NSObject</div><div class=\"line\">- (id)getTimelineDataItemOfIndex:(long long)arg1;</div><div class=\"line\">@end</div><div class=\"line\">@interface WCSightView : UIView</div><div class=\"line\">- (id)getImage;</div><div class=\"line\">@end</div><div class=\"line\">@interface WCContentItemViewTemplateNewSight : UIView&#123;</div><div class=\"line\">    WCSightView *_sightView;</div><div class=\"line\">&#125;</div><div class=\"line\">- (WCMediaItem *)iOSREMediaItemFromSight;</div><div class=\"line\">- (void)iOSREOnSaveToDisk;</div><div class=\"line\">- (void)iOSREOnCopyURL;</div><div class=\"line\">- (void)sendSightToFriend;</div><div class=\"line\">@end</div><div class=\"line\">@interface SightMomentEditViewController : UIViewController</div><div class=\"line\">@property(retain, nonatomic) NSString *moviePath;</div><div class=\"line\">@property(retain, nonatomic) NSString *realMoviePath;</div><div class=\"line\">@property(retain, nonatomic) UIImage *thumbImage;</div><div class=\"line\">@property(retain, nonatomic) UIImage *realThumbImage;</div><div class=\"line\">- (void)makeInputController;</div><div class=\"line\">@end</div><div class=\"line\">@interface MMWindowController : NSObject</div><div class=\"line\">- (id)initWithViewController:(id)arg1 windowLevel:(int)arg2;</div><div class=\"line\">- (void)showWindowAnimated:(_Bool)arg1;</div><div class=\"line\">@end</div><div class=\"line\">@interface WCTimeLineViewController : UIViewController</div><div class=\"line\">- (long long)calcDataItemIndex:(long long)arg1;</div><div class=\"line\">@end</div><div class=\"line\">@interface MMTableViewCell : UIView</div><div class=\"line\">@end</div><div class=\"line\">@interface MMTableView : UIView</div><div class=\"line\">- (id)indexPathForCell:(id)cell;</div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p>4&gt;    Makefile文件修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">THEOS_DEVICE_IP = 192.168.0.115//手机所在的IP</div><div class=\"line\">include $(THEOS)/makefiles/common.mk</div><div class=\"line\">ARCHS = arm64//支持的CPU架构</div><div class=\"line\">TWEAK_NAME = WCTimelineSightRetweet</div><div class=\"line\">WCTimelineSightRetweet_FILES = Tweak.xm</div><div class=\"line\">WCTimelineSightRetweet_FRAMEWORKS = UIKit CoreGraphics//导入系统的framework</div><div class=\"line\">include $(THEOS_MAKE_PATH)/tweak.mk</div><div class=\"line\"></div><div class=\"line\">after-install::</div><div class=\"line\">\tinstall.exec &quot;killall -9 WeChat&quot;//安装完成杀掉的进程</div></pre></td></tr></table></figure>\n<p>control文件不需要做修改，然后执行命令<code>make package install</code>安装到手机，微信会被杀掉，然后再次打开微信转发小视频的功能已经加上了。  </p>\n<h3 id=\"2-微信重签名打包安装\"><a href=\"#2-微信重签名打包安装\" class=\"headerlink\" title=\"2.微信重签名打包安装 \"></a><span id=\"section_two\">2.微信重签名打包安装 </span></h3><h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><h5 id=\"（1）-安装iOSOpenDev\"><a href=\"#（1）-安装iOSOpenDev\" class=\"headerlink\" title=\"（1）    安装iOSOpenDev\"></a>（1）    安装iOSOpenDev</h5><p>1&gt;    安装 <a href=\"https://www.macports.org/install.php\">macports</a> (安装过程需要连接VPN,否则无法安装成功)</p>\n<p>2&gt;    安装完MacPorts后打开终端，输入 <code>sudo port -v selfupdate</code> 更新MacPorts到最新版本，时间可能比较长。</p>\n<p>3&gt;    更新完MacPorts后安装DPKG文件，在终端输入<code>sudo port -f install dpkg</code></p>\n<p>4&gt;    下载安装 <a href=\"http://iosopendev.com/download\">iOSOpendev</a> 如果安装失败，可以通过 <code>Command + L</code> 查看安装中出现的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">PackageKit: Install Failed: Error Domain=PKInstallErrorDomain Code=112 &quot;运行软件包“iOSOpenDev-1.6-2.pkg”的脚本时出错。&quot; UserInfo=&#123;NSFilePath=./postinstall, NSURL=file://localhost/Users/ice/Downloads/iOSOpenDev-1.6-2.pkg#iodsetup.pkg, PKInstallPackageIdentifier=com.iosopendev.iosopendev162.iod-setup.pkg, NSLocalizedDescription=运行软件包“iOSOpenDev-1.6-2.pkg”的脚本时出错。&#125; &#123;</div><div class=\"line\">        NSFilePath = &quot;./postinstall&quot;;</div><div class=\"line\">        NSLocalizedDescription = &quot;\\U8fd0\\U884c\\U8f6f\\U4ef6\\U5305\\U201ciOSOpenDev-1.6-2.pkg\\U201d\\U7684\\U811a\\U672c\\U65f6\\U51fa\\U9519\\U3002&quot;;</div><div class=\"line\">        NSURL = &quot;file://localhost/Users/ice/Downloads/iOSOpenDev-1.6-2.pkg#iodsetup.pkg&quot;;</div><div class=\"line\">        PKInstallPackageIdentifier = &quot;com.iosopendev.iosopendev162.iod-setup.pkg&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里有一个解决方案：下载<a href=\"https://github.com/gaoshilei/iOSOpenDevInstallSolve\">iOSOpenDevInstallSolve</a>中的Specifications文件夹  </p>\n<p><strong>修复安装失败问题</strong><br>打开步骤4下载的Specifications文件夹，里面应该有8个文件,如果你有安装多个xcode注意放到对应的xcode里面。  </p>\n<ol>\n<li>iPhoneOS开头的四个文件放到/应用程序/Xcode/Content/Developer/Platforms/IphoneOS.platform/Developer/Library/Xcode/Specifications文件夹下（如果没有，请自己创建一个Specifications文件夹）  </li>\n<li>iPhone Simulator 开头的另外四个文件放入/应用程序/Xcode/Content/Developer/Platforms/iPhoneSimulator.platform/Developer/Library/Xcode/Specifications文件夹下(如果没有，请同样创建一个)  </li>\n<li>在/应用程序/Xcode/Content/Developer/Platforms/iPhoneSimulator.platform/Developer/文件夹下创建usr文件夹，usr文件夹下再创建一个名为bin的文件夹。<br><strong>注意：有时候会提示安装失败，打开Xcode新建工程，如果在工程的选项菜单中有iOSOpenDev就表示安装成功了，不用管那个安装提示。</strong>  </li>\n</ol>\n<h5 id=\"（2）-安装ideviceinstaller\"><a href=\"#（2）-安装ideviceinstaller\" class=\"headerlink\" title=\"（2）    安装ideviceinstaller\"></a>（2）    安装ideviceinstaller</h5><blockquote>\n<p>   安装ipa包用的，也可以通过itool之类的工具，不过ideviceinstaller可以看到安装过程的过程，方便我们找到出错原因。</p>\n</blockquote>\n<p>执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install ideviceinstaller</div></pre></td></tr></table></figure>\n<p>如果提示brew命令找不到，那就是你的Mac还没有安装<a href=\"http://brew.sh/index_zh-cn.html\">Homebrew</a><br>常见的报错信息：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ERROR: Could not connect to lockdownd, error code -5</div></pre></td></tr></table></figure>\n<p>这个时候只要重新安装libimobiledevice就可以了（因为ideviceinstaller依赖很多其他插件）<br>执行下面的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$   brew uninstall libimobiledevice</div><div class=\"line\">$   brew install --HEAD libimobiledevice</div></pre></td></tr></table></figure>\n<p>下载<a href=\"https://github.com/DanTheMan827/ios-app-signer\">iOS App Signer</a>重签名工具<em>（省去很多命令行操作，一键重签名！）</em>  </p>\n<p>（3）    下载砸壳的微信应用</p>\n<blockquote>\n<p>   因为AppStore的包是被加密（有壳），无法进行重签名，所以要用砸壳的，可以用dumpdecrypted自己砸壳，也可以直接利用PP助手或者itool助手下载越狱版已经砸过壳的微信应用。  </p>\n</blockquote>\n<p>（4）    安装yololib<br>yololib可以将dylib注入进WeChat二进制文件中，这样才能是你的Hook有作用，下载之后编译得到<a href=\"https://github.com/gaoshilei/yololib\">yololib</a></p>\n<h4 id=\"代码注入以及打包安装\"><a href=\"#代码注入以及打包安装\" class=\"headerlink\" title=\"代码注入以及打包安装\"></a>代码注入以及打包安装</h4><h5 id=\"（1）生成静态库\"><a href=\"#（1）生成静态库\" class=\"headerlink\" title=\"（1）生成静态库\"></a>（1）生成静态库</h5><p>在上一步中已经安装好iOSOpendev，此时打开Xcode新建项目，在选择工程界面会出现iOSOpendev的工程，这里我们要选择CaptainHook Tweak项目<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E9%87%8D%E7%AD%BE%E5%90%8DiOSDev.png\" alt=\"iOSOpenDev\"><br>新建好的工程只有一个.mm文件，我们只需要把所有hook方法写在这个文件中即可。<br>因为非越狱机不能像越狱机一样可以安装tweak插件对原来的应用进行hook，CaptainHook使用的Runtime机制实现，利用宏命令封装类定义、方法替换等功能，简单介绍它的使用方法：  </p>\n<ol>\n<li>hook某个类</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CHDeclareClass(WCContentItemViewTemplateNewSight);</div></pre></td></tr></table></figure>\n<p><code>CHDeclareClass(ClassName)</code>表示要hook哪个类，一般写在对这个类操作的最前面。</p>\n<ol>\n<li>在hook的类种新建方法  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CHDeclareMethod0(id, WCContentItemViewTemplateNewSight, SLSightDataItem)&#123;......&#125;</div></pre></td></tr></table></figure>\n<p><code>CHDeclareMethod(count, return_type, class_type, name1, arg1, ....)</code>表示新建一个方法，count表示这个方法的参数个数，return_type表示返回类型，class_type填写这个方法所在的类名，name1表示方法名，arg1表示第一个参数，如果没有参数则不填，以此类推。  </p>\n<ol>\n<li>hook原来的方法  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">CHOptimizedMethod0(self, void, WCContentItemViewTemplateNewSight, onLongTouch)&#123;</div><div class=\"line\">CHSuper(0, className, Method);//可选</div><div class=\"line\">......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>CHOptimizedMethod(count, optimization, return_type, class_type, name1, type1, arg1)</code> 表示hook原来的方法（如果不加<code>CHSuper(0, className, Method)</code>表示复写原来的方法，CHSuper表示在当前位置调用原来的方法实现），count表示hook的方法参数个数，optimization一般填self，return_type即方法返回值类型，class_type填当前类的类名，name1是方法名，arg1是参数，如果没有参数不同填写arg，以此类推。  </p>\n<ol>\n<li>构造函数</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">CHConstructor</div><div class=\"line\">&#123;</div><div class=\"line\">    @autoreleasepool</div><div class=\"line\">    &#123;</div><div class=\"line\">        CHLoadLateClass(WCContentItemViewTemplateNewSight);</div><div class=\"line\">        CHHook(0, WCContentItemViewTemplateNewSight, onLongTouch);    </div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这是CaptainHook的入口函数，所有被hook的类必须在这里声明加载，类里面的方法要在这里声明hook。<br>然后就可以往类和方法中写代码了，代码太长不贴了，请自行下载<br><strong><a href=\"https://github.com/gaoshilei/MMPlugin\">MMPlugin传送门</a></strong><br><strong>这个项目中包含了小视频转发、自动抢红包、修改微信运动步数功能，自动抢红包和修改微信运动步数功能可以手动关闭。</strong></p>\n<blockquote>\n<p>   注意：如果用到了系统的类记住要导入相应的类库（比方说UIKit）和头文件否则编译的时候会报错。</p>\n</blockquote>\n<p>编译成功之后就可以在Products文件夹中找到编译好的静态库了<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E9%87%8D%E7%AD%BE%E5%90%8D-%E7%BC%96%E8%AF%91%E5%A5%BD%E7%9A%84%E9%9D%99%E6%80%81%E5%BA%93.png\" alt=\"编译好的静态库\"><br>在finder中找到它，拷贝出来待用。</p>\n<h5 id=\"2-签名-打包-安装\"><a href=\"#2-签名-打包-安装\" class=\"headerlink\" title=\"(2)    签名+打包+安装\"></a>(2)    签名+打包+安装</h5><p>进行到这里目前应该有的材料有：</p>\n<ul>\n<li>砸壳的微信app    </li>\n<li>编译好的MMPlugin.dylib</li>\n<li>安装好的iOS App Signer</li>\n<li>编译好的yololib文件  </li>\n<li>ideviceinstaller</li>\n</ul>\n<p>从原来的微信app中找到WeChat二进制文件拷贝出来待用，<strong>删除weChat.app中的Watch文件夹、PlugIns文件夹中的WeChatShareExtensionNew.appex</strong>，这步操作必须要做，不然安装的时候会报签名错误。<br>执行下面的命令将MMPlugin.dylib注入到WeChat二进制文件中，命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:WeChat gaoshilei$ ./yololib WeChat MMPlugin.dylib</div></pre></td></tr></table></figure>\n<p><strong>执行这个命令时要确保yololib、WeChat、WeChat.app处于同一目录下。</strong> </p>\n<p>完成之后将MMPlugin.dylib和WeChat拷贝到原来的WeChat.app中，覆盖掉原来的WeChat文件。<br>打开iOS App Signer按照下图选择好各项参数：<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E9%87%8D%E7%AD%BE%E5%90%8D-iOSAppSigner.png\" alt=\"iOS App Signer\"><br>我这里选择的是企业级证书，个人开发者证书也是可以的，一定要选择生产环境的，选好之后点击start，稍等片刻一个经过重签名的ipa包就生成了。<br>连上你的手机执行下面的命令查看ideviceinstaller是否连接上手机：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:WeChat gaoshilei$ ideviceinfo</div></pre></td></tr></table></figure>\n<p>如果打印出一大堆手机的信息表示连接成功可以安装ipa包，如果不成功请根据错误提示进行调整。执行下面的命令进行安装：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:WeChat gaoshilei$ ideviceinstaller -i WeChat.ipa </div><div class=\"line\">WARNING: could not locate iTunesMetadata.plist in archive!</div><div class=\"line\">WARNING: could not locate Payload/WeChat.app/SC_Info/WeChat.sinf in archive!</div><div class=\"line\">Copying &apos;WeChat.ipa&apos; to device... DONE.</div><div class=\"line\">Installing &apos;com.xxxxxxxxxxxx&apos;</div><div class=\"line\"> - CreatingStagingDirectory (5%)</div><div class=\"line\"> - ExtractingPackage (15%)</div><div class=\"line\"> - InspectingPackage (20%)</div><div class=\"line\"> - TakingInstallLock (20%)</div><div class=\"line\"> - PreflightingApplication (30%)</div><div class=\"line\"> - InstallingEmbeddedProfile (30%)</div><div class=\"line\"> - VerifyingApplication (40%)</div><div class=\"line\"> - CreatingContainer (50%)</div><div class=\"line\"> - InstallingApplication (60%)</div><div class=\"line\"> - PostflightingApplication (70%)</div><div class=\"line\"> - SandboxingApplication (80%)</div><div class=\"line\"> - GeneratingApplicationMap (90%)</div><div class=\"line\"> - Complete</div></pre></td></tr></table></figure>\n<p>安装完成，在手机上打开微信试试我们添加的新功能吧！如果某个环节卡住会报错，请根据报错信息进行修改。请看效果图：<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E9%87%8D%E7%AD%BE%E5%90%8D-%E5%B0%8F%E8%A7%86%E9%A2%91%E8%BD%AC%E5%8F%91%E6%95%88%E6%9E%9C%E5%9B%BE.jpg\" alt=\"小视频转发\">  </p>\n<h4 id=\"有任何问题请在文章评论区留言，或者在博客首页点击邮件联系我。\"><a href=\"#有任何问题请在文章评论区留言，或者在博客首页点击邮件联系我。\" class=\"headerlink\" title=\"有任何问题请在文章评论区留言，或者在博客首页点击邮件联系我。\"></a>有任何问题请在文章评论区留言，或者在博客首页点击邮件联系我。</h4>"}],"PostAsset":[],"PostCategory":[{"post_id":"civdhewv000004h6qr192n5f2","category_id":"civdhewvi00024h6qzr0ukktc","_id":"civdheww300094h6q6r9fytgl"},{"post_id":"civdhewvn00044h6qy48rbrm0","category_id":"civdheww100074h6qjzemeueo","_id":"civdheww6000c4h6qlmwziya6"},{"post_id":"civdhewvr00054h6q3gksvlwf","category_id":"civdheww3000a4h6q8nifqk9l","_id":"civdhewwq000g4h6ql0i9b8c2"},{"post_id":"civdheww000064h6qpfg5y0om","category_id":"civdheww3000a4h6q8nifqk9l","_id":"civdhewwr000k4h6qpvnm53et"}],"PostTag":[{"post_id":"civdhewv000004h6qr192n5f2","tag_id":"civdhewvm00034h6qwmua6mdo","_id":"civdhewwp000f4h6q0skaie4m"},{"post_id":"civdhewv000004h6qr192n5f2","tag_id":"civdheww100084h6qv4ytl3bb","_id":"civdhewwq000h4h6qvmn232ta"},{"post_id":"civdhewv000004h6qr192n5f2","tag_id":"civdheww3000b4h6q7ikwhuzr","_id":"civdhewwr000j4h6qgj8zfukj"},{"post_id":"civdhewvn00044h6qy48rbrm0","tag_id":"civdheww6000e4h6qv23copny","_id":"civdhewwu000m4h6qftojpm26"},{"post_id":"civdhewvn00044h6qy48rbrm0","tag_id":"civdhewwq000i4h6qfaomsvtx","_id":"civdhewwu000n4h6q5jaw62d7"},{"post_id":"civdhewvr00054h6q3gksvlwf","tag_id":"civdhewwt000l4h6qi71y1o8j","_id":"civdhewwx000r4h6q5e6d5j9q"},{"post_id":"civdhewvr00054h6q3gksvlwf","tag_id":"civdhewwu000o4h6qz94zfi4n","_id":"civdhewwx000s4h6qyw9avvfj"},{"post_id":"civdhewvr00054h6q3gksvlwf","tag_id":"civdhewwv000p4h6qc7qjqqee","_id":"civdhewwz000u4h6qfl3o2pf5"},{"post_id":"civdheww000064h6qpfg5y0om","tag_id":"civdhewwt000l4h6qi71y1o8j","_id":"civdhewx0000w4h6q1u8u8hc2"},{"post_id":"civdheww000064h6qpfg5y0om","tag_id":"civdhewwu000o4h6qz94zfi4n","_id":"civdhewx1000x4h6qaetian3o"},{"post_id":"civdheww000064h6qpfg5y0om","tag_id":"civdhewwv000p4h6qc7qjqqee","_id":"civdhewx1000y4h6qdobg8vfq"}],"Tag":[{"name":"VPS","_id":"civdhewvm00034h6qwmua6mdo"},{"name":"VPN","_id":"civdheww100084h6qv4ytl3bb"},{"name":"Shadowsockts","_id":"civdheww3000b4h6q7ikwhuzr"},{"name":"serial Number","_id":"civdheww6000e4h6qv23copny"},{"name":"UDID","_id":"civdhewwq000i4h6qfaomsvtx"},{"name":"微信","_id":"civdhewwt000l4h6qi71y1o8j"},{"name":"逆向工程","_id":"civdhewwu000o4h6qz94zfi4n"},{"name":"重签名","_id":"civdhewwv000p4h6qc7qjqqee"}]}}