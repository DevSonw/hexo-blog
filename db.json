{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yelee/.gitignore","hash":"237760b38ce80bcc3a8b556566bef0295c145393","modified":1477897641174},{"_id":"themes/yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1477897641174},{"_id":"themes/yelee/_config.yml","hash":"d37ad1c23423fa4c2bb2de1125a31508469ba19f","modified":1477900231384},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1477897641176},{"_id":"source/_posts/VPS搭建高速VPN服务器.md","hash":"4ad2fb0d20fff0d18fbd4eabbed0618a5b1472ea","modified":1477905463328},{"_id":"source/_posts/dumpdecrypted给App砸壳.md","hash":"7c4864a835fdb5c3a616f23de7a9db00f3b8ae26","modified":1477910475736},{"_id":"source/_posts/iPhone查找序列号生成函数.md","hash":"728b5a243a30a23e8a1a7d0624eb44d8053c12b9","modified":1477903223221},{"_id":"themes/yelee/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1477897641157},{"_id":"themes/yelee/.git/config","hash":"de8eaeefa12aa07502884e265b5e0d4c2262178f","modified":1477897641170},{"_id":"themes/yelee/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1477897638354},{"_id":"themes/yelee/.git/index","hash":"fc0f5ffb3ad5acd389650ccde99c8d32ce3fa88d","modified":1477899874206},{"_id":"themes/yelee/.git/packed-refs","hash":"fad6a43ad617793304d9241562a71596db559018","modified":1477897641156},{"_id":"themes/yelee/.github/ISSUE_TEMPLATE.md","hash":"09e2580d457ce93b4d7d554b75618036b45f8717","modified":1477897641174},{"_id":"themes/yelee/languages/default.yml","hash":"80cc17267333753accc0b1c85a73678fedcbce76","modified":1477897641174},{"_id":"themes/yelee/languages/en.yml","hash":"2c096d06c0af4ddf9c128fc8f77fb276b59a47fb","modified":1477897641174},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"b5b2d20cde04db3773962284a002d025b09134b0","modified":1477897641174},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"c38a95f5076ad951839aaf7748295d7eea277c61","modified":1477897641174},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"f372cc0d758a7d8bbb885aa9756d607bec26469a","modified":1477897641174},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1477897641176},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1477897641176},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1477897641176},{"_id":"themes/yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1477897641176},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1477897641176},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1477897641176},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1477897641176},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1477897641176},{"_id":"themes/yelee/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1477897638352},{"_id":"themes/yelee/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1477897638353},{"_id":"themes/yelee/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1477897638349},{"_id":"themes/yelee/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1477897638353},{"_id":"themes/yelee/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1477897638351},{"_id":"themes/yelee/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1477897638350},{"_id":"themes/yelee/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1477897638353},{"_id":"themes/yelee/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1477897638352},{"_id":"themes/yelee/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1477897638350},{"_id":"themes/yelee/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1477897638353},{"_id":"themes/yelee/.git/logs/HEAD","hash":"8c9eaa41c1f938728abd4969f2044e5081d44f1f","modified":1477897641170},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1477897641174},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1477897641174},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1477897641174},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"82653e3bbdc605b51e1b0a36e30f3ac1180c838e","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"3e5f2e41bbb1a5b93a8a7a6cb9ccd191ced54408","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a6046bc322ce9194faa9559c70e1618a7e1e4cbc","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1477897641176},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"1bebab6eb7a849319cd48fe051f3c71b9349a723","modified":1477897641176},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"432ded02bcc1f0d52cd833e8eeac688ee886169a","modified":1477897641176},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1477897641176},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1477897641178},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1477897641178},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1477897641179},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1477897641179},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1477897641181},{"_id":"themes/yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1477897641183},{"_id":"themes/yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1477897641183},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1477897641183},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1477897641183},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1477897641183},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1477897641183},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1477897641183},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1477897641183},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1477897641183},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1477897641183},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1477897641183},{"_id":"themes/yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1477897641183},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1477897641183},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1477897641183},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1477897641183},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1477897641183},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1477897641183},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1477897641183},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1477897641183},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1477897641183},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1477897641183},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1477897641183},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1477897641183},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1477897641183},{"_id":"themes/yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1477897641184},{"_id":"themes/yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1477897641184},{"_id":"themes/yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1477897641184},{"_id":"themes/yelee/source/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1477897641184},{"_id":"themes/yelee/source/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1477897641184},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1477897641180},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1477897641181},{"_id":"themes/yelee/.git/refs/heads/master","hash":"a098c9ba7d644627d0ba7fb675f0168faedeb258","modified":1477897641170},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"678f3aec2980d378ea44be60eec3eb504c8ba668","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"d3c1b0b31db9d80e857f3054d010ea49c0f88134","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"bcf2070587645afd20a4eb046b9c8bb9c44d1cf5","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1477897641175},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1477897641176},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1477897641176},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1477897641176},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1477897641176},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1477897641176},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1477897641176},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1477897641177},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1477897641177},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1477897641178},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1477897641181},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1477897641181},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"fcaa5deaa654aaec69e267e23b49df07f84f633a","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"eb19bbd37fc2c1abd238e2ed96b22cb1aae41ab7","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1477897641183},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1477897641183},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1477897641183},{"_id":"themes/yelee/.git/objects/pack/pack-564350b1154dca17a11cb57148f37e7786aace7b.idx","hash":"c73d8c9abaac591a58a75f0695e90fda77545b89","modified":1477897641153},{"_id":"themes/yelee/.git/logs/refs/heads/master","hash":"8c9eaa41c1f938728abd4969f2044e5081d44f1f","modified":1477897641170},{"_id":"themes/yelee/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1477897641157},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1477897641181},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1477897641181},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1477897641181},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"f309241c1daa9b6c04aa04063307537c219fdd59","modified":1477897641181},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1477897641181},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"b1e564ed76d6e892556b61b4278270fc9eeea961","modified":1477897641182},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1477897641182},{"_id":"themes/yelee/.git/logs/refs/remotes/origin/HEAD","hash":"8c9eaa41c1f938728abd4969f2044e5081d44f1f","modified":1477897641157},{"_id":"themes/yelee/.git/objects/pack/pack-564350b1154dca17a11cb57148f37e7786aace7b.pack","hash":"5f34a8b4306c63db33e5059fbdae4f5dcff33c9f","modified":1477897641152},{"_id":"public/archives/2015/index.html","hash":"3cf1d93a277717898355e1daabb7701c03f58d39","modified":1477906993369},{"_id":"public/archives/2015/08/index.html","hash":"9eaa9d2e0816bff3a6323a19f7b0ad7acd88ff72","modified":1477906993369},{"_id":"public/archives/2016/index.html","hash":"bca8f8505bb1ceb5b88900ab06fc6cadb30a177f","modified":1477906993369},{"_id":"public/archives/2016/07/index.html","hash":"51abe47912f9cc51ba6ca43c846eae75cce1f48e","modified":1477906993369},{"_id":"public/archives/2016/08/index.html","hash":"b396cccea2074ba7ccceb68a07898dcbbd3264e9","modified":1477906993369},{"_id":"public/categories/术业专攻/index.html","hash":"8e3d74ddcf0cc2a3196f4137cc96b448876f60c9","modified":1477906993369},{"_id":"public/tags/GitHub/index.html","hash":"85a9973d8dc561639bd07d1fb008485cd9ca30fc","modified":1477906993370},{"_id":"public/tags/Hexo/index.html","hash":"432905d3d48e3ad8f197b56147ebd362631d79d5","modified":1477906993370},{"_id":"public/tags/WordPress/index.html","hash":"8410d30a78da6a782c555a51f6f927edf61a69ce","modified":1477906993370},{"_id":"public/tags/JavaScript/index.html","hash":"3c626b67320d5e08e1d0fe5ef53e5a8a295fa990","modified":1477906993370},{"_id":"public/tags/Markdown/index.html","hash":"d298210fe77336df2b7be7758559e345f316acc5","modified":1477906993370},{"_id":"public/tags/HTML/index.html","hash":"24107b0532a84e4bd1073be235081cd1a547a59d","modified":1477906993370},{"_id":"public/tags/CSS/index.html","hash":"3ba9a55a0f849f0231972c71ace5b5a6da4a8efd","modified":1477906993370},{"_id":"public/tags/jQuery/index.html","hash":"168421efd6d2cea61cb97951461ec5c93ee90601","modified":1477906993370},{"_id":"public/2016/08/02/iPhone查找序列号生成函数/index.html","hash":"f9c535e9eab8008d4788f1b906d06987686ef799","modified":1477906993370},{"_id":"public/2016/07/17/dumpdecrypted给App砸壳/index.html","hash":"8fe1fc7d90f9312fb99a32af8aa4a72e06dc9529","modified":1477910479366},{"_id":"public/2015/08/19/blog-building/index.html","hash":"4676750fa237e8bfad3154ba558b5aca2ddc48e0","modified":1477906993370},{"_id":"public/archives/index.html","hash":"e37c7499b5437cae69324fa586ad8a3e12a82fd7","modified":1477906993371},{"_id":"public/index.html","hash":"949305bb67ee1a2a6091e3cbb8fd9e325d893f6c","modified":1477907657639},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1477906993383},{"_id":"public/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1477906993383},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1477906993383},{"_id":"public/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1477906993384},{"_id":"public/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1477906993384},{"_id":"public/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1477906993384},{"_id":"public/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1477906993384},{"_id":"public/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1477906993384},{"_id":"public/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1477906993384},{"_id":"public/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1477906993384},{"_id":"public/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1477906993384},{"_id":"public/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1477906993384},{"_id":"public/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1477906993384},{"_id":"public/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1477906993384},{"_id":"public/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1477906993384},{"_id":"public/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1477906993384},{"_id":"public/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1477906993384},{"_id":"public/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1477906993384},{"_id":"public/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1477906993384},{"_id":"public/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1477906993384},{"_id":"public/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1477906993385},{"_id":"public/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1477906993385},{"_id":"public/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1477906993385},{"_id":"public/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1477906993385},{"_id":"public/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1477906993385},{"_id":"public/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1477906993385},{"_id":"public/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1477906993385},{"_id":"public/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1477906993385},{"_id":"public/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1477906993385},{"_id":"public/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1477906995054},{"_id":"public/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1477906995061},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1477906995074},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1477906995074},{"_id":"public/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1477906995074},{"_id":"public/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1477906995074},{"_id":"public/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1477906995074},{"_id":"public/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1477906995074},{"_id":"public/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1477906995074},{"_id":"public/css/style.css","hash":"afdb1b8e3f189383c14f888589a4451614fbdb90","modified":1477906995074}],"Category":[{"name":"术业专攻","_id":"ciuxvnxq50002lw6qbqyxr909"}],"Data":[],"Page":[],"Post":[{"title":"VPS搭建高速VPN服务器","date":"2015-08-19T16:00:00.000Z","top":1,"_content":"\n##\t\t前言：(废话较多，不想看的略过直接看后面的教程)  \n*\t作为一名有着远大理想和抱负的codeMonkey，平时查资料必须Google，百度一下会真的死啊！不是黑百度，确实百度出来的资料内容看一下大致是相同的，搜到的内容就是copy+paste，花了很多时间结果找不到我们想要的东西，最最重要的是搜索结果有一半是广告，这个时候只能求助于Google，无奈天朝的GFW，一直追求自由明主的Google早在10年就被GCD轰出了墙外，所以VPN成了连接我们和整个世界的桥梁。\n<!-- more -->\n*\t作为一名有着远大理想和抱负的codeMonkey，平时查资料必须Google，百度一下会真的死啊！不是黑百度，确实百度出来的资料内容看一下大致是相同的，搜到的内容就是copy+paste，花了很多时间结果找不到我们想要的东西，最最重要的是搜索结果有一半是广告，这个时候只能求助于Google，无奈天朝的GFW，一直追求自由明主的Google早在10年就被GCD轰出了墙外，所以VPN成了连接我们和整个世界的桥梁。  \n*\t现在市面上的VPN产品满天飞，有不少是开张几个月就卷款跑路，然后重新弄个网站换个名字继续骗钱，市面上常见的VPN还有一个很大的缺点就是速度不稳定，只能够全局加速（至少在Mac上市这样），访问国内网站都很卡，因为这些VPN都是共享一条线路，用户少速度会快一点，人一多就卡成了龟速。当然也有部分VPN推出了专线套餐，便宜的一个月也要100大洋左右，我等屌丝“何德何能”能消费得起这样的产品啊（鬼魅的微笑）。  \n*\t在用了几年这种VPN产品之后，我终于发现了一块新大陆，自己购买主机搭建VPN服务器，不论是速度还是用户体验，不要太爽的好伐，关键是价格很亲民，最便宜的一年20刀，折合人民币才100多大洋。接下来就给大家分享我搭建VPN的过程，搭建完成之后的VPN观看YouTube高清720P毫无压力（当然还要取决于运营商给你的带宽）。我购买的是VPS界享有“盛誉”的搬瓦工，价格亲民、速度快，有智能后台一键搭建VPN省去很多繁琐的命令行输入，大家可以在官网首页看到机型配置和价格，最便宜的2.99刀一个月，一年20刀。而且搬瓦工是30天无条件退款的，意思就是你可以用了29天，然后申请退款，审核之后就会把钱退给你。因为一开始不了解这个东西，所以购买了一个月2.99刀试试水，用了20天感觉速度和体验都非常不错，所以就买个一年的。非常可耻的是，我把之前购买的一个月的2.99刀退款了，然后购买了一个19.99刀一年的。\n\n##\t教程  \n###\t一.\t购买VPS  \n> VPS有点像VirtualBox、Parallels创建出来的主机，可以理解成一台独立的主机。我们需要购买的就是这样一台独立的主机，不过一定要购买海外的，否则搭建了VPN也无法访问海外的网站。  \n   \n因为我用的是搬瓦工，并且感觉不错，推荐给大家，还有其他的海外VPS提供商也都是可以的。\n##### 搬瓦工官网链接：[https://bandwagonhost.com](https://bandwagonhost.com/aff.php?aff=10505)  \n（*不挂VPN访问不是很稳定，如果访问不了的话先借个VPN用一下吧，哈哈！*）  \n\n进入之后要注册，之后就可以购买主机了，根据你自己的经济情况来选择。（*其实不同主机的带宽都是一样的，只不过在配置上有差别，如果不是搭建大型的网站对配置有要求，只是想有个专线VPN的话，$19.99一年就足够用了。*）  \n\n> **我在购买主机的时候有一个小坑要提一下，搬瓦工的支付方式只支持PayPal，国内强大的支付宝居然不能支付！所以又去注册一个PayPal，坑来了：**  \nPayPal分国内版和国际版，国内版是不支持美元支付的，而且两者的账户是不通的，所以你注册了国内版是无法支付的，国际版的地址是：[https://www.paypal.com](https://www.paypal.com/c2/webapps/mpp/home)，虽然是中文，但是货币是USD美元，绑定一张银联的卡就可以购物了。\n<img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNPayPal.png\" width=\"500\"/>   \n \n**这里做个修正：搬瓦工已经推出支付宝支付了，check out的时候选择alipay就可以了**\n\n###\t二.\t配置服务器  \n####\t1.\t进入控制面板，修改当前的root密码  \n进入账户之后我们可以在MyServices中看到服务器列表：\n![服务器列表](http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%97%E8%A1%A8.png)  \n进入KiwiVM管理后台，我们可以看到左侧有个菜单栏，点击Root Shell-interactive，此时会以H5的形式打开一个terminal窗口，执行`passwd`命令修改root密码  \n（*如果你不嫌系统分配的root密码不好记、每次ssh进主机都要复制粘贴密码，那么略过这步，***如果你忘记了root密码也可以直接通过这里修改，什么？！你忘记搬瓦工的账号密码无法进入后台面板？用你注册填写的邮箱或者手机号找回吧！**）\n![修改root密码](http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E4%BF%AE%E6%94%B9root%E5%AF%86%E7%A0%81.png)\n\n####\t2.\t安装一个你喜欢的Linux OS  \n左侧菜单栏找到Install New OS，选一个你喜欢的系统吧（*系统默认安装的是32位CentOS6，如果你不想换其他系统这步也可以略过，***需要注意每次安装系统，主机所有数据都会丢失**）  \n<img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E5%AE%89%E8%A3%85%E6%96%B0%E7%B3%BB%E7%BB%9F.png\" width=\"500\"/>  \n####\t3.\t安装Shadowsocks Server  \n> 搬瓦工也提供了openVPN一键安装，个人感觉Shadowsocks更好用，有两种加速模式，访问会更快速。  \n**其实这篇文章介绍的是SS的安装，它跟VPN的原理差不多，因为SS采用的是自由协议，一般被墙的可能性要小得多，所以更加稳定！一般不需要区分SS跟VPN的差别，SS在稳定性上更有优势，你值得拥有！**\n\n左侧菜单栏找到Shadowsocks Server，点进去安装就好了（**注意：搬瓦工提供的一键安装功能只支持CentOS6**，你也可以通过命令行的方式安装），安装好的Shadowsocks Server界面是这样的：  \n<img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server.png\" width=\"500\"/>  \n此时VPN已经可以用了，不过还差一个客户端，Windows版本的客户端在后台面板就有链接，Mac用户请[点击这里下载](https://sourceforge.net/projects/shadowsocksgui/)如果无法访问，我已经下载好放到我的网盘了[ShadowsocksX-2.6.3.dmg](https://pan.baidu.com/s/1boXspQJ)，安装好打开Shadowsocks Server，在Mac的工具栏会有一个小飞机的图标  \n<img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server%E4%BD%BF%E7%94%A8%E7%95%8C%E9%9D%A2.png\" width=\"300\" height=\"400\" />  \n点开服务器，配置IP和密码，只需要修改地址和密码，其他不用改就OK了。\n<img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server%E8%AE%BE%E7%BD%AE.png\" width=\"500\" height=\"300\"/>  \n上两张图显示Shadowsocks Server有两种加速模式 ，**一般情况下勾选自动代理模式就可以了，这个这个模式下会自动判断你当前访问的域名是否在GFW名单里面，如果是就启用代理，如果不是就正常访问，这样我们在访问墙内网站的时候也不会受到任何影响** ，如果你遇到网站无法访问，有可能是这个网站近期被墙了，你没有更新本地的GFW名单，如果你确定这个网站是可以打开的，切换到全局模式就可以访问了 \n> Shadowsocks Server自动代理模式原理是根据GFWList配置了一个PAC文件，名单中的域名全部走代理，你可以手动修改这个配置文件，添加你要访问的被墙的网站，它就是一个js文件，你点击编辑自动模式的PAC文件便会跳转到这个js所在的位置，那个GFWList自动更新功能坏掉了，作者一直也没更新，不过不影响平时使用。  \n  \n###\t三.\t加速VPN（很重要！很重要！很重要！）\n完成上面的步骤，你确实是可以访问墙外网站了，但是下载速度一般只有100多KB，YouTube视频240P都感觉不流畅，此时就要用到Net-Speeder给VPN加速了，具体步骤请看：  \n#####\t1.\t先连上远程主机\n`ssh -l root -p 12830 192.243.112.242`  \n把端口和IP换成你自己主机的，然后需要输入root密码，输入在第一步我们设置的密码就可以了。  \n#####\t2.\t安装Net-Speeder  \n输入下面的命令进行安装：  \n`wget https://coding.net/u/njzhenghao/p/download/git/raw/master/net_speeder-installer.sh`\n这里我用的是别人git上的sh脚本，有现成的为何不用呢，是吧？！\n#####\t3.\t编译并安装  \n输入下面的命令编译Net-Speeder：  \n`bash net_speeder-installer.sh`   \n命令执行成功之后，执行reboot重启主机，或者在后台面板重启主机也行。（**此时远程主机的连接会断开，需要重新连接**） \n#####\t4.\t端口加速  \n最后一步，加速端口：  \n`nohup /usr/local/net_speeder/net_speeder venet0 \"ip\" >/dev/null 2>&1 &`  \n执行完这个命令应该会有一个端口号打印出来，证明加速成功了！别着急还有最后一步，点开Shadowsocks Server菜单点击退出，*不要点退出Shadowsocks Server*，然后再次打开App，现在打开YouTube看个视频试试吧！现在墙外网站下载速度一般都在500KB左右，当然这个速度也受到你所在运营商的网络环境影响。（**注意：加速端口这个命令每次重启主机都需要执行一次，因为这个脚本没有加到开机自启动，反正我们没事也不重启主机，我懒得弄了，大家自己Google吧，哈哈！**）  \n","source":"_posts/VPS搭建高速VPN服务器.md","raw":"title: VPS搭建高速VPN服务器\ndate: 2015-08-20\ncategories:\n- 术业专攻\ntags:\n- GitHub\n- Hexo\n- WordPress\n- JavaScript\n- Markdown\n- HTML\n- CSS\n- jQuery\npermalink: blog-building\ntop: 1\n\n---\n\n##\t\t前言：(废话较多，不想看的略过直接看后面的教程)  \n*\t作为一名有着远大理想和抱负的codeMonkey，平时查资料必须Google，百度一下会真的死啊！不是黑百度，确实百度出来的资料内容看一下大致是相同的，搜到的内容就是copy+paste，花了很多时间结果找不到我们想要的东西，最最重要的是搜索结果有一半是广告，这个时候只能求助于Google，无奈天朝的GFW，一直追求自由明主的Google早在10年就被GCD轰出了墙外，所以VPN成了连接我们和整个世界的桥梁。\n<!-- more -->\n*\t作为一名有着远大理想和抱负的codeMonkey，平时查资料必须Google，百度一下会真的死啊！不是黑百度，确实百度出来的资料内容看一下大致是相同的，搜到的内容就是copy+paste，花了很多时间结果找不到我们想要的东西，最最重要的是搜索结果有一半是广告，这个时候只能求助于Google，无奈天朝的GFW，一直追求自由明主的Google早在10年就被GCD轰出了墙外，所以VPN成了连接我们和整个世界的桥梁。  \n*\t现在市面上的VPN产品满天飞，有不少是开张几个月就卷款跑路，然后重新弄个网站换个名字继续骗钱，市面上常见的VPN还有一个很大的缺点就是速度不稳定，只能够全局加速（至少在Mac上市这样），访问国内网站都很卡，因为这些VPN都是共享一条线路，用户少速度会快一点，人一多就卡成了龟速。当然也有部分VPN推出了专线套餐，便宜的一个月也要100大洋左右，我等屌丝“何德何能”能消费得起这样的产品啊（鬼魅的微笑）。  \n*\t在用了几年这种VPN产品之后，我终于发现了一块新大陆，自己购买主机搭建VPN服务器，不论是速度还是用户体验，不要太爽的好伐，关键是价格很亲民，最便宜的一年20刀，折合人民币才100多大洋。接下来就给大家分享我搭建VPN的过程，搭建完成之后的VPN观看YouTube高清720P毫无压力（当然还要取决于运营商给你的带宽）。我购买的是VPS界享有“盛誉”的搬瓦工，价格亲民、速度快，有智能后台一键搭建VPN省去很多繁琐的命令行输入，大家可以在官网首页看到机型配置和价格，最便宜的2.99刀一个月，一年20刀。而且搬瓦工是30天无条件退款的，意思就是你可以用了29天，然后申请退款，审核之后就会把钱退给你。因为一开始不了解这个东西，所以购买了一个月2.99刀试试水，用了20天感觉速度和体验都非常不错，所以就买个一年的。非常可耻的是，我把之前购买的一个月的2.99刀退款了，然后购买了一个19.99刀一年的。\n\n##\t教程  \n###\t一.\t购买VPS  \n> VPS有点像VirtualBox、Parallels创建出来的主机，可以理解成一台独立的主机。我们需要购买的就是这样一台独立的主机，不过一定要购买海外的，否则搭建了VPN也无法访问海外的网站。  \n   \n因为我用的是搬瓦工，并且感觉不错，推荐给大家，还有其他的海外VPS提供商也都是可以的。\n##### 搬瓦工官网链接：[https://bandwagonhost.com](https://bandwagonhost.com/aff.php?aff=10505)  \n（*不挂VPN访问不是很稳定，如果访问不了的话先借个VPN用一下吧，哈哈！*）  \n\n进入之后要注册，之后就可以购买主机了，根据你自己的经济情况来选择。（*其实不同主机的带宽都是一样的，只不过在配置上有差别，如果不是搭建大型的网站对配置有要求，只是想有个专线VPN的话，$19.99一年就足够用了。*）  \n\n> **我在购买主机的时候有一个小坑要提一下，搬瓦工的支付方式只支持PayPal，国内强大的支付宝居然不能支付！所以又去注册一个PayPal，坑来了：**  \nPayPal分国内版和国际版，国内版是不支持美元支付的，而且两者的账户是不通的，所以你注册了国内版是无法支付的，国际版的地址是：[https://www.paypal.com](https://www.paypal.com/c2/webapps/mpp/home)，虽然是中文，但是货币是USD美元，绑定一张银联的卡就可以购物了。\n<img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNPayPal.png\" width=\"500\"/>   \n \n**这里做个修正：搬瓦工已经推出支付宝支付了，check out的时候选择alipay就可以了**\n\n###\t二.\t配置服务器  \n####\t1.\t进入控制面板，修改当前的root密码  \n进入账户之后我们可以在MyServices中看到服务器列表：\n![服务器列表](http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%97%E8%A1%A8.png)  \n进入KiwiVM管理后台，我们可以看到左侧有个菜单栏，点击Root Shell-interactive，此时会以H5的形式打开一个terminal窗口，执行`passwd`命令修改root密码  \n（*如果你不嫌系统分配的root密码不好记、每次ssh进主机都要复制粘贴密码，那么略过这步，***如果你忘记了root密码也可以直接通过这里修改，什么？！你忘记搬瓦工的账号密码无法进入后台面板？用你注册填写的邮箱或者手机号找回吧！**）\n![修改root密码](http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E4%BF%AE%E6%94%B9root%E5%AF%86%E7%A0%81.png)\n\n####\t2.\t安装一个你喜欢的Linux OS  \n左侧菜单栏找到Install New OS，选一个你喜欢的系统吧（*系统默认安装的是32位CentOS6，如果你不想换其他系统这步也可以略过，***需要注意每次安装系统，主机所有数据都会丢失**）  \n<img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E5%AE%89%E8%A3%85%E6%96%B0%E7%B3%BB%E7%BB%9F.png\" width=\"500\"/>  \n####\t3.\t安装Shadowsocks Server  \n> 搬瓦工也提供了openVPN一键安装，个人感觉Shadowsocks更好用，有两种加速模式，访问会更快速。  \n**其实这篇文章介绍的是SS的安装，它跟VPN的原理差不多，因为SS采用的是自由协议，一般被墙的可能性要小得多，所以更加稳定！一般不需要区分SS跟VPN的差别，SS在稳定性上更有优势，你值得拥有！**\n\n左侧菜单栏找到Shadowsocks Server，点进去安装就好了（**注意：搬瓦工提供的一键安装功能只支持CentOS6**，你也可以通过命令行的方式安装），安装好的Shadowsocks Server界面是这样的：  \n<img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server.png\" width=\"500\"/>  \n此时VPN已经可以用了，不过还差一个客户端，Windows版本的客户端在后台面板就有链接，Mac用户请[点击这里下载](https://sourceforge.net/projects/shadowsocksgui/)如果无法访问，我已经下载好放到我的网盘了[ShadowsocksX-2.6.3.dmg](https://pan.baidu.com/s/1boXspQJ)，安装好打开Shadowsocks Server，在Mac的工具栏会有一个小飞机的图标  \n<img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server%E4%BD%BF%E7%94%A8%E7%95%8C%E9%9D%A2.png\" width=\"300\" height=\"400\" />  \n点开服务器，配置IP和密码，只需要修改地址和密码，其他不用改就OK了。\n<img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server%E8%AE%BE%E7%BD%AE.png\" width=\"500\" height=\"300\"/>  \n上两张图显示Shadowsocks Server有两种加速模式 ，**一般情况下勾选自动代理模式就可以了，这个这个模式下会自动判断你当前访问的域名是否在GFW名单里面，如果是就启用代理，如果不是就正常访问，这样我们在访问墙内网站的时候也不会受到任何影响** ，如果你遇到网站无法访问，有可能是这个网站近期被墙了，你没有更新本地的GFW名单，如果你确定这个网站是可以打开的，切换到全局模式就可以访问了 \n> Shadowsocks Server自动代理模式原理是根据GFWList配置了一个PAC文件，名单中的域名全部走代理，你可以手动修改这个配置文件，添加你要访问的被墙的网站，它就是一个js文件，你点击编辑自动模式的PAC文件便会跳转到这个js所在的位置，那个GFWList自动更新功能坏掉了，作者一直也没更新，不过不影响平时使用。  \n  \n###\t三.\t加速VPN（很重要！很重要！很重要！）\n完成上面的步骤，你确实是可以访问墙外网站了，但是下载速度一般只有100多KB，YouTube视频240P都感觉不流畅，此时就要用到Net-Speeder给VPN加速了，具体步骤请看：  \n#####\t1.\t先连上远程主机\n`ssh -l root -p 12830 192.243.112.242`  \n把端口和IP换成你自己主机的，然后需要输入root密码，输入在第一步我们设置的密码就可以了。  \n#####\t2.\t安装Net-Speeder  \n输入下面的命令进行安装：  \n`wget https://coding.net/u/njzhenghao/p/download/git/raw/master/net_speeder-installer.sh`\n这里我用的是别人git上的sh脚本，有现成的为何不用呢，是吧？！\n#####\t3.\t编译并安装  \n输入下面的命令编译Net-Speeder：  \n`bash net_speeder-installer.sh`   \n命令执行成功之后，执行reboot重启主机，或者在后台面板重启主机也行。（**此时远程主机的连接会断开，需要重新连接**） \n#####\t4.\t端口加速  \n最后一步，加速端口：  \n`nohup /usr/local/net_speeder/net_speeder venet0 \"ip\" >/dev/null 2>&1 &`  \n执行完这个命令应该会有一个端口号打印出来，证明加速成功了！别着急还有最后一步，点开Shadowsocks Server菜单点击退出，*不要点退出Shadowsocks Server*，然后再次打开App，现在打开YouTube看个视频试试吧！现在墙外网站下载速度一般都在500KB左右，当然这个速度也受到你所在运营商的网络环境影响。（**注意：加速端口这个命令每次重启主机都需要执行一次，因为这个脚本没有加到开机自启动，反正我们没事也不重启主机，我懒得弄了，大家自己Google吧，哈哈！**）  \n","slug":"blog-building","published":1,"updated":"2016-10-31T09:17:43.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuxvnxpp0000lw6q0hv9gg2u","content":"<h2 id=\"前言：-废话较多，不想看的略过直接看后面的教程\"><a href=\"#前言：-废话较多，不想看的略过直接看后面的教程\" class=\"headerlink\" title=\"前言：(废话较多，不想看的略过直接看后面的教程)\"></a>前言：(废话较多，不想看的略过直接看后面的教程)</h2><ul>\n<li>作为一名有着远大理想和抱负的codeMonkey，平时查资料必须Google，百度一下会真的死啊！不是黑百度，确实百度出来的资料内容看一下大致是相同的，搜到的内容就是copy+paste，花了很多时间结果找不到我们想要的东西，最最重要的是搜索结果有一半是广告，这个时候只能求助于Google，无奈天朝的GFW，一直追求自由明主的Google早在10年就被GCD轰出了墙外，所以VPN成了连接我们和整个世界的桥梁。<a id=\"more\"></a></li>\n<li>作为一名有着远大理想和抱负的codeMonkey，平时查资料必须Google，百度一下会真的死啊！不是黑百度，确实百度出来的资料内容看一下大致是相同的，搜到的内容就是copy+paste，花了很多时间结果找不到我们想要的东西，最最重要的是搜索结果有一半是广告，这个时候只能求助于Google，无奈天朝的GFW，一直追求自由明主的Google早在10年就被GCD轰出了墙外，所以VPN成了连接我们和整个世界的桥梁。  </li>\n<li>现在市面上的VPN产品满天飞，有不少是开张几个月就卷款跑路，然后重新弄个网站换个名字继续骗钱，市面上常见的VPN还有一个很大的缺点就是速度不稳定，只能够全局加速（至少在Mac上市这样），访问国内网站都很卡，因为这些VPN都是共享一条线路，用户少速度会快一点，人一多就卡成了龟速。当然也有部分VPN推出了专线套餐，便宜的一个月也要100大洋左右，我等屌丝“何德何能”能消费得起这样的产品啊（鬼魅的微笑）。  </li>\n<li>在用了几年这种VPN产品之后，我终于发现了一块新大陆，自己购买主机搭建VPN服务器，不论是速度还是用户体验，不要太爽的好伐，关键是价格很亲民，最便宜的一年20刀，折合人民币才100多大洋。接下来就给大家分享我搭建VPN的过程，搭建完成之后的VPN观看YouTube高清720P毫无压力（当然还要取决于运营商给你的带宽）。我购买的是VPS界享有“盛誉”的搬瓦工，价格亲民、速度快，有智能后台一键搭建VPN省去很多繁琐的命令行输入，大家可以在官网首页看到机型配置和价格，最便宜的2.99刀一个月，一年20刀。而且搬瓦工是30天无条件退款的，意思就是你可以用了29天，然后申请退款，审核之后就会把钱退给你。因为一开始不了解这个东西，所以购买了一个月2.99刀试试水，用了20天感觉速度和体验都非常不错，所以就买个一年的。非常可耻的是，我把之前购买的一个月的2.99刀退款了，然后购买了一个19.99刀一年的。</li>\n</ul>\n<h2 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h2><h3 id=\"一-购买VPS\"><a href=\"#一-购买VPS\" class=\"headerlink\" title=\"一.    购买VPS\"></a>一.    购买VPS</h3><blockquote>\n<p>VPS有点像VirtualBox、Parallels创建出来的主机，可以理解成一台独立的主机。我们需要购买的就是这样一台独立的主机，不过一定要购买海外的，否则搭建了VPN也无法访问海外的网站。  </p>\n</blockquote>\n<p>因为我用的是搬瓦工，并且感觉不错，推荐给大家，还有其他的海外VPS提供商也都是可以的。</p>\n<h5 id=\"搬瓦工官网链接：https-bandwagonhost-com\"><a href=\"#搬瓦工官网链接：https-bandwagonhost-com\" class=\"headerlink\" title=\"搬瓦工官网链接：https://bandwagonhost.com\"></a>搬瓦工官网链接：<a href=\"https://bandwagonhost.com/aff.php?aff=10505\" target=\"_blank\" rel=\"external\">https://bandwagonhost.com</a></h5><p>（<em>不挂VPN访问不是很稳定，如果访问不了的话先借个VPN用一下吧，哈哈！</em>）  </p>\n<p>进入之后要注册，之后就可以购买主机了，根据你自己的经济情况来选择。（<em>其实不同主机的带宽都是一样的，只不过在配置上有差别，如果不是搭建大型的网站对配置有要求，只是想有个专线VPN的话，$19.99一年就足够用了。</em>）  </p>\n<blockquote>\n<p><strong>我在购买主机的时候有一个小坑要提一下，搬瓦工的支付方式只支持PayPal，国内强大的支付宝居然不能支付！所以又去注册一个PayPal，坑来了：</strong><br>PayPal分国内版和国际版，国内版是不支持美元支付的，而且两者的账户是不通的，所以你注册了国内版是无法支付的，国际版的地址是：<a href=\"https://www.paypal.com/c2/webapps/mpp/home\" target=\"_blank\" rel=\"external\">https://www.paypal.com</a>，虽然是中文，但是货币是USD美元，绑定一张银联的卡就可以购物了。<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNPayPal.png\" width=\"500\">   </p>\n</blockquote>\n<p><strong>这里做个修正：搬瓦工已经推出支付宝支付了，check out的时候选择alipay就可以了</strong></p>\n<h3 id=\"二-配置服务器\"><a href=\"#二-配置服务器\" class=\"headerlink\" title=\"二.    配置服务器\"></a>二.    配置服务器</h3><h4 id=\"1-进入控制面板，修改当前的root密码\"><a href=\"#1-进入控制面板，修改当前的root密码\" class=\"headerlink\" title=\"1.    进入控制面板，修改当前的root密码\"></a>1.    进入控制面板，修改当前的root密码</h4><p>进入账户之后我们可以在MyServices中看到服务器列表：<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%97%E8%A1%A8.png\" alt=\"服务器列表\"><br>进入KiwiVM管理后台，我们可以看到左侧有个菜单栏，点击Root Shell-interactive，此时会以H5的形式打开一个terminal窗口，执行<code>passwd</code>命令修改root密码<br>（<em>如果你不嫌系统分配的root密码不好记、每次ssh进主机都要复制粘贴密码，那么略过这步，**</em>如果你忘记了root密码也可以直接通过这里修改，什么？！你忘记搬瓦工的账号密码无法进入后台面板？用你注册填写的邮箱或者手机号找回吧！**）<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E4%BF%AE%E6%94%B9root%E5%AF%86%E7%A0%81.png\" alt=\"修改root密码\"></p>\n<h4 id=\"2-安装一个你喜欢的Linux-OS\"><a href=\"#2-安装一个你喜欢的Linux-OS\" class=\"headerlink\" title=\"2.    安装一个你喜欢的Linux OS\"></a>2.    安装一个你喜欢的Linux OS</h4><p>左侧菜单栏找到Install New OS，选一个你喜欢的系统吧（<em>系统默认安装的是32位CentOS6，如果你不想换其他系统这步也可以略过，**</em>需要注意每次安装系统，主机所有数据都会丢失**）<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E5%AE%89%E8%A3%85%E6%96%B0%E7%B3%BB%E7%BB%9F.png\" width=\"500\">  </p>\n<h4 id=\"3-安装Shadowsocks-Server\"><a href=\"#3-安装Shadowsocks-Server\" class=\"headerlink\" title=\"3.    安装Shadowsocks Server\"></a>3.    安装Shadowsocks Server</h4><blockquote>\n<p>搬瓦工也提供了openVPN一键安装，个人感觉Shadowsocks更好用，有两种加速模式，访问会更快速。<br><strong>其实这篇文章介绍的是SS的安装，它跟VPN的原理差不多，因为SS采用的是自由协议，一般被墙的可能性要小得多，所以更加稳定！一般不需要区分SS跟VPN的差别，SS在稳定性上更有优势，你值得拥有！</strong></p>\n</blockquote>\n<p>左侧菜单栏找到Shadowsocks Server，点进去安装就好了（<strong>注意：搬瓦工提供的一键安装功能只支持CentOS6</strong>，你也可以通过命令行的方式安装），安装好的Shadowsocks Server界面是这样的：<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server.png\" width=\"500\"><br>此时VPN已经可以用了，不过还差一个客户端，Windows版本的客户端在后台面板就有链接，Mac用户请<a href=\"https://sourceforge.net/projects/shadowsocksgui/\" target=\"_blank\" rel=\"external\">点击这里下载</a>如果无法访问，我已经下载好放到我的网盘了<a href=\"https://pan.baidu.com/s/1boXspQJ\" target=\"_blank\" rel=\"external\">ShadowsocksX-2.6.3.dmg</a>，安装好打开Shadowsocks Server，在Mac的工具栏会有一个小飞机的图标<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server%E4%BD%BF%E7%94%A8%E7%95%8C%E9%9D%A2.png\" width=\"300\" height=\"400\"><br>点开服务器，配置IP和密码，只需要修改地址和密码，其他不用改就OK了。<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server%E8%AE%BE%E7%BD%AE.png\" width=\"500\" height=\"300\"><br>上两张图显示Shadowsocks Server有两种加速模式 ，<strong>一般情况下勾选自动代理模式就可以了，这个这个模式下会自动判断你当前访问的域名是否在GFW名单里面，如果是就启用代理，如果不是就正常访问，这样我们在访问墙内网站的时候也不会受到任何影响</strong> ，如果你遇到网站无法访问，有可能是这个网站近期被墙了，你没有更新本地的GFW名单，如果你确定这个网站是可以打开的，切换到全局模式就可以访问了 </p>\n<blockquote>\n<p>Shadowsocks Server自动代理模式原理是根据GFWList配置了一个PAC文件，名单中的域名全部走代理，你可以手动修改这个配置文件，添加你要访问的被墙的网站，它就是一个js文件，你点击编辑自动模式的PAC文件便会跳转到这个js所在的位置，那个GFWList自动更新功能坏掉了，作者一直也没更新，不过不影响平时使用。  </p>\n</blockquote>\n<h3 id=\"三-加速VPN（很重要！很重要！很重要！）\"><a href=\"#三-加速VPN（很重要！很重要！很重要！）\" class=\"headerlink\" title=\"三.    加速VPN（很重要！很重要！很重要！）\"></a>三.    加速VPN（很重要！很重要！很重要！）</h3><p>完成上面的步骤，你确实是可以访问墙外网站了，但是下载速度一般只有100多KB，YouTube视频240P都感觉不流畅，此时就要用到Net-Speeder给VPN加速了，具体步骤请看：  </p>\n<h5 id=\"1-先连上远程主机\"><a href=\"#1-先连上远程主机\" class=\"headerlink\" title=\"1.    先连上远程主机\"></a>1.    先连上远程主机</h5><p><code>ssh -l root -p 12830 192.243.112.242</code><br>把端口和IP换成你自己主机的，然后需要输入root密码，输入在第一步我们设置的密码就可以了。  </p>\n<h5 id=\"2-安装Net-Speeder\"><a href=\"#2-安装Net-Speeder\" class=\"headerlink\" title=\"2.    安装Net-Speeder\"></a>2.    安装Net-Speeder</h5><p>输入下面的命令进行安装：<br><code>wget https://coding.net/u/njzhenghao/p/download/git/raw/master/net_speeder-installer.sh</code><br>这里我用的是别人git上的sh脚本，有现成的为何不用呢，是吧？！</p>\n<h5 id=\"3-编译并安装\"><a href=\"#3-编译并安装\" class=\"headerlink\" title=\"3.    编译并安装\"></a>3.    编译并安装</h5><p>输入下面的命令编译Net-Speeder：<br><code>bash net_speeder-installer.sh</code><br>命令执行成功之后，执行reboot重启主机，或者在后台面板重启主机也行。（<strong>此时远程主机的连接会断开，需要重新连接</strong>） </p>\n<h5 id=\"4-端口加速\"><a href=\"#4-端口加速\" class=\"headerlink\" title=\"4.    端口加速\"></a>4.    端口加速</h5><p>最后一步，加速端口：<br><code>nohup /usr/local/net_speeder/net_speeder venet0 &quot;ip&quot; &gt;/dev/null 2&gt;&amp;1 &amp;</code><br>执行完这个命令应该会有一个端口号打印出来，证明加速成功了！别着急还有最后一步，点开Shadowsocks Server菜单点击退出，<em>不要点退出Shadowsocks Server</em>，然后再次打开App，现在打开YouTube看个视频试试吧！现在墙外网站下载速度一般都在500KB左右，当然这个速度也受到你所在运营商的网络环境影响。（<strong>注意：加速端口这个命令每次重启主机都需要执行一次，因为这个脚本没有加到开机自启动，反正我们没事也不重启主机，我懒得弄了，大家自己Google吧，哈哈！</strong>）  </p>\n","excerpt":"<h2 id=\"前言：-废话较多，不想看的略过直接看后面的教程\"><a href=\"#前言：-废话较多，不想看的略过直接看后面的教程\" class=\"headerlink\" title=\"前言：(废话较多，不想看的略过直接看后面的教程)\"></a>前言：(废话较多，不想看的略过直接看后面的教程)</h2><ul>\n<li>作为一名有着远大理想和抱负的codeMonkey，平时查资料必须Google，百度一下会真的死啊！不是黑百度，确实百度出来的资料内容看一下大致是相同的，搜到的内容就是copy+paste，花了很多时间结果找不到我们想要的东西，最最重要的是搜索结果有一半是广告，这个时候只能求助于Google，无奈天朝的GFW，一直追求自由明主的Google早在10年就被GCD轰出了墙外，所以VPN成了连接我们和整个世界的桥梁。","more":"</li>\n<li>作为一名有着远大理想和抱负的codeMonkey，平时查资料必须Google，百度一下会真的死啊！不是黑百度，确实百度出来的资料内容看一下大致是相同的，搜到的内容就是copy+paste，花了很多时间结果找不到我们想要的东西，最最重要的是搜索结果有一半是广告，这个时候只能求助于Google，无奈天朝的GFW，一直追求自由明主的Google早在10年就被GCD轰出了墙外，所以VPN成了连接我们和整个世界的桥梁。  </li>\n<li>现在市面上的VPN产品满天飞，有不少是开张几个月就卷款跑路，然后重新弄个网站换个名字继续骗钱，市面上常见的VPN还有一个很大的缺点就是速度不稳定，只能够全局加速（至少在Mac上市这样），访问国内网站都很卡，因为这些VPN都是共享一条线路，用户少速度会快一点，人一多就卡成了龟速。当然也有部分VPN推出了专线套餐，便宜的一个月也要100大洋左右，我等屌丝“何德何能”能消费得起这样的产品啊（鬼魅的微笑）。  </li>\n<li>在用了几年这种VPN产品之后，我终于发现了一块新大陆，自己购买主机搭建VPN服务器，不论是速度还是用户体验，不要太爽的好伐，关键是价格很亲民，最便宜的一年20刀，折合人民币才100多大洋。接下来就给大家分享我搭建VPN的过程，搭建完成之后的VPN观看YouTube高清720P毫无压力（当然还要取决于运营商给你的带宽）。我购买的是VPS界享有“盛誉”的搬瓦工，价格亲民、速度快，有智能后台一键搭建VPN省去很多繁琐的命令行输入，大家可以在官网首页看到机型配置和价格，最便宜的2.99刀一个月，一年20刀。而且搬瓦工是30天无条件退款的，意思就是你可以用了29天，然后申请退款，审核之后就会把钱退给你。因为一开始不了解这个东西，所以购买了一个月2.99刀试试水，用了20天感觉速度和体验都非常不错，所以就买个一年的。非常可耻的是，我把之前购买的一个月的2.99刀退款了，然后购买了一个19.99刀一年的。</li>\n</ul>\n<h2 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h2><h3 id=\"一-购买VPS\"><a href=\"#一-购买VPS\" class=\"headerlink\" title=\"一.    购买VPS\"></a>一.    购买VPS</h3><blockquote>\n<p>VPS有点像VirtualBox、Parallels创建出来的主机，可以理解成一台独立的主机。我们需要购买的就是这样一台独立的主机，不过一定要购买海外的，否则搭建了VPN也无法访问海外的网站。  </p>\n</blockquote>\n<p>因为我用的是搬瓦工，并且感觉不错，推荐给大家，还有其他的海外VPS提供商也都是可以的。</p>\n<h5 id=\"搬瓦工官网链接：https-bandwagonhost-com\"><a href=\"#搬瓦工官网链接：https-bandwagonhost-com\" class=\"headerlink\" title=\"搬瓦工官网链接：https://bandwagonhost.com\"></a>搬瓦工官网链接：<a href=\"https://bandwagonhost.com/aff.php?aff=10505\">https://bandwagonhost.com</a></h5><p>（<em>不挂VPN访问不是很稳定，如果访问不了的话先借个VPN用一下吧，哈哈！</em>）  </p>\n<p>进入之后要注册，之后就可以购买主机了，根据你自己的经济情况来选择。（<em>其实不同主机的带宽都是一样的，只不过在配置上有差别，如果不是搭建大型的网站对配置有要求，只是想有个专线VPN的话，$19.99一年就足够用了。</em>）  </p>\n<blockquote>\n<p><strong>我在购买主机的时候有一个小坑要提一下，搬瓦工的支付方式只支持PayPal，国内强大的支付宝居然不能支付！所以又去注册一个PayPal，坑来了：</strong><br>PayPal分国内版和国际版，国内版是不支持美元支付的，而且两者的账户是不通的，所以你注册了国内版是无法支付的，国际版的地址是：<a href=\"https://www.paypal.com/c2/webapps/mpp/home\">https://www.paypal.com</a>，虽然是中文，但是货币是USD美元，绑定一张银联的卡就可以购物了。<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNPayPal.png\" width=\"500\"/>   </p>\n</blockquote>\n<p><strong>这里做个修正：搬瓦工已经推出支付宝支付了，check out的时候选择alipay就可以了</strong></p>\n<h3 id=\"二-配置服务器\"><a href=\"#二-配置服务器\" class=\"headerlink\" title=\"二.    配置服务器\"></a>二.    配置服务器</h3><h4 id=\"1-进入控制面板，修改当前的root密码\"><a href=\"#1-进入控制面板，修改当前的root密码\" class=\"headerlink\" title=\"1.    进入控制面板，修改当前的root密码\"></a>1.    进入控制面板，修改当前的root密码</h4><p>进入账户之后我们可以在MyServices中看到服务器列表：<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%97%E8%A1%A8.png\" alt=\"服务器列表\"><br>进入KiwiVM管理后台，我们可以看到左侧有个菜单栏，点击Root Shell-interactive，此时会以H5的形式打开一个terminal窗口，执行<code>passwd</code>命令修改root密码<br>（<em>如果你不嫌系统分配的root密码不好记、每次ssh进主机都要复制粘贴密码，那么略过这步，**</em>如果你忘记了root密码也可以直接通过这里修改，什么？！你忘记搬瓦工的账号密码无法进入后台面板？用你注册填写的邮箱或者手机号找回吧！**）<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E4%BF%AE%E6%94%B9root%E5%AF%86%E7%A0%81.png\" alt=\"修改root密码\"></p>\n<h4 id=\"2-安装一个你喜欢的Linux-OS\"><a href=\"#2-安装一个你喜欢的Linux-OS\" class=\"headerlink\" title=\"2.    安装一个你喜欢的Linux OS\"></a>2.    安装一个你喜欢的Linux OS</h4><p>左侧菜单栏找到Install New OS，选一个你喜欢的系统吧（<em>系统默认安装的是32位CentOS6，如果你不想换其他系统这步也可以略过，**</em>需要注意每次安装系统，主机所有数据都会丢失**）<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPN%E5%AE%89%E8%A3%85%E6%96%B0%E7%B3%BB%E7%BB%9F.png\" width=\"500\"/>  </p>\n<h4 id=\"3-安装Shadowsocks-Server\"><a href=\"#3-安装Shadowsocks-Server\" class=\"headerlink\" title=\"3.    安装Shadowsocks Server\"></a>3.    安装Shadowsocks Server</h4><blockquote>\n<p>搬瓦工也提供了openVPN一键安装，个人感觉Shadowsocks更好用，有两种加速模式，访问会更快速。<br><strong>其实这篇文章介绍的是SS的安装，它跟VPN的原理差不多，因为SS采用的是自由协议，一般被墙的可能性要小得多，所以更加稳定！一般不需要区分SS跟VPN的差别，SS在稳定性上更有优势，你值得拥有！</strong></p>\n</blockquote>\n<p>左侧菜单栏找到Shadowsocks Server，点进去安装就好了（<strong>注意：搬瓦工提供的一键安装功能只支持CentOS6</strong>，你也可以通过命令行的方式安装），安装好的Shadowsocks Server界面是这样的：<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server.png\" width=\"500\"/><br>此时VPN已经可以用了，不过还差一个客户端，Windows版本的客户端在后台面板就有链接，Mac用户请<a href=\"https://sourceforge.net/projects/shadowsocksgui/\">点击这里下载</a>如果无法访问，我已经下载好放到我的网盘了<a href=\"https://pan.baidu.com/s/1boXspQJ\">ShadowsocksX-2.6.3.dmg</a>，安装好打开Shadowsocks Server，在Mac的工具栏会有一个小飞机的图标<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server%E4%BD%BF%E7%94%A8%E7%95%8C%E9%9D%A2.png\" width=\"300\" height=\"400\" /><br>点开服务器，配置IP和密码，只需要修改地址和密码，其他不用改就OK了。<br><img src=\"http://oeat6c2zg.bkt.clouddn.com/%E6%90%AD%E5%BB%BAVPNShadowsocks%20Server%E8%AE%BE%E7%BD%AE.png\" width=\"500\" height=\"300\"/><br>上两张图显示Shadowsocks Server有两种加速模式 ，<strong>一般情况下勾选自动代理模式就可以了，这个这个模式下会自动判断你当前访问的域名是否在GFW名单里面，如果是就启用代理，如果不是就正常访问，这样我们在访问墙内网站的时候也不会受到任何影响</strong> ，如果你遇到网站无法访问，有可能是这个网站近期被墙了，你没有更新本地的GFW名单，如果你确定这个网站是可以打开的，切换到全局模式就可以访问了 </p>\n<blockquote>\n<p>Shadowsocks Server自动代理模式原理是根据GFWList配置了一个PAC文件，名单中的域名全部走代理，你可以手动修改这个配置文件，添加你要访问的被墙的网站，它就是一个js文件，你点击编辑自动模式的PAC文件便会跳转到这个js所在的位置，那个GFWList自动更新功能坏掉了，作者一直也没更新，不过不影响平时使用。  </p>\n</blockquote>\n<h3 id=\"三-加速VPN（很重要！很重要！很重要！）\"><a href=\"#三-加速VPN（很重要！很重要！很重要！）\" class=\"headerlink\" title=\"三.    加速VPN（很重要！很重要！很重要！）\"></a>三.    加速VPN（很重要！很重要！很重要！）</h3><p>完成上面的步骤，你确实是可以访问墙外网站了，但是下载速度一般只有100多KB，YouTube视频240P都感觉不流畅，此时就要用到Net-Speeder给VPN加速了，具体步骤请看：  </p>\n<h5 id=\"1-先连上远程主机\"><a href=\"#1-先连上远程主机\" class=\"headerlink\" title=\"1.    先连上远程主机\"></a>1.    先连上远程主机</h5><p><code>ssh -l root -p 12830 192.243.112.242</code><br>把端口和IP换成你自己主机的，然后需要输入root密码，输入在第一步我们设置的密码就可以了。  </p>\n<h5 id=\"2-安装Net-Speeder\"><a href=\"#2-安装Net-Speeder\" class=\"headerlink\" title=\"2.    安装Net-Speeder\"></a>2.    安装Net-Speeder</h5><p>输入下面的命令进行安装：<br><code>wget https://coding.net/u/njzhenghao/p/download/git/raw/master/net_speeder-installer.sh</code><br>这里我用的是别人git上的sh脚本，有现成的为何不用呢，是吧？！</p>\n<h5 id=\"3-编译并安装\"><a href=\"#3-编译并安装\" class=\"headerlink\" title=\"3.    编译并安装\"></a>3.    编译并安装</h5><p>输入下面的命令编译Net-Speeder：<br><code>bash net_speeder-installer.sh</code><br>命令执行成功之后，执行reboot重启主机，或者在后台面板重启主机也行。（<strong>此时远程主机的连接会断开，需要重新连接</strong>） </p>\n<h5 id=\"4-端口加速\"><a href=\"#4-端口加速\" class=\"headerlink\" title=\"4.    端口加速\"></a>4.    端口加速</h5><p>最后一步，加速端口：<br><code>nohup /usr/local/net_speeder/net_speeder venet0 &quot;ip&quot; &gt;/dev/null 2&gt;&amp;1 &amp;</code><br>执行完这个命令应该会有一个端口号打印出来，证明加速成功了！别着急还有最后一步，点开Shadowsocks Server菜单点击退出，<em>不要点退出Shadowsocks Server</em>，然后再次打开App，现在打开YouTube看个视频试试吧！现在墙外网站下载速度一般都在500KB左右，当然这个速度也受到你所在运营商的网络环境影响。（<strong>注意：加速端口这个命令每次重启主机都需要执行一次，因为这个脚本没有加到开机自启动，反正我们没事也不重启主机，我懒得弄了，大家自己Google吧，哈哈！</strong>）  </p>"},{"title":"dumpdecrypted给App砸壳","date":"2016-07-17T16:00:00.000Z","_content":"#### 1.前言\n> 我们都知道从AppStore下载的应用二进制文件被苹果进行了加密处理，也就是我们俗称的*壳*，我们要想对目标App进行逆向分析，必须解密目标二进制文件，俗称*砸壳*。  \n> long long ago有一种傻瓜式的砸壳方式，利用iPhoneCake源的AppCrackr进行一键砸壳，这种方式简单粗暴，省时省力，但正是因为它过于方便，导致几乎所有用户都可轻松上手，随便亵玩，所以不少用户都拿它来破解程序，这也导致了iOS越狱开发社区普遍认为这个软件助长了盗版的气焰，对iPhoneCake源进行了强烈谴责。迫于压力，iPhoneCake将AppCrackr下架。从此利用纯UI方式砸壳的行为已经走入绝路，只能利用更加geek更加niubility的方式来砸壳，这也是这篇文章介绍的主角**dumpdecrypted**  \n\n<!-- more --> \n#### 2.准备工作\n1. 一部已经越狱的手机 `我这里用的是iPhone 5S; iOS 9.1`\n2. 已经安装了OpenSSH\n3. 已经安装了[Cycript](http://www.cycript.org)\n4. [dumpdecrypted源码](https://github.com/stefanesser/dumpdecrypted/archive/master.zip)  \n\n#### 3.编译dumpdecrypted\n下载好之后将文件放到你自己的文件夹中，下面开始编译：  \n \n```\nLeonLei-MBP:~ gaoshilei$ cd /Users/gaoshilei/Desktop/reverse/dumpdecrypted  \nLeonLei-MBP:dumpdecrypted gaoshilei$ make\n`xcrun --sdk iphoneos --find gcc` -Os  -Wimplicit -isysroot `xcrun --sdk iphoneos --show-sdk-path` -F`xcrun --sdk iphoneos --show-sdk-path`/System/Library/Frameworks -F`xcrun --sdk iphoneos --show-sdk-path`/System/Library/PrivateFrameworks -arch armv7 -arch armv7s -arch arm64 -dynamiclib -o dumpdecrypted.dylib dumpdecrypted.o\n\n```\n进入dumpdecrypted目录下之后，执行make命令，此时目录下会生成一个`dumpdecrypted.dylib`，这个文件生成一次即可，下次砸壳可以直接使用。\n\n#### 4.开始砸壳  \n##### 定位目标App可执行文件的位置\n```\nLeonLei-MBP:~ gaoshilei$ ssh root@192.168.0.115\niPhone-5S:~ root# ps -e\n  PID TTY           TIME CMD\n    1 ??         5:23.51 /sbin/launchd\n   23 ??         0:00.81 /usr/libexec/amfid\n   34 ??         1:28.92 /usr/sbin/mediaserverd\n   36 ??         4:23.49 /usr/libexec/fseventsd\n   38 ??         1:21.05 /System/Library/PrivateFrameworks/AssistantServices.framework/assistantd\n   40 ??         0:01.13 /System/Library/PrivateFrameworks/FileProvider.framework/Support/fileproviderd\n   42 ??         1:56.46 /usr/libexec/routined\n   46 ??         0:03.34 /System/Library/PrivateFrameworks/MediaRemote.framework/Support/mediaremoted\n   48 ??         0:00.86 /usr/libexec/misd\n   50 ??         0:18.48 /System/Library/Frameworks/HealthKit.framework/healthd\n   52 ??        19:18.39 /usr/libexec/configd\n   54 ??         3:30.26 /System/Library/CoreServices/powerd.bundle/powerd\n   58 ??         0:50.73 /usr/libexec/atc\n   60 ??        13:47.50 /usr/sbin/wifid\n   ···              ···\n 5673 ??         0:04.41 /var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat\n 5732 ??         0:00.32 /usr/libexec/ptpd -t usb\n 5735 ??         0:00.07 /usr/libexec/webinspectord\n 5741 ??         0:00.18 sshd: root@ttys000 \n 5770 ??         0:00.16 /System/Library/PrivateFrameworks/SyncedDefaults.framework/Support/syncdefaultsd\n 5785 ??         0:00.05 /System/Library/CoreServices/CFNetworkAgent\n```\n可以看到目前手机运行的进程中有微信的影子`/var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat` 我们已经找到微信可执行文件的位置\n##### 目标锁定，定位到目标App的Documents位置  \n \n```\niPhone-5S:~ root# cycript -p WeChat  \ncy# [[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask][0]\n#file:///var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents/  \n```\n\n执行到这里我们已经找到了微信的Documents位置，正式开始砸壳！\n> 这里有两种方式，一种是scp命令行拷贝  \n> 另一种是iFunBox工具操作  \n\n我这里采用的是第一种scp命令行  \n```\nLeonLei-MBP:~ gaoshilei$ scp /Users/gaoshilei/Desktop/reverse/dumpdecrypted/dumpdecrypted.dylib   root@192.168.0.115:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents  \ndumpdecrypted.dylib                                                              100%  193KB 192.9KB/s   00:00  \n```  \n\n我们已经将dumpdecrypted.dylib拷贝到了微信沙盒的Document目录中，可以砸壳了：  \n \n```  \niPhone-5S:~ root# cd /var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents/\niPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root# DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib /var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat\nmach-o decryption dumper\nDISCLAIMER: This tool is only meant for security research purposes, not for application crackers.\n[+] detected 64bit ARM binary in memory.\n[+] offset to cryptid found: @0x100024ca8(from 0x100024000) = ca8\n[+] Found encrypted data at address 00004000 of length 45678592 bytes - type 1.\n[+] Opening /private/var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat for reading.\n[+] Reading header\n[+] Detecting header type\n[+] Executable is a plain MACH-O image\n[+] Opening WeChat.decrypted for writing.\n[+] Copying the not encrypted start of the file\n[+] Dumping the decrypted data into the file\n[+] Copying the not encrypted remainder of the file\n[+] Setting the LC_ENCRYPTION_INFO->cryptid to 0 at offset ca8\n[+] Closing original file\n[+] Closing dump file\niPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root#  \n```  \n\n等待命令执行完，此时已经完成砸壳，我们看一下当前目录都有啥：\n  \n```\niPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root# ls -o\ntotal 55272\ndrwxr-xr-x  6 mobile      272 Aug 26 13:48 00000000000000000000000000000000\ndrwxr-xr-x 20 mobile     1122 Oct 10 15:28 6f696a1b596ce2499419d844f90418aa\ndrwxr-xr-x  3 mobile      136 Oct  9 10:56 CrashReport\n-rw-r--r--  1 mobile      310 Aug 26 13:49 Ksid\n-rw-r--r--  1 mobile     1036 Oct 10 13:40 LocalInfo.lst\ndrwxr-xr-x  5 mobile      272 Aug 26 13:49 MMResourceMgr\ndrwxr-xr-x  2 mobile      748 Aug 26 13:51 MMappedKV\n-rw-r--r--  1 mobile       15 Oct 10 13:40 SafeMode.dat\n-rw-r--r--  1 root   56380816 Oct 10 15:37 WeChat.decrypted\n-rwxr-xr-x  1 root     197528 Oct 10 15:34 dumpdecrypted.dylib\n-rw-r--r--  1 mobile      448 Aug 26 13:49 mmupdateinfo.archive  \n```  \n\n砸好壳的微信可执行文件`WeChat.decrypted`已经生成，现在就可以把文件拷到Mac上利用IDA或者Hopper的分析了。\n","source":"_posts/dumpdecrypted给App砸壳.md","raw":"title: dumpdecrypted给App砸壳\ndate: 2016-07-18 00:00:00\n---\n#### 1.前言\n> 我们都知道从AppStore下载的应用二进制文件被苹果进行了加密处理，也就是我们俗称的*壳*，我们要想对目标App进行逆向分析，必须解密目标二进制文件，俗称*砸壳*。  \n> long long ago有一种傻瓜式的砸壳方式，利用iPhoneCake源的AppCrackr进行一键砸壳，这种方式简单粗暴，省时省力，但正是因为它过于方便，导致几乎所有用户都可轻松上手，随便亵玩，所以不少用户都拿它来破解程序，这也导致了iOS越狱开发社区普遍认为这个软件助长了盗版的气焰，对iPhoneCake源进行了强烈谴责。迫于压力，iPhoneCake将AppCrackr下架。从此利用纯UI方式砸壳的行为已经走入绝路，只能利用更加geek更加niubility的方式来砸壳，这也是这篇文章介绍的主角**dumpdecrypted**  \n\n<!-- more --> \n#### 2.准备工作\n1. 一部已经越狱的手机 `我这里用的是iPhone 5S; iOS 9.1`\n2. 已经安装了OpenSSH\n3. 已经安装了[Cycript](http://www.cycript.org)\n4. [dumpdecrypted源码](https://github.com/stefanesser/dumpdecrypted/archive/master.zip)  \n\n#### 3.编译dumpdecrypted\n下载好之后将文件放到你自己的文件夹中，下面开始编译：  \n \n```\nLeonLei-MBP:~ gaoshilei$ cd /Users/gaoshilei/Desktop/reverse/dumpdecrypted  \nLeonLei-MBP:dumpdecrypted gaoshilei$ make\n`xcrun --sdk iphoneos --find gcc` -Os  -Wimplicit -isysroot `xcrun --sdk iphoneos --show-sdk-path` -F`xcrun --sdk iphoneos --show-sdk-path`/System/Library/Frameworks -F`xcrun --sdk iphoneos --show-sdk-path`/System/Library/PrivateFrameworks -arch armv7 -arch armv7s -arch arm64 -dynamiclib -o dumpdecrypted.dylib dumpdecrypted.o\n\n```\n进入dumpdecrypted目录下之后，执行make命令，此时目录下会生成一个`dumpdecrypted.dylib`，这个文件生成一次即可，下次砸壳可以直接使用。\n\n#### 4.开始砸壳  \n##### 定位目标App可执行文件的位置\n```\nLeonLei-MBP:~ gaoshilei$ ssh root@192.168.0.115\niPhone-5S:~ root# ps -e\n  PID TTY           TIME CMD\n    1 ??         5:23.51 /sbin/launchd\n   23 ??         0:00.81 /usr/libexec/amfid\n   34 ??         1:28.92 /usr/sbin/mediaserverd\n   36 ??         4:23.49 /usr/libexec/fseventsd\n   38 ??         1:21.05 /System/Library/PrivateFrameworks/AssistantServices.framework/assistantd\n   40 ??         0:01.13 /System/Library/PrivateFrameworks/FileProvider.framework/Support/fileproviderd\n   42 ??         1:56.46 /usr/libexec/routined\n   46 ??         0:03.34 /System/Library/PrivateFrameworks/MediaRemote.framework/Support/mediaremoted\n   48 ??         0:00.86 /usr/libexec/misd\n   50 ??         0:18.48 /System/Library/Frameworks/HealthKit.framework/healthd\n   52 ??        19:18.39 /usr/libexec/configd\n   54 ??         3:30.26 /System/Library/CoreServices/powerd.bundle/powerd\n   58 ??         0:50.73 /usr/libexec/atc\n   60 ??        13:47.50 /usr/sbin/wifid\n   ···              ···\n 5673 ??         0:04.41 /var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat\n 5732 ??         0:00.32 /usr/libexec/ptpd -t usb\n 5735 ??         0:00.07 /usr/libexec/webinspectord\n 5741 ??         0:00.18 sshd: root@ttys000 \n 5770 ??         0:00.16 /System/Library/PrivateFrameworks/SyncedDefaults.framework/Support/syncdefaultsd\n 5785 ??         0:00.05 /System/Library/CoreServices/CFNetworkAgent\n```\n可以看到目前手机运行的进程中有微信的影子`/var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat` 我们已经找到微信可执行文件的位置\n##### 目标锁定，定位到目标App的Documents位置  \n \n```\niPhone-5S:~ root# cycript -p WeChat  \ncy# [[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask][0]\n#file:///var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents/  \n```\n\n执行到这里我们已经找到了微信的Documents位置，正式开始砸壳！\n> 这里有两种方式，一种是scp命令行拷贝  \n> 另一种是iFunBox工具操作  \n\n我这里采用的是第一种scp命令行  \n```\nLeonLei-MBP:~ gaoshilei$ scp /Users/gaoshilei/Desktop/reverse/dumpdecrypted/dumpdecrypted.dylib   root@192.168.0.115:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents  \ndumpdecrypted.dylib                                                              100%  193KB 192.9KB/s   00:00  \n```  \n\n我们已经将dumpdecrypted.dylib拷贝到了微信沙盒的Document目录中，可以砸壳了：  \n \n```  \niPhone-5S:~ root# cd /var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents/\niPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root# DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib /var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat\nmach-o decryption dumper\nDISCLAIMER: This tool is only meant for security research purposes, not for application crackers.\n[+] detected 64bit ARM binary in memory.\n[+] offset to cryptid found: @0x100024ca8(from 0x100024000) = ca8\n[+] Found encrypted data at address 00004000 of length 45678592 bytes - type 1.\n[+] Opening /private/var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat for reading.\n[+] Reading header\n[+] Detecting header type\n[+] Executable is a plain MACH-O image\n[+] Opening WeChat.decrypted for writing.\n[+] Copying the not encrypted start of the file\n[+] Dumping the decrypted data into the file\n[+] Copying the not encrypted remainder of the file\n[+] Setting the LC_ENCRYPTION_INFO->cryptid to 0 at offset ca8\n[+] Closing original file\n[+] Closing dump file\niPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root#  \n```  \n\n等待命令执行完，此时已经完成砸壳，我们看一下当前目录都有啥：\n  \n```\niPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root# ls -o\ntotal 55272\ndrwxr-xr-x  6 mobile      272 Aug 26 13:48 00000000000000000000000000000000\ndrwxr-xr-x 20 mobile     1122 Oct 10 15:28 6f696a1b596ce2499419d844f90418aa\ndrwxr-xr-x  3 mobile      136 Oct  9 10:56 CrashReport\n-rw-r--r--  1 mobile      310 Aug 26 13:49 Ksid\n-rw-r--r--  1 mobile     1036 Oct 10 13:40 LocalInfo.lst\ndrwxr-xr-x  5 mobile      272 Aug 26 13:49 MMResourceMgr\ndrwxr-xr-x  2 mobile      748 Aug 26 13:51 MMappedKV\n-rw-r--r--  1 mobile       15 Oct 10 13:40 SafeMode.dat\n-rw-r--r--  1 root   56380816 Oct 10 15:37 WeChat.decrypted\n-rwxr-xr-x  1 root     197528 Oct 10 15:34 dumpdecrypted.dylib\n-rw-r--r--  1 mobile      448 Aug 26 13:49 mmupdateinfo.archive  \n```  \n\n砸好壳的微信可执行文件`WeChat.decrypted`已经生成，现在就可以把文件拷到Mac上利用IDA或者Hopper的分析了。\n","slug":"dumpdecrypted给App砸壳","published":1,"updated":"2016-10-31T10:41:15.736Z","_id":"ciuxvnxpv0001lw6qog5pjlkf","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h4><blockquote>\n<p>我们都知道从AppStore下载的应用二进制文件被苹果进行了加密处理，也就是我们俗称的<em>壳</em>，我们要想对目标App进行逆向分析，必须解密目标二进制文件，俗称<em>砸壳</em>。<br>long long ago有一种傻瓜式的砸壳方式，利用iPhoneCake源的AppCrackr进行一键砸壳，这种方式简单粗暴，省时省力，但正是因为它过于方便，导致几乎所有用户都可轻松上手，随便亵玩，所以不少用户都拿它来破解程序，这也导致了iOS越狱开发社区普遍认为这个软件助长了盗版的气焰，对iPhoneCake源进行了强烈谴责。迫于压力，iPhoneCake将AppCrackr下架。从此利用纯UI方式砸壳的行为已经走入绝路，只能利用更加geek更加niubility的方式来砸壳，这也是这篇文章介绍的主角<strong>dumpdecrypted</strong>  </p>\n</blockquote>\n<a id=\"more\"></a> \n<h4 id=\"2-准备工作\"><a href=\"#2-准备工作\" class=\"headerlink\" title=\"2.准备工作\"></a>2.准备工作</h4><ol>\n<li>一部已经越狱的手机 <code>我这里用的是iPhone 5S; iOS 9.1</code></li>\n<li>已经安装了OpenSSH</li>\n<li>已经安装了<a href=\"http://www.cycript.org\" target=\"_blank\" rel=\"external\">Cycript</a></li>\n<li><a href=\"https://github.com/stefanesser/dumpdecrypted/archive/master.zip\" target=\"_blank\" rel=\"external\">dumpdecrypted源码</a>  </li>\n</ol>\n<h4 id=\"3-编译dumpdecrypted\"><a href=\"#3-编译dumpdecrypted\" class=\"headerlink\" title=\"3.编译dumpdecrypted\"></a>3.编译dumpdecrypted</h4><p>下载好之后将文件放到你自己的文件夹中，下面开始编译：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ cd /Users/gaoshilei/Desktop/reverse/dumpdecrypted  </div><div class=\"line\">LeonLei-MBP:dumpdecrypted gaoshilei$ make</div><div class=\"line\">`xcrun --sdk iphoneos --find gcc` -Os  -Wimplicit -isysroot `xcrun --sdk iphoneos --show-sdk-path` -F`xcrun --sdk iphoneos --show-sdk-path`/System/Library/Frameworks -F`xcrun --sdk iphoneos --show-sdk-path`/System/Library/PrivateFrameworks -arch armv7 -arch armv7s -arch arm64 -dynamiclib -o dumpdecrypted.dylib dumpdecrypted.o</div></pre></td></tr></table></figure>\n<p>进入dumpdecrypted目录下之后，执行make命令，此时目录下会生成一个<code>dumpdecrypted.dylib</code>，这个文件生成一次即可，下次砸壳可以直接使用。</p>\n<h4 id=\"4-开始砸壳\"><a href=\"#4-开始砸壳\" class=\"headerlink\" title=\"4.开始砸壳\"></a>4.开始砸壳</h4><h5 id=\"定位目标App可执行文件的位置\"><a href=\"#定位目标App可执行文件的位置\" class=\"headerlink\" title=\"定位目标App可执行文件的位置\"></a>定位目标App可执行文件的位置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ ssh root@192.168.0.115</div><div class=\"line\">iPhone-5S:~ root# ps -e</div><div class=\"line\">  PID TTY           TIME CMD</div><div class=\"line\">    1 ??         5:23.51 /sbin/launchd</div><div class=\"line\">   23 ??         0:00.81 /usr/libexec/amfid</div><div class=\"line\">   34 ??         1:28.92 /usr/sbin/mediaserverd</div><div class=\"line\">   36 ??         4:23.49 /usr/libexec/fseventsd</div><div class=\"line\">   38 ??         1:21.05 /System/Library/PrivateFrameworks/AssistantServices.framework/assistantd</div><div class=\"line\">   40 ??         0:01.13 /System/Library/PrivateFrameworks/FileProvider.framework/Support/fileproviderd</div><div class=\"line\">   42 ??         1:56.46 /usr/libexec/routined</div><div class=\"line\">   46 ??         0:03.34 /System/Library/PrivateFrameworks/MediaRemote.framework/Support/mediaremoted</div><div class=\"line\">   48 ??         0:00.86 /usr/libexec/misd</div><div class=\"line\">   50 ??         0:18.48 /System/Library/Frameworks/HealthKit.framework/healthd</div><div class=\"line\">   52 ??        19:18.39 /usr/libexec/configd</div><div class=\"line\">   54 ??         3:30.26 /System/Library/CoreServices/powerd.bundle/powerd</div><div class=\"line\">   58 ??         0:50.73 /usr/libexec/atc</div><div class=\"line\">   60 ??        13:47.50 /usr/sbin/wifid</div><div class=\"line\">   ···              ···</div><div class=\"line\"> 5673 ??         0:04.41 /var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat</div><div class=\"line\"> 5732 ??         0:00.32 /usr/libexec/ptpd -t usb</div><div class=\"line\"> 5735 ??         0:00.07 /usr/libexec/webinspectord</div><div class=\"line\"> 5741 ??         0:00.18 sshd: root@ttys000 </div><div class=\"line\"> 5770 ??         0:00.16 /System/Library/PrivateFrameworks/SyncedDefaults.framework/Support/syncdefaultsd</div><div class=\"line\"> 5785 ??         0:00.05 /System/Library/CoreServices/CFNetworkAgent</div></pre></td></tr></table></figure>\n<p>可以看到目前手机运行的进程中有微信的影子<code>/var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat</code> 我们已经找到微信可执行文件的位置</p>\n<h5 id=\"目标锁定，定位到目标App的Documents位置\"><a href=\"#目标锁定，定位到目标App的Documents位置\" class=\"headerlink\" title=\"目标锁定，定位到目标App的Documents位置\"></a>目标锁定，定位到目标App的Documents位置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">iPhone-5S:~ root# cycript -p WeChat  </div><div class=\"line\">cy# [[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask][0]</div><div class=\"line\">#file:///var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents/</div></pre></td></tr></table></figure>\n<p>执行到这里我们已经找到了微信的Documents位置，正式开始砸壳！</p>\n<blockquote>\n<p>这里有两种方式，一种是scp命令行拷贝<br>另一种是iFunBox工具操作  </p>\n</blockquote>\n<p>我这里采用的是第一种scp命令行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ scp /Users/gaoshilei/Desktop/reverse/dumpdecrypted/dumpdecrypted.dylib   root@192.168.0.115:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents  </div><div class=\"line\">dumpdecrypted.dylib                                                              100%  193KB 192.9KB/s   00:00  </div><div class=\"line\">```  </div><div class=\"line\"></div><div class=\"line\">我们已经将dumpdecrypted.dylib拷贝到了微信沙盒的Document目录中，可以砸壳了：  </div><div class=\"line\"> </div><div class=\"line\">```  </div><div class=\"line\">iPhone-5S:~ root# cd /var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents/</div><div class=\"line\">iPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root# DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib /var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat</div><div class=\"line\">mach-o decryption dumper</div><div class=\"line\">DISCLAIMER: This tool is only meant for security research purposes, not for application crackers.</div><div class=\"line\">[+] detected 64bit ARM binary in memory.</div><div class=\"line\">[+] offset to cryptid found: @0x100024ca8(from 0x100024000) = ca8</div><div class=\"line\">[+] Found encrypted data at address 00004000 of length 45678592 bytes - type 1.</div><div class=\"line\">[+] Opening /private/var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat for reading.</div><div class=\"line\">[+] Reading header</div><div class=\"line\">[+] Detecting header type</div><div class=\"line\">[+] Executable is a plain MACH-O image</div><div class=\"line\">[+] Opening WeChat.decrypted for writing.</div><div class=\"line\">[+] Copying the not encrypted start of the file</div><div class=\"line\">[+] Dumping the decrypted data into the file</div><div class=\"line\">[+] Copying the not encrypted remainder of the file</div><div class=\"line\">[+] Setting the LC_ENCRYPTION_INFO-&gt;cryptid to 0 at offset ca8</div><div class=\"line\">[+] Closing original file</div><div class=\"line\">[+] Closing dump file</div><div class=\"line\">iPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root#  </div><div class=\"line\">```  </div><div class=\"line\"></div><div class=\"line\">等待命令执行完，此时已经完成砸壳，我们看一下当前目录都有啥：</div></pre></td></tr></table></figure></p>\n<p>iPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root# ls -o<br>total 55272<br>drwxr-xr-x  6 mobile      272 Aug 26 13:48 00000000000000000000000000000000<br>drwxr-xr-x 20 mobile     1122 Oct 10 15:28 6f696a1b596ce2499419d844f90418aa<br>drwxr-xr-x  3 mobile      136 Oct  9 10:56 CrashReport<br>-rw-r–r–  1 mobile      310 Aug 26 13:49 Ksid<br>-rw-r–r–  1 mobile     1036 Oct 10 13:40 LocalInfo.lst<br>drwxr-xr-x  5 mobile      272 Aug 26 13:49 MMResourceMgr<br>drwxr-xr-x  2 mobile      748 Aug 26 13:51 MMappedKV<br>-rw-r–r–  1 mobile       15 Oct 10 13:40 SafeMode.dat<br>-rw-r–r–  1 root   56380816 Oct 10 15:37 WeChat.decrypted<br>-rwxr-xr-x  1 root     197528 Oct 10 15:34 dumpdecrypted.dylib<br>-rw-r–r–  1 mobile      448 Aug 26 13:49 mmupdateinfo.archive<br>```  </p>\n<p>砸好壳的微信可执行文件<code>WeChat.decrypted</code>已经生成，现在就可以把文件拷到Mac上利用IDA或者Hopper的分析了。</p>\n","excerpt":"<h4 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h4><blockquote>\n<p>我们都知道从AppStore下载的应用二进制文件被苹果进行了加密处理，也就是我们俗称的<em>壳</em>，我们要想对目标App进行逆向分析，必须解密目标二进制文件，俗称<em>砸壳</em>。<br>long long ago有一种傻瓜式的砸壳方式，利用iPhoneCake源的AppCrackr进行一键砸壳，这种方式简单粗暴，省时省力，但正是因为它过于方便，导致几乎所有用户都可轻松上手，随便亵玩，所以不少用户都拿它来破解程序，这也导致了iOS越狱开发社区普遍认为这个软件助长了盗版的气焰，对iPhoneCake源进行了强烈谴责。迫于压力，iPhoneCake将AppCrackr下架。从此利用纯UI方式砸壳的行为已经走入绝路，只能利用更加geek更加niubility的方式来砸壳，这也是这篇文章介绍的主角<strong>dumpdecrypted</strong>  </p>\n</blockquote>","more":"<h4 id=\"2-准备工作\"><a href=\"#2-准备工作\" class=\"headerlink\" title=\"2.准备工作\"></a>2.准备工作</h4><ol>\n<li>一部已经越狱的手机 <code>我这里用的是iPhone 5S; iOS 9.1</code></li>\n<li>已经安装了OpenSSH</li>\n<li>已经安装了<a href=\"http://www.cycript.org\">Cycript</a></li>\n<li><a href=\"https://github.com/stefanesser/dumpdecrypted/archive/master.zip\">dumpdecrypted源码</a>  </li>\n</ol>\n<h4 id=\"3-编译dumpdecrypted\"><a href=\"#3-编译dumpdecrypted\" class=\"headerlink\" title=\"3.编译dumpdecrypted\"></a>3.编译dumpdecrypted</h4><p>下载好之后将文件放到你自己的文件夹中，下面开始编译：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ cd /Users/gaoshilei/Desktop/reverse/dumpdecrypted  </div><div class=\"line\">LeonLei-MBP:dumpdecrypted gaoshilei$ make</div><div class=\"line\">`xcrun --sdk iphoneos --find gcc` -Os  -Wimplicit -isysroot `xcrun --sdk iphoneos --show-sdk-path` -F`xcrun --sdk iphoneos --show-sdk-path`/System/Library/Frameworks -F`xcrun --sdk iphoneos --show-sdk-path`/System/Library/PrivateFrameworks -arch armv7 -arch armv7s -arch arm64 -dynamiclib -o dumpdecrypted.dylib dumpdecrypted.o</div></pre></td></tr></table></figure>\n<p>进入dumpdecrypted目录下之后，执行make命令，此时目录下会生成一个<code>dumpdecrypted.dylib</code>，这个文件生成一次即可，下次砸壳可以直接使用。</p>\n<h4 id=\"4-开始砸壳\"><a href=\"#4-开始砸壳\" class=\"headerlink\" title=\"4.开始砸壳\"></a>4.开始砸壳</h4><h5 id=\"定位目标App可执行文件的位置\"><a href=\"#定位目标App可执行文件的位置\" class=\"headerlink\" title=\"定位目标App可执行文件的位置\"></a>定位目标App可执行文件的位置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ ssh root@192.168.0.115</div><div class=\"line\">iPhone-5S:~ root# ps -e</div><div class=\"line\">  PID TTY           TIME CMD</div><div class=\"line\">    1 ??         5:23.51 /sbin/launchd</div><div class=\"line\">   23 ??         0:00.81 /usr/libexec/amfid</div><div class=\"line\">   34 ??         1:28.92 /usr/sbin/mediaserverd</div><div class=\"line\">   36 ??         4:23.49 /usr/libexec/fseventsd</div><div class=\"line\">   38 ??         1:21.05 /System/Library/PrivateFrameworks/AssistantServices.framework/assistantd</div><div class=\"line\">   40 ??         0:01.13 /System/Library/PrivateFrameworks/FileProvider.framework/Support/fileproviderd</div><div class=\"line\">   42 ??         1:56.46 /usr/libexec/routined</div><div class=\"line\">   46 ??         0:03.34 /System/Library/PrivateFrameworks/MediaRemote.framework/Support/mediaremoted</div><div class=\"line\">   48 ??         0:00.86 /usr/libexec/misd</div><div class=\"line\">   50 ??         0:18.48 /System/Library/Frameworks/HealthKit.framework/healthd</div><div class=\"line\">   52 ??        19:18.39 /usr/libexec/configd</div><div class=\"line\">   54 ??         3:30.26 /System/Library/CoreServices/powerd.bundle/powerd</div><div class=\"line\">   58 ??         0:50.73 /usr/libexec/atc</div><div class=\"line\">   60 ??        13:47.50 /usr/sbin/wifid</div><div class=\"line\">   ···              ···</div><div class=\"line\"> 5673 ??         0:04.41 /var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat</div><div class=\"line\"> 5732 ??         0:00.32 /usr/libexec/ptpd -t usb</div><div class=\"line\"> 5735 ??         0:00.07 /usr/libexec/webinspectord</div><div class=\"line\"> 5741 ??         0:00.18 sshd: root@ttys000 </div><div class=\"line\"> 5770 ??         0:00.16 /System/Library/PrivateFrameworks/SyncedDefaults.framework/Support/syncdefaultsd</div><div class=\"line\"> 5785 ??         0:00.05 /System/Library/CoreServices/CFNetworkAgent</div></pre></td></tr></table></figure>\n<p>可以看到目前手机运行的进程中有微信的影子<code>/var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat</code> 我们已经找到微信可执行文件的位置</p>\n<h5 id=\"目标锁定，定位到目标App的Documents位置\"><a href=\"#目标锁定，定位到目标App的Documents位置\" class=\"headerlink\" title=\"目标锁定，定位到目标App的Documents位置\"></a>目标锁定，定位到目标App的Documents位置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">iPhone-5S:~ root# cycript -p WeChat  </div><div class=\"line\">cy# [[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask][0]</div><div class=\"line\">#file:///var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents/</div></pre></td></tr></table></figure>\n<p>执行到这里我们已经找到了微信的Documents位置，正式开始砸壳！</p>\n<blockquote>\n<p>这里有两种方式，一种是scp命令行拷贝<br>另一种是iFunBox工具操作  </p>\n</blockquote>\n<p>我这里采用的是第一种scp命令行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ scp /Users/gaoshilei/Desktop/reverse/dumpdecrypted/dumpdecrypted.dylib   root@192.168.0.115:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents  </div><div class=\"line\">dumpdecrypted.dylib                                                              100%  193KB 192.9KB/s   00:00  </div><div class=\"line\">```  </div><div class=\"line\"></div><div class=\"line\">我们已经将dumpdecrypted.dylib拷贝到了微信沙盒的Document目录中，可以砸壳了：  </div><div class=\"line\"> </div><div class=\"line\">```  </div><div class=\"line\">iPhone-5S:~ root# cd /var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents/</div><div class=\"line\">iPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root# DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib /var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat</div><div class=\"line\">mach-o decryption dumper</div><div class=\"line\">DISCLAIMER: This tool is only meant for security research purposes, not for application crackers.</div><div class=\"line\">[+] detected 64bit ARM binary in memory.</div><div class=\"line\">[+] offset to cryptid found: @0x100024ca8(from 0x100024000) = ca8</div><div class=\"line\">[+] Found encrypted data at address 00004000 of length 45678592 bytes - type 1.</div><div class=\"line\">[+] Opening /private/var/mobile/Containers/Bundle/Application/2A4313C7-6B36-40AF-9BEC-2C77FF1AC484/WeChat.app/WeChat for reading.</div><div class=\"line\">[+] Reading header</div><div class=\"line\">[+] Detecting header type</div><div class=\"line\">[+] Executable is a plain MACH-O image</div><div class=\"line\">[+] Opening WeChat.decrypted for writing.</div><div class=\"line\">[+] Copying the not encrypted start of the file</div><div class=\"line\">[+] Dumping the decrypted data into the file</div><div class=\"line\">[+] Copying the not encrypted remainder of the file</div><div class=\"line\">[+] Setting the LC_ENCRYPTION_INFO-&gt;cryptid to 0 at offset ca8</div><div class=\"line\">[+] Closing original file</div><div class=\"line\">[+] Closing dump file</div><div class=\"line\">iPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root#  </div><div class=\"line\">```  </div><div class=\"line\"></div><div class=\"line\">等待命令执行完，此时已经完成砸壳，我们看一下当前目录都有啥：</div></pre></td></tr></table></figure></p>\n<p>iPhone-5S:/var/mobile/Containers/Data/Application/B591D3D1-5B75-4F55-923B-C9FBF339EFE5/Documents root# ls -o<br>total 55272<br>drwxr-xr-x  6 mobile      272 Aug 26 13:48 00000000000000000000000000000000<br>drwxr-xr-x 20 mobile     1122 Oct 10 15:28 6f696a1b596ce2499419d844f90418aa<br>drwxr-xr-x  3 mobile      136 Oct  9 10:56 CrashReport<br>-rw-r–r–  1 mobile      310 Aug 26 13:49 Ksid<br>-rw-r–r–  1 mobile     1036 Oct 10 13:40 LocalInfo.lst<br>drwxr-xr-x  5 mobile      272 Aug 26 13:49 MMResourceMgr<br>drwxr-xr-x  2 mobile      748 Aug 26 13:51 MMappedKV<br>-rw-r–r–  1 mobile       15 Oct 10 13:40 SafeMode.dat<br>-rw-r–r–  1 root   56380816 Oct 10 15:37 WeChat.decrypted<br>-rwxr-xr-x  1 root     197528 Oct 10 15:34 dumpdecrypted.dylib<br>-rw-r–r–  1 mobile      448 Aug 26 13:49 mmupdateinfo.archive<br>```  </p>\n<p>砸好壳的微信可执行文件<code>WeChat.decrypted</code>已经生成，现在就可以把文件拷到Mac上利用IDA或者Hopper的分析了。</p>"},{"title":"iPhone查找序列号生成函数","date":"2016-08-02T16:00:00.000Z","_content":"<Excerpt in index | 首页摘要> \n+<!-- more -->\n<The rest of contents | 余下全文>\n##  前言  \n在iOS7之前我们可以通过`- (NSString *)uniqueIdentifier`这个方法获取iPhone的唯一标识符，也叫作UDID。不过自从iOS7苹果就把这个方法给禁了，此时我们想要获取iPhone的唯一标识符就很困难。  \n不过苹果提供一个叫做IDFA的标识符，这个IDFA是广告标识符用来追踪广告投放的，不过用户可以在设置中手动重置IDFA，可靠性很低，目前常见的两种标记iPhone的方式为  \n*  openUDID  \n*  IDFA或UUID+keychain  \n\n这两种模式都有个弊端，用户重置手机或者刷机唯一标识符会发生变化，不过对于大多数情况是够用了。看来苹果是把路给封死了，有没有办法拿到之前的UDID呢？我们注意到iPhone的设置通用关于里面有手机的硬件信息，其中有一个serialNumber，这个serialnumber就是我们查询手机是否过保的依据，那么它肯定是唯一的，所以下文是围绕这个进行的探索。最终是可以拿到这个serialNumber的， 不过由于苹果的沙盒限制，所以只能在越狱机中拿到，如果想在非越狱机中拿到必须添加entitlements文件来获取权限，可想而知这个应用是无法上架的。**下文仅作为逆向工程的一种思路和探索，请勿用于非法用途。**  \n\n##  正文\n###\t一、SSH连接手机（USB模式）\n####\t1.映射端口\n```\nLeonLei-MBP:~ gaoshilei$ /Users/gaoshilei/Desktop/reverse/USBSSH/tcprelay.py -t 22:6666\nForwarding local port 6666 to remote port 22\n```\n####\t2.连接手机，并且用grep命令快速筛选当前我们要调试的应用Preferences，附加debugserver开始1234端口等待lldb调试\n```\nLeonLei-MBP:~ gaoshilei$ ssh root@localhost -p 6666\niPhone-5S:~ root# ps -e | grep Pre\n  270 ??         0:00.29 /System/Library/PrivateFrameworks/MobileSoftwareUpdate.framework/XPCServices/com.apple.MobileSoftwareUpdate.CleanupPreparePathService.xpc/com.apple.MobileSoftwareUpdate.CleanupPreparePathService\n 1192 ??         0:14.26 /var/db/stash/_.fP74Fg/Applications/Preferences.app/Preferences\n 1289 ttys000    0:00.01 grep Pre\niPhone-5S:~ root# debugserver *:1234 -a \"Preferences\"\ndebugserver-@(#)PROGRAM:debugserver  PROJECT:debugserver-340.3.51.1\n for arm64.\nAttaching to process Preferences...\nListening to port 1234 for a connection from *...\n```\n####\t3.完成以上两步接下来就可以进行lldb调试了，首先要把远端（手机）的1234端口映射到本地，跟前面提到的SSH端口映射一样\n```\nLeonLei-MBP:~ gaoshilei$ /Users/gaoshilei/Desktop/reverse/USBSSH/tcprelay.py -t 1234:1234\nForwarding local port 1234 to remote port 1234\n```\n###\t二、通过LLDB、IDA寻找线索\nlldb的调试端口已经打开，此时我们可以进入调试\n\n```\nLeonLei-MBP:~ gaoshilei$ lldb\n(lldb) process connect connect://localhost:1234\nProcess 1192 stopped  \n* thread #1: tid = 0x523a6, 0x000000019a3c8a40 libsystem_kernel.dylib`mach_msg_trap + 8, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP  \n    frame #0: 0x000000019a3c8a40 libsystem_kernel.dylib`mach_msg_trap + 8\nlibsystem_kernel.dylib`mach_msg_trap:\n->  0x19a3c8a40 <+8>: ret    \nlibsystem_kernel.dylib`mach_msg_overwrite_trap:\n    0x19a3c8a44 <+0>: movn   x16, #0x1f\n    0x19a3c8a48 <+4>: svc    #0x80\n    0x19a3c8a4c <+8>: ret    \n```\n此时我们已经成功进入Preferences的调试阶段，先c一下，让程序继续运行\n  \n```\n(lldb) c\nProcess 1192 resuming\n```\n这么做的原因是我们待会要打印image的基地址偏移，有可能在我们打印的image list中没有我们想要的image。\n此时我们已经找到到Preference.framework的基地址偏移，见下图\n\n```\n(lldb) im li -o -f\n[  0] 0x00000000000dc000 /var/db/stash/_.fP74Fg/Applications/Preferences.app/Preferences(0x00000001000dc000)\n[  1] 0x0000000100100000 /Library/MobileSubstrate/MobileSubstrate.dylib(0x0000000100100000)\n[  2] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/PrivateFrameworks/BulletinBoard.framework/BulletinBoard\n[  3] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation\n[  4] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/Frameworks/IOKit.framework/Versions/A/IOKit\n…\n[ 44] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/PrivateFrameworks/Preferences.framework/Preferences\n…  \n```\n我们要找的image的序号在这里是44，它的基地址偏移为0x2e50000，我们把从iPhone中导出的PrivateFrameworks中的Preferences.framework丢到IDA中进行分析，这个二进制文件比较小，很快就分析完成，在前面我们已经知道iPhone的唯一序列号serial number是通过PSListController生成的，并且我们知道这是一个cell，我们要去调试`[PSListController tableView:cellForRowAtIndexPath:]`这个方法，从中找到cell值的来源，从而找到获取序列号的方法。\n\n```\n__text:00000001908040C8 ; -[PSListController tableView:cellForRowAtIndexPath:]\n__text:00000001908040C8 __PSListController_tableView_cellForRowAtIndexPath__\n__text:00000001908040C8                                         ; DATA XREF: __objc_const:000000019C069B88\u0019o\n__text:00000001908040C8\n__text:00000001908040C8 var_80          = -0x80\n__text:00000001908040C8 var_78          = -0x78\n__text:00000001908040C8 var_70          = -0x70\n__text:00000001908040C8 var_68          = -0x68\n__text:00000001908040C8 var_60          = -0x60\n__text:00000001908040C8 var_50          = -0x50\n__text:00000001908040C8 var_40          = -0x40\n__text:00000001908040C8 var_30          = -0x30\n__text:00000001908040C8 var_20          = -0x20\n__text:00000001908040C8 var_10          = -0x10\n__text:00000001908040C8\n__text:00000001908040C8                 STP             X28, X27, [SP,#var_60]!\n__text:00000001908040CC                 STP             X26, X25, [SP,#0x60+var_50]\n__text:00000001908040D0                 STP             X24, X23, [SP,#0x60+var_40]\n__text:00000001908040D4                 STP             X22, X21, [SP,#0x60+var_30]\n__text:00000001908040D8                 STP             X20, X19, [SP,#0x60+var_20]\n__text:00000001908040DC                 STP             X29, X30, [SP,#0x60+var_10]\n__text:00000001908040E0                 ADD             X29, SP, #0x60+var_10\n__text:00000001908040E4                 SUB             SP, SP, #0x20\n__text:00000001908040E8                 MOV             X21, X3\n__text:00000001908040EC                 MOV             X20, X0\n__text:00000001908040F0                 MOV             X0, X2\n__text:00000001908040F4                 BL              0x96C400A0\n__text:00000001908040F8                 MOV             X26, X0\n__text:00000001908040FC                 ADRP            X8, #off_19DACC568@PAGE\n__text:0000000190804100                 LDR             X1, [X8,#off_19DACC568@PAGEOFF]\n__text:0000000190804104                 MOV             X0, X20\n__text:0000000190804108                 MOV             X2, X21\n__text:000000019080410C                 BL              0x96C39BC0\n__text:0000000190804110                 MOV             X2, X0\n__text:0000000190804114                 ADRP            X8, #_OBJC_IVAR_$_PSListController._specifiers@PAGE ; NSArray *_specifiers;\n__text:0000000190804118                 LDRSW           X27, [X8,#_OBJC_IVAR_$_PSListController._specifiers@PAGEOFF] ; NSArray *_specifiers;\n__text:000000019080411C                 LDR             X0, [X20,X27]\n__text:0000000190804120                 ADRP            X8, #off_19DACC558@PAGE\n……\n```\n我们在Preference.framework中基地址为0x190804114的位置打个断点，具体的做法是：\n\n```\n(lldb) br s -a 0x190804114+0x2e50000\nBreakpoint 1: where = Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76, address = 0x0000000193654114\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x0000000193654114 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x0000000193654114 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76\nPreferences`-[PSListController tableView:cellForRowAtIndexPath:]:\n->  0x193654114 <+76>: adrp   x8, 53965\n    0x193654118 <+80>: ldrsw  x27, [x8, #516]\n    0x19365411c <+84>: ldr    x0, [x20, x27]\n    0x193654120 <+88>: adrp   x8, 53960\n```\n这里断点这样打是因为系统加载可执行文件和各种framework的时候会有一个地址偏移，我们在打断点的时候要把这个偏移量加上，这样我们打的断点才是准确的。\n可以看到我们已经成功打了一个断点，断点的address = 0x193654114。此时我们打印变量x0和x27的值\n\n```\n(lldb) po $x0\n13\n(lldb) po $x27\n1104\n```\n我们执行ni让程序继续（这里的`ni`命令相当于Xcode的那个下箭头命令，也就是下一行）\n\n```\n(lldb) ni\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x0000000193654118 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 80, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x0000000193654118 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 80\nPreferences`-[PSListController tableView:cellForRowAtIndexPath:]:\n->  0x193654118 <+80>: ldrsw  x27, [x8, #516]\n    0x19365411c <+84>: ldr    x0, [x20, x27]\n    0x193654120 <+88>: adrp   x8, 53960\n    0x193654124 <+92>: ldr    x22, [x8, #1368]\n(lldb) ni\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x000000019365411c Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 84, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x000000019365411c Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 84\nPreferences`-[PSListController tableView:cellForRowAtIndexPath:]:\n->  0x19365411c <+84>: ldr    x0, [x20, x27]\n    0x193654120 <+88>: adrp   x8, 53960\n    0x193654124 <+92>: ldr    x22, [x8, #1368]\n    0x193654128 <+96>: mov    x1, x22\n(lldb) po $x27\n848\n\n(lldb) po $x0\n13\n```\n我们ni的两次，程序已经走到0x19080411C的位置，然后我们继续打印变量x0和x27的值\n\n```\n(lldb) po $x0\n13\n(lldb) po $x27\n1104\n```\n打印出来的x0和x27都是随机数，还是没有什么收获，我们继续\n\n```\n(lldb) ni\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x0000000193654120 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 88, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x0000000193654120 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 88\nPreferences`-[PSListController tableView:cellForRowAtIndexPath:]:\n->  0x193654120 <+88>:  adrp   x8, 53960\n    0x193654124 <+92>:  ldr    x22, [x8, #1368]\n    0x193654128 <+96>:  mov    x1, x22\n    0x19365412c <+100>: bl     0x199a89bc0               ; objc_msgSend\n(lldb) po $x0\n<__NSArrayI 0x13105a780>(\nG: <PSSpecifier 0x12ff50cf0: ID 0, Name '' target <(null): 0x0>> 0x12ff50cf0,\n<PSSpecifier 0x12ff50f50: ID NAME_CELL_ID, Name 'Name' target <AboutDataSource: 0x131028390>>,\nG: <PSSpecifier 0x12ff51680: ID 2, Name '' target <(null): 0x0>> 0x12ff51680,\n<PSSpecifier 0x12ff52360: ID NETWORK, Name 'Network' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff52420: ID SONGS, Name 'Songs' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff519f0: ID VIDEOS, Name 'Videos' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff51ab0: ID PHOTOS, Name 'Photos' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff51b70: ID APPLICATIONS, Name 'Applications' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff524e0: ID User Data Capacity, Name 'Capacity' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff525a0: ID User Data Available, Name 'Available' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff526a0: ID ProductVersion, Name 'Version' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff52850: ID CARRIER_VERSION, Name 'Carrier' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff52980: ID ProductModel, Name 'Model' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff52a60: ID SerialNumber, Name 'Serial Number' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff52b90: ID MACAddress, Name 'Wi-Fi Address' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff51050: ID BTMACAddress, Name 'Bluetooth' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12fde95d0: ID ModemVersion, Name 'Modem Firmware' target <AboutDataSource: 0x131028390>>,\nG: <PSSpecifier 0x131031e90: ID 17, Name '' target <(null): 0x0>> 0x131031e90,\n<PSSpecifier 0x12fde9c40: ID LEGAL_AND_REGULATORY, Name 'Legal' target <(null): 0x0>>,\nG: <PSSpecifier 0x131029dc0: ID TRUST_STORE_GROUP, Name '' target <(null): 0x0>> 0x131029dc0,\n<PSSpecifier 0x131033520: ID TRUST_STORE, Name 'Trust Store' target <AboutDataSource: 0x131028390>>\n)\n```\n我们让程序执行下一步，发现此时x0已经有值了，可以明显的看出，x0的值是在0x190804114~0x19080411C这段代码生成的，下面我们的工作重点就是寻找这段代码干了什么，胜利就在眼前！下面我们验证一下这里面到底有没有我们要的序列号：\n\n```\n(lldb) po [[$x0 objectAtIndex:13] class]\nPSSpecifier\n(lldb) po [[$x0 objectAtIndex:13] properties]\n{\n    cellObject = \"<PSTableCell: 0x130800000; baseClass = UITableViewCell; frame = (0 565; 320 45); text = 'Serial Number'; hidden = YES; autoresize = W; tag = 4; gestureRecognizers = <NSArray: 0x12ff821c0>; layer = <CALayer: 0x12fd7d340>>\";\n    id = SerialNumber;\n    isCopyable = 1;\n    value = DNPMVG0EFF9V;\n}\n```\n我们打印数组中存放cell数据的object属于哪个类，发现是`PSSpecifier`，我们找到之前导出的类的头文件，发现这个类有一个叫做`properties`的实例方法，我们调用一下发现我们要的序列号就在里面`value = DNPMVG0EFF9V`，这跟iPhone设置中看到的序列号是一致的。猜测这个数组里面存放着系统设置中`PSUIAboutController`中所有cel的数据，这个数组下一个肯定要传递到cell生成的方法中，这个就不做验证了，大事重要，我们继续找序列号的生成方法。\n这个`PSSpecifier`中有一个`AboutDataSource`对象，这个非常可疑，从名称上可以判断，这个类是专门用于数据处理的，不过在这之前我们还是先验证一下，在0x190804114~0x19080411C这段地址中，执行了`_PSListController._specifiers`，我们从`PSListController`的头文件（下文有讲怎么获取）中可以看到有一个specifiers属性，我们在IDA分析的文件中找到`[PSListController specifiers]`，我们先定位到方法在二进制文件中的位置：\n\n```\n__text:00000001907FE4A8 ; -[PSListController specifiers]\n__text:00000001907FE4A8 __PSListController_specifiers_          ; DATA XREF: __objc_const:000000019C069A08\u0019o\n__text:00000001907FE4A8\n__text:00000001907FE4A8 var_40          = -0x40\n__text:00000001907FE4A8 var_30          = -0x30\n__text:00000001907FE4A8 var_20          = -0x20\n__text:00000001907FE4A8 var_10          = -0x10\n__text:00000001907FE4A8\n__text:00000001907FE4A8                 STP             X24, X23, [SP,#var_40]!\n__text:00000001907FE4AC                 STP             X22, X21, [SP,#0x40+var_30]\n__text:00000001907FE4B0                 STP             X20, X19, [SP,#0x40+var_20]\n__text:00000001907FE4B4                 STP             X29, X30, [SP,#0x40+var_10]\n__text:00000001907FE4B8                 ADD             X29, SP, #0x40+var_10\n__text:00000001907FE4BC                 MOV             X19, X0\n__text:00000001907FE4C0                 ADRP            X8, #_OBJC_IVAR_$_PSListController._specifiers@PAGE ; NSArray *_specifiers;\n__text:00000001907FE4C4                 LDRSW           X22, [X8,#_OBJC_IVAR_$_PSListController._specifiers@PAGEOFF] ; NSArray *_specifiers;\n__text:00000001907FE4C8                 LDR             X8, [X19,X22]\n__text:00000001907FE4CC                 CBNZ            X8, loc_1907FE5E0\n__text:00000001907FE4D0                 ADRP            X8, #_OBJC_IVAR_$_PSListController._dataSource@PAGE ; id <PSSpecifierDataSource> _dataSource;\n__text:00000001907FE4D4                 LDRSW           X8, [X8,#_OBJC_IVAR_$_PSListController._dataSource@PAGEOFF] ; id <PSSpecifierDataSource> _dataSource;\n__text:00000001907FE4D8                 LDR             X9, [X19,X8]\n__text:00000001907FE4DC                 CBZ             X9, loc_1907FE550\n__text:00000001907FE4E0                 ADRP            X9, #_OBJC_IVAR_$_PSListController._requestingSpecifiersFromDataSource@PAGE ; bool _requestingSpecifiersFromDataSource;\n__text:00000001907FE4E4                 LDRSW           X23, [X9,#_OBJC_IVAR_$_PSListController._requestingSpecifiersFromDataSource@PAGEOFF] ; bool _requestingSpecifiersFromDataSource;\n__text:00000001907FE4E8                 MOV             W9, #1\n__text:00000001907FE4EC                 STRB            W9, [X19,X23]\n__text:00000001907FE4F0                 LDR             X20, [X19,X8]\n__text:00000001907FE4F4                 ADRP            X8, #selRef_specifier@PAGE\n__text:00000001907FE4F8                 LDR             X1, [X8,#selRef_specifier@PAGEOFF]\n__text:00000001907FE4FC                 MOV             X0, X19\n__text:00000001907FE500                 BL              0x96C39BC0\n__text:00000001907FE504                 MOV             X29, X29\n__text:00000001907FE508                 BL              0x96C41EF0\n__text:00000001907FE50C                 MOV             X21, X0\n__text:00000001907FE510                 ADRP            X8, #selRef_specifiersForSpecifier_observer_@PAGE\n__text:00000001907FE514                 LDR             X1, \n……\n```\n然后在这里面下个断点看看会发生什么\n\n```\n(lldb) br s -a 0x1907FE4D0+0x198e58640\nBreakpoint 9: where = Preferences`-[PSListController specifiers] + 40, address = 0x000000019364e4d0\n```\n我们从设置中进入通用>关于，发现一开始就走到了这个断点，我们猜测，一进入关于页面，系统会首先把所有cell的数据都准备好，然后加载UI\n\n```\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x000000019364e4d0 Preferences`-[PSListController specifiers] + 40, queue = 'com.apple.main-thread', stop reason = breakpoint 9.1\n    frame #0: 0x000000019364e4d0 Preferences`-[PSListController specifiers] + 40\nPreferences`-[PSListController specifiers]:\n->  0x19364e4d0 <+40>: adrp   x8, 53971\n    0x19364e4d4 <+44>: ldrsw  x8, [x8, #536]\n    0x19364e4d8 <+48>: ldr    x9, [x19, x8]\n    0x19364e4dc <+52>: cbz    x9, 0x19364e550           ; <+168>\n```\n我们打印变量x8和x9的值，看一下系统做了什么\n\n```\n(lldb) po $x8\n<nil>\n(lldb) po $x9\nPSUIAboutController\n```\n并没有数据之类的东西值得我们关注，让断点继续往下走，走到0x19364e4dc的位置，我们再次打印变量x8和x9的值\n\n```\n(lldb) n\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x000000019364e4dc Preferences`-[PSListController specifiers] + 52, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x000000019364e4dc Preferences`-[PSListController specifiers] + 52\nPreferences`-[PSListController specifiers]:\n->  0x19364e4dc <+52>: cbz    x9, 0x19364e550           ; <+168>\n    0x19364e4e0 <+56>: adrp   x9, 53971\n    0x19364e4e4 <+60>: ldrsw  x23, [x9, #540]\n    0x19364e4e8 <+64>: orr    w9, wzr, #0x1\n(lldb) po $x8\n952\n(lldb) po $x9\n<AboutDataSource: 0x131130730>\n```\n此时的变量x9已经变成了`AboutDataSource`，这里验证了我们上一步的猜想，所以我们重点来研究它，我们先找到这个类在哪个framework中，这里使用的是grep命令\n\n```\nLeonLei-MBP:~ gaoshilei$ grep AboutDataSource -r /Users/gaoshilei/Desktop/reverse/iOS-Runtime-Headers-9.1 \n/Users/gaoshilei/Desktop/reverse/iOS-Runtime-Headers-9.1/PrivateFrameworks/PreferencesUI.framework/AboutDataSource.h:@interface AboutDataSource : PSSpecifierDataSource {\n```\n这里要说明一下iOS-Runtime-Headers-9.1这个文件夹是iOS9.1系统的所有头文件（共有+私有），这个你可以自己导（iOS9之后只能用runtime导，class-dump已经不行了），你也可以拿现成的用，github上面已经有雷锋把所有系统的头文件都导出来了，直接下载就可以了。我们发现`AboutDataSource`这个类在`PrivateFrameworks/PreferencesUI.framework`中，先看一下这个类里面有什么方法和属性，有一个方法`- (void)_loadValues;` 我们对它进行分析。这里又要借助IDA分析，把PreferencesUI这个二进制文件丢到IDA里面，在0x19091EBB8这个位置打个断点\n\n```\n(lldb) br s -a 0x19091EBB8+0x2e50000\nBreakpoint 3: where = PreferencesUI`-[AboutDataSource _loadValues] + 1956, address = 0x000000019376ebb8\n```\n接下来我们进入关于来触发断点\n\n```\n(lldb) po (char *) $x28\n\"_setValue:forSpecifierWithKey:\"\n```\n在这里打印变量x28的值，发现它是一个方法名，从名称来看是给`specifier`赋值的，看来我们要寻找的真相已经很近了，让代码走到下面的位置0x19376ebd8\n\n```\nProcess 2107 stopped\n* thread #1: tid = 0xe8e23, 0x000000019376ebd8 PreferencesUI`-[AboutDataSource _loadValues] + 1988, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x000000019376ebd8 PreferencesUI`-[AboutDataSource _loadValues] + 1988\nPreferencesUI`-[AboutDataSource _loadValues]:\n->  0x19376ebd8 <+1988>: bl     0x198e58640               ; MGCopyAnswer\n    0x19376ebdc <+1992>: mov    x22, x0\n    0x19376ebe0 <+1996>: mov    x1, x19\n    0x19376ebe4 <+2000>: bl     0x199a89bc0               ; objc_msgSend\n(lldb) po $x0\nSerialNumber\n```\n此时我们打印的x0是一个`NSCFConstantString`，本质就是一个`NSString`，继续`ni`让程序运行到0x19376ebdc\n\n```\nProcess 2107 stopped\n* thread #1: tid = 0xe8e23, 0x000000019376ebdc PreferencesUI`-[AboutDataSource _loadValues] + 1992, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x000000019376ebdc PreferencesUI`-[AboutDataSource _loadValues] + 1992\nPreferencesUI`-[AboutDataSource _loadValues]:\n->  0x19376ebdc <+1992>: mov    x22, x0\n    0x19376ebe0 <+1996>: mov    x1, x19\n    0x19376ebe4 <+2000>: bl     0x199a89bc0               ; objc_msgSend\n    0x19376ebe8 <+2004>: cbnz   x0, 0x19376ec4c           ; <+2104>\n(lldb) po $x0\nDNPMVG0EFF9V\n```\n在这里我们打印了变量x0的值为**DNPMVG0EFF9V**，这就是我们苦苦寻找的序列号。不难看出，序列号就是在0x19376ebd8这行拿到的，范围越来越小，敌人无路可逃！下面我们就要对这行进行分析，我们按照之前的步骤，再次走到0x19376ebd8这个位置，这不过这次我们不要`step-over`，我们用`si`跳入看看\n\n```\n(lldb) si\nProcess 2107 stopped\n* thread #1: tid = 0xe8e23, 0x0000000198e58640 libMobileGestalt.dylib`MGCopyAnswer, queue = 'com.apple.main-thread', stop reason = instruction step into\n    frame #0: 0x0000000198e58640 libMobileGestalt.dylib`MGCopyAnswer\nlibMobileGestalt.dylib`MGCopyAnswer:\n->  0x198e58640 <+0>: movz   x1, #0\n    0x198e58644 <+4>: b      0x198e58648               ; ___lldb_unnamed_symbol64$$libMobileGestalt.dylib\n\nlibMobileGestalt.dylib`___lldb_unnamed_symbol64$$libMobileGestalt.dylib:\n    0x198e58648 <+0>: stp    x24, x23, [sp, #-64]!\n    0x198e5864c <+4>: stp    x22, x21, [sp, #16]\n此时跳入了一个静态库libMobileGestalt.dylib，我们可以在usr/lib/ibMobileGestalt.dylib找到它，我们将它扔进IDA，用当前的addr减去libMobileGestalt.dylib的基地址偏移得到它的静态地址0x196008640，对应的是一个函数MGCopyAnswer\n__text:0000000196008640\n__text:0000000196008640 ; =============== S U B R O U T I N E =======================================\n__text:0000000196008640\n__text:0000000196008640\n__text:0000000196008640                 EXPORT _MGCopyAnswer\n__text:0000000196008640 _MGCopyAnswer                           ; CODE XREF: sub_196005958+30\u0018p\n__text:0000000196008640                                         ; sub_196006258+28\u0018p ...\n__text:0000000196008640                 MOV             X1, #0\n__text:0000000196008644                 B               sub_196008648\n__text:0000000196008644 ; End of function _MGCopyAnswer\n```\n这个函数最外层只有两行代码，将立即数0赋给x1，然后跳进了子程序sub_196008648，跳进去之后进行了一些很复杂的运算，这里就不做介绍了，里面的实现大概是这样的：\nx0是作为一个参数传入的，并且这里x0的值为`SerialNumber`，在地址为0x196008678的地方，这个函数中x1变成了一串随机数，有点像MD5加密之后的东西，应该是“钥匙”\n\n```\n(lldb) po (char*) $x1\n\"l92SaBpqIvQs+KBljuwGA\"\n```\n在0x196008690这里，我们`setp-into`这个函数，在函数的末尾返回值的地方0x196007474打个断点，打印返回值x0\n\n```\n(lldb) po $x0\nDNPMVG0EFF9V\n```\n这里的x0由`SerialNumber`变成了真正的序列号，并且就是在0x196008690对应的子程序sub_19600738C里面拿到的，所以我们就这样一个猜测，在`MGCopyAnswer`函数中，x0作为一个参数传入，并且在内部进行了一系列复杂的运算，拿到了获取序列号的“钥匙”x1，然后在sub_19600738C中拿到了最终的序列号。这里笔者也没有对序列号的拿到在进行进一步的深究，这里苹果做了很大的限制，再继续研究恐怕也是收获不大，而且我们在这里已经能拿到序列号了。  \n###\t三、验证结果  \n接下来就是验证的过程了，我们写一个tweak来验证，当然也可以用其他方式来验证：\ntweak的创建这里就不赘述了，我把我的tweak和makefile文件内容贴一下：\n> tweak文件：\n\n```\ntweak.xm:\nextern \"C\" NSString *MGCopyAnswer(NSString*);\n%hook SpringBoard\n- (void)applicationDidFinishLaunching:(id)application {\n%orig;\nNSString *serialNumber = [NSString stringWithFormat:@\"%@\",[MGCopyAnswer(@\"SerialNumber\") autorelease]];\nUIAlertView *alert = [[UIAlertView alloc] initWithTitle:serialNumber message:nil delegate:self cancelButtonTitle:@\"OK\" otherButtonTitles:nil];\n[alert show];\n}\n%end\n```\n这里注入系统的SpringBoard，在SB启动的时候hook住applicationDidFinishLaunching：函数，并且在这个函数里面添加获取序列号的代码，并且以弹框的形式展现出来。  \n> makefile文件:\n\n```\nTHEOS_DEVICE_IP = 192.168.0.115\ninclude $(THEOS)/makefiles/common.mk\nTWEAK_NAME = SerialNumber\nSerialNumber_FILES = Tweak.xm\ninclude $(THEOS_MAKE_PATH)/tweak.mk\nSerialNumber_LDFLAGS = -lMobileGestalt\nafter-install::\n\tinstall.exec \"killall -9 SpringBoard\"\n```\n其中有一行`SerialNumber_LDFLAGS = -lMobileGestalt`千万要注意，使用的时候要加载这个静态库，因为SpringBoard加载的时候我也不确定是否有加载这个库，然后我们验证一下吧！\n![序列号验证-获取](http://upload-images.jianshu.io/upload_images/1787336-de4c49a4ffd6bd91.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)![序列号验证-系统](http://upload-images.jianshu.io/upload_images/1787336-78e60f103a70c27e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)  \n\n [此文参考了《iOS逆向工程（第二版）》](https://www.amazon.cn/iOS应用逆向工程-沙梓社/dp/B00VFDVY7E/ref=sr_1_1?ie=UTF8&qid=1477453672&sr=8-1&keywords=iOS逆向工程)\n","source":"_posts/iPhone查找序列号生成函数.md","raw":"---\ntitle: iPhone查找序列号生成函数\ndate: 2016-08-03 00:00:00\n---\n<Excerpt in index | 首页摘要> \n+<!-- more -->\n<The rest of contents | 余下全文>\n##  前言  \n在iOS7之前我们可以通过`- (NSString *)uniqueIdentifier`这个方法获取iPhone的唯一标识符，也叫作UDID。不过自从iOS7苹果就把这个方法给禁了，此时我们想要获取iPhone的唯一标识符就很困难。  \n不过苹果提供一个叫做IDFA的标识符，这个IDFA是广告标识符用来追踪广告投放的，不过用户可以在设置中手动重置IDFA，可靠性很低，目前常见的两种标记iPhone的方式为  \n*  openUDID  \n*  IDFA或UUID+keychain  \n\n这两种模式都有个弊端，用户重置手机或者刷机唯一标识符会发生变化，不过对于大多数情况是够用了。看来苹果是把路给封死了，有没有办法拿到之前的UDID呢？我们注意到iPhone的设置通用关于里面有手机的硬件信息，其中有一个serialNumber，这个serialnumber就是我们查询手机是否过保的依据，那么它肯定是唯一的，所以下文是围绕这个进行的探索。最终是可以拿到这个serialNumber的， 不过由于苹果的沙盒限制，所以只能在越狱机中拿到，如果想在非越狱机中拿到必须添加entitlements文件来获取权限，可想而知这个应用是无法上架的。**下文仅作为逆向工程的一种思路和探索，请勿用于非法用途。**  \n\n##  正文\n###\t一、SSH连接手机（USB模式）\n####\t1.映射端口\n```\nLeonLei-MBP:~ gaoshilei$ /Users/gaoshilei/Desktop/reverse/USBSSH/tcprelay.py -t 22:6666\nForwarding local port 6666 to remote port 22\n```\n####\t2.连接手机，并且用grep命令快速筛选当前我们要调试的应用Preferences，附加debugserver开始1234端口等待lldb调试\n```\nLeonLei-MBP:~ gaoshilei$ ssh root@localhost -p 6666\niPhone-5S:~ root# ps -e | grep Pre\n  270 ??         0:00.29 /System/Library/PrivateFrameworks/MobileSoftwareUpdate.framework/XPCServices/com.apple.MobileSoftwareUpdate.CleanupPreparePathService.xpc/com.apple.MobileSoftwareUpdate.CleanupPreparePathService\n 1192 ??         0:14.26 /var/db/stash/_.fP74Fg/Applications/Preferences.app/Preferences\n 1289 ttys000    0:00.01 grep Pre\niPhone-5S:~ root# debugserver *:1234 -a \"Preferences\"\ndebugserver-@(#)PROGRAM:debugserver  PROJECT:debugserver-340.3.51.1\n for arm64.\nAttaching to process Preferences...\nListening to port 1234 for a connection from *...\n```\n####\t3.完成以上两步接下来就可以进行lldb调试了，首先要把远端（手机）的1234端口映射到本地，跟前面提到的SSH端口映射一样\n```\nLeonLei-MBP:~ gaoshilei$ /Users/gaoshilei/Desktop/reverse/USBSSH/tcprelay.py -t 1234:1234\nForwarding local port 1234 to remote port 1234\n```\n###\t二、通过LLDB、IDA寻找线索\nlldb的调试端口已经打开，此时我们可以进入调试\n\n```\nLeonLei-MBP:~ gaoshilei$ lldb\n(lldb) process connect connect://localhost:1234\nProcess 1192 stopped  \n* thread #1: tid = 0x523a6, 0x000000019a3c8a40 libsystem_kernel.dylib`mach_msg_trap + 8, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP  \n    frame #0: 0x000000019a3c8a40 libsystem_kernel.dylib`mach_msg_trap + 8\nlibsystem_kernel.dylib`mach_msg_trap:\n->  0x19a3c8a40 <+8>: ret    \nlibsystem_kernel.dylib`mach_msg_overwrite_trap:\n    0x19a3c8a44 <+0>: movn   x16, #0x1f\n    0x19a3c8a48 <+4>: svc    #0x80\n    0x19a3c8a4c <+8>: ret    \n```\n此时我们已经成功进入Preferences的调试阶段，先c一下，让程序继续运行\n  \n```\n(lldb) c\nProcess 1192 resuming\n```\n这么做的原因是我们待会要打印image的基地址偏移，有可能在我们打印的image list中没有我们想要的image。\n此时我们已经找到到Preference.framework的基地址偏移，见下图\n\n```\n(lldb) im li -o -f\n[  0] 0x00000000000dc000 /var/db/stash/_.fP74Fg/Applications/Preferences.app/Preferences(0x00000001000dc000)\n[  1] 0x0000000100100000 /Library/MobileSubstrate/MobileSubstrate.dylib(0x0000000100100000)\n[  2] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/PrivateFrameworks/BulletinBoard.framework/BulletinBoard\n[  3] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation\n[  4] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/Frameworks/IOKit.framework/Versions/A/IOKit\n…\n[ 44] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/PrivateFrameworks/Preferences.framework/Preferences\n…  \n```\n我们要找的image的序号在这里是44，它的基地址偏移为0x2e50000，我们把从iPhone中导出的PrivateFrameworks中的Preferences.framework丢到IDA中进行分析，这个二进制文件比较小，很快就分析完成，在前面我们已经知道iPhone的唯一序列号serial number是通过PSListController生成的，并且我们知道这是一个cell，我们要去调试`[PSListController tableView:cellForRowAtIndexPath:]`这个方法，从中找到cell值的来源，从而找到获取序列号的方法。\n\n```\n__text:00000001908040C8 ; -[PSListController tableView:cellForRowAtIndexPath:]\n__text:00000001908040C8 __PSListController_tableView_cellForRowAtIndexPath__\n__text:00000001908040C8                                         ; DATA XREF: __objc_const:000000019C069B88\u0019o\n__text:00000001908040C8\n__text:00000001908040C8 var_80          = -0x80\n__text:00000001908040C8 var_78          = -0x78\n__text:00000001908040C8 var_70          = -0x70\n__text:00000001908040C8 var_68          = -0x68\n__text:00000001908040C8 var_60          = -0x60\n__text:00000001908040C8 var_50          = -0x50\n__text:00000001908040C8 var_40          = -0x40\n__text:00000001908040C8 var_30          = -0x30\n__text:00000001908040C8 var_20          = -0x20\n__text:00000001908040C8 var_10          = -0x10\n__text:00000001908040C8\n__text:00000001908040C8                 STP             X28, X27, [SP,#var_60]!\n__text:00000001908040CC                 STP             X26, X25, [SP,#0x60+var_50]\n__text:00000001908040D0                 STP             X24, X23, [SP,#0x60+var_40]\n__text:00000001908040D4                 STP             X22, X21, [SP,#0x60+var_30]\n__text:00000001908040D8                 STP             X20, X19, [SP,#0x60+var_20]\n__text:00000001908040DC                 STP             X29, X30, [SP,#0x60+var_10]\n__text:00000001908040E0                 ADD             X29, SP, #0x60+var_10\n__text:00000001908040E4                 SUB             SP, SP, #0x20\n__text:00000001908040E8                 MOV             X21, X3\n__text:00000001908040EC                 MOV             X20, X0\n__text:00000001908040F0                 MOV             X0, X2\n__text:00000001908040F4                 BL              0x96C400A0\n__text:00000001908040F8                 MOV             X26, X0\n__text:00000001908040FC                 ADRP            X8, #off_19DACC568@PAGE\n__text:0000000190804100                 LDR             X1, [X8,#off_19DACC568@PAGEOFF]\n__text:0000000190804104                 MOV             X0, X20\n__text:0000000190804108                 MOV             X2, X21\n__text:000000019080410C                 BL              0x96C39BC0\n__text:0000000190804110                 MOV             X2, X0\n__text:0000000190804114                 ADRP            X8, #_OBJC_IVAR_$_PSListController._specifiers@PAGE ; NSArray *_specifiers;\n__text:0000000190804118                 LDRSW           X27, [X8,#_OBJC_IVAR_$_PSListController._specifiers@PAGEOFF] ; NSArray *_specifiers;\n__text:000000019080411C                 LDR             X0, [X20,X27]\n__text:0000000190804120                 ADRP            X8, #off_19DACC558@PAGE\n……\n```\n我们在Preference.framework中基地址为0x190804114的位置打个断点，具体的做法是：\n\n```\n(lldb) br s -a 0x190804114+0x2e50000\nBreakpoint 1: where = Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76, address = 0x0000000193654114\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x0000000193654114 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x0000000193654114 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76\nPreferences`-[PSListController tableView:cellForRowAtIndexPath:]:\n->  0x193654114 <+76>: adrp   x8, 53965\n    0x193654118 <+80>: ldrsw  x27, [x8, #516]\n    0x19365411c <+84>: ldr    x0, [x20, x27]\n    0x193654120 <+88>: adrp   x8, 53960\n```\n这里断点这样打是因为系统加载可执行文件和各种framework的时候会有一个地址偏移，我们在打断点的时候要把这个偏移量加上，这样我们打的断点才是准确的。\n可以看到我们已经成功打了一个断点，断点的address = 0x193654114。此时我们打印变量x0和x27的值\n\n```\n(lldb) po $x0\n13\n(lldb) po $x27\n1104\n```\n我们执行ni让程序继续（这里的`ni`命令相当于Xcode的那个下箭头命令，也就是下一行）\n\n```\n(lldb) ni\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x0000000193654118 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 80, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x0000000193654118 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 80\nPreferences`-[PSListController tableView:cellForRowAtIndexPath:]:\n->  0x193654118 <+80>: ldrsw  x27, [x8, #516]\n    0x19365411c <+84>: ldr    x0, [x20, x27]\n    0x193654120 <+88>: adrp   x8, 53960\n    0x193654124 <+92>: ldr    x22, [x8, #1368]\n(lldb) ni\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x000000019365411c Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 84, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x000000019365411c Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 84\nPreferences`-[PSListController tableView:cellForRowAtIndexPath:]:\n->  0x19365411c <+84>: ldr    x0, [x20, x27]\n    0x193654120 <+88>: adrp   x8, 53960\n    0x193654124 <+92>: ldr    x22, [x8, #1368]\n    0x193654128 <+96>: mov    x1, x22\n(lldb) po $x27\n848\n\n(lldb) po $x0\n13\n```\n我们ni的两次，程序已经走到0x19080411C的位置，然后我们继续打印变量x0和x27的值\n\n```\n(lldb) po $x0\n13\n(lldb) po $x27\n1104\n```\n打印出来的x0和x27都是随机数，还是没有什么收获，我们继续\n\n```\n(lldb) ni\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x0000000193654120 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 88, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x0000000193654120 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 88\nPreferences`-[PSListController tableView:cellForRowAtIndexPath:]:\n->  0x193654120 <+88>:  adrp   x8, 53960\n    0x193654124 <+92>:  ldr    x22, [x8, #1368]\n    0x193654128 <+96>:  mov    x1, x22\n    0x19365412c <+100>: bl     0x199a89bc0               ; objc_msgSend\n(lldb) po $x0\n<__NSArrayI 0x13105a780>(\nG: <PSSpecifier 0x12ff50cf0: ID 0, Name '' target <(null): 0x0>> 0x12ff50cf0,\n<PSSpecifier 0x12ff50f50: ID NAME_CELL_ID, Name 'Name' target <AboutDataSource: 0x131028390>>,\nG: <PSSpecifier 0x12ff51680: ID 2, Name '' target <(null): 0x0>> 0x12ff51680,\n<PSSpecifier 0x12ff52360: ID NETWORK, Name 'Network' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff52420: ID SONGS, Name 'Songs' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff519f0: ID VIDEOS, Name 'Videos' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff51ab0: ID PHOTOS, Name 'Photos' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff51b70: ID APPLICATIONS, Name 'Applications' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff524e0: ID User Data Capacity, Name 'Capacity' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff525a0: ID User Data Available, Name 'Available' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff526a0: ID ProductVersion, Name 'Version' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff52850: ID CARRIER_VERSION, Name 'Carrier' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff52980: ID ProductModel, Name 'Model' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff52a60: ID SerialNumber, Name 'Serial Number' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff52b90: ID MACAddress, Name 'Wi-Fi Address' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12ff51050: ID BTMACAddress, Name 'Bluetooth' target <AboutDataSource: 0x131028390>>,\n<PSSpecifier 0x12fde95d0: ID ModemVersion, Name 'Modem Firmware' target <AboutDataSource: 0x131028390>>,\nG: <PSSpecifier 0x131031e90: ID 17, Name '' target <(null): 0x0>> 0x131031e90,\n<PSSpecifier 0x12fde9c40: ID LEGAL_AND_REGULATORY, Name 'Legal' target <(null): 0x0>>,\nG: <PSSpecifier 0x131029dc0: ID TRUST_STORE_GROUP, Name '' target <(null): 0x0>> 0x131029dc0,\n<PSSpecifier 0x131033520: ID TRUST_STORE, Name 'Trust Store' target <AboutDataSource: 0x131028390>>\n)\n```\n我们让程序执行下一步，发现此时x0已经有值了，可以明显的看出，x0的值是在0x190804114~0x19080411C这段代码生成的，下面我们的工作重点就是寻找这段代码干了什么，胜利就在眼前！下面我们验证一下这里面到底有没有我们要的序列号：\n\n```\n(lldb) po [[$x0 objectAtIndex:13] class]\nPSSpecifier\n(lldb) po [[$x0 objectAtIndex:13] properties]\n{\n    cellObject = \"<PSTableCell: 0x130800000; baseClass = UITableViewCell; frame = (0 565; 320 45); text = 'Serial Number'; hidden = YES; autoresize = W; tag = 4; gestureRecognizers = <NSArray: 0x12ff821c0>; layer = <CALayer: 0x12fd7d340>>\";\n    id = SerialNumber;\n    isCopyable = 1;\n    value = DNPMVG0EFF9V;\n}\n```\n我们打印数组中存放cell数据的object属于哪个类，发现是`PSSpecifier`，我们找到之前导出的类的头文件，发现这个类有一个叫做`properties`的实例方法，我们调用一下发现我们要的序列号就在里面`value = DNPMVG0EFF9V`，这跟iPhone设置中看到的序列号是一致的。猜测这个数组里面存放着系统设置中`PSUIAboutController`中所有cel的数据，这个数组下一个肯定要传递到cell生成的方法中，这个就不做验证了，大事重要，我们继续找序列号的生成方法。\n这个`PSSpecifier`中有一个`AboutDataSource`对象，这个非常可疑，从名称上可以判断，这个类是专门用于数据处理的，不过在这之前我们还是先验证一下，在0x190804114~0x19080411C这段地址中，执行了`_PSListController._specifiers`，我们从`PSListController`的头文件（下文有讲怎么获取）中可以看到有一个specifiers属性，我们在IDA分析的文件中找到`[PSListController specifiers]`，我们先定位到方法在二进制文件中的位置：\n\n```\n__text:00000001907FE4A8 ; -[PSListController specifiers]\n__text:00000001907FE4A8 __PSListController_specifiers_          ; DATA XREF: __objc_const:000000019C069A08\u0019o\n__text:00000001907FE4A8\n__text:00000001907FE4A8 var_40          = -0x40\n__text:00000001907FE4A8 var_30          = -0x30\n__text:00000001907FE4A8 var_20          = -0x20\n__text:00000001907FE4A8 var_10          = -0x10\n__text:00000001907FE4A8\n__text:00000001907FE4A8                 STP             X24, X23, [SP,#var_40]!\n__text:00000001907FE4AC                 STP             X22, X21, [SP,#0x40+var_30]\n__text:00000001907FE4B0                 STP             X20, X19, [SP,#0x40+var_20]\n__text:00000001907FE4B4                 STP             X29, X30, [SP,#0x40+var_10]\n__text:00000001907FE4B8                 ADD             X29, SP, #0x40+var_10\n__text:00000001907FE4BC                 MOV             X19, X0\n__text:00000001907FE4C0                 ADRP            X8, #_OBJC_IVAR_$_PSListController._specifiers@PAGE ; NSArray *_specifiers;\n__text:00000001907FE4C4                 LDRSW           X22, [X8,#_OBJC_IVAR_$_PSListController._specifiers@PAGEOFF] ; NSArray *_specifiers;\n__text:00000001907FE4C8                 LDR             X8, [X19,X22]\n__text:00000001907FE4CC                 CBNZ            X8, loc_1907FE5E0\n__text:00000001907FE4D0                 ADRP            X8, #_OBJC_IVAR_$_PSListController._dataSource@PAGE ; id <PSSpecifierDataSource> _dataSource;\n__text:00000001907FE4D4                 LDRSW           X8, [X8,#_OBJC_IVAR_$_PSListController._dataSource@PAGEOFF] ; id <PSSpecifierDataSource> _dataSource;\n__text:00000001907FE4D8                 LDR             X9, [X19,X8]\n__text:00000001907FE4DC                 CBZ             X9, loc_1907FE550\n__text:00000001907FE4E0                 ADRP            X9, #_OBJC_IVAR_$_PSListController._requestingSpecifiersFromDataSource@PAGE ; bool _requestingSpecifiersFromDataSource;\n__text:00000001907FE4E4                 LDRSW           X23, [X9,#_OBJC_IVAR_$_PSListController._requestingSpecifiersFromDataSource@PAGEOFF] ; bool _requestingSpecifiersFromDataSource;\n__text:00000001907FE4E8                 MOV             W9, #1\n__text:00000001907FE4EC                 STRB            W9, [X19,X23]\n__text:00000001907FE4F0                 LDR             X20, [X19,X8]\n__text:00000001907FE4F4                 ADRP            X8, #selRef_specifier@PAGE\n__text:00000001907FE4F8                 LDR             X1, [X8,#selRef_specifier@PAGEOFF]\n__text:00000001907FE4FC                 MOV             X0, X19\n__text:00000001907FE500                 BL              0x96C39BC0\n__text:00000001907FE504                 MOV             X29, X29\n__text:00000001907FE508                 BL              0x96C41EF0\n__text:00000001907FE50C                 MOV             X21, X0\n__text:00000001907FE510                 ADRP            X8, #selRef_specifiersForSpecifier_observer_@PAGE\n__text:00000001907FE514                 LDR             X1, \n……\n```\n然后在这里面下个断点看看会发生什么\n\n```\n(lldb) br s -a 0x1907FE4D0+0x198e58640\nBreakpoint 9: where = Preferences`-[PSListController specifiers] + 40, address = 0x000000019364e4d0\n```\n我们从设置中进入通用>关于，发现一开始就走到了这个断点，我们猜测，一进入关于页面，系统会首先把所有cell的数据都准备好，然后加载UI\n\n```\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x000000019364e4d0 Preferences`-[PSListController specifiers] + 40, queue = 'com.apple.main-thread', stop reason = breakpoint 9.1\n    frame #0: 0x000000019364e4d0 Preferences`-[PSListController specifiers] + 40\nPreferences`-[PSListController specifiers]:\n->  0x19364e4d0 <+40>: adrp   x8, 53971\n    0x19364e4d4 <+44>: ldrsw  x8, [x8, #536]\n    0x19364e4d8 <+48>: ldr    x9, [x19, x8]\n    0x19364e4dc <+52>: cbz    x9, 0x19364e550           ; <+168>\n```\n我们打印变量x8和x9的值，看一下系统做了什么\n\n```\n(lldb) po $x8\n<nil>\n(lldb) po $x9\nPSUIAboutController\n```\n并没有数据之类的东西值得我们关注，让断点继续往下走，走到0x19364e4dc的位置，我们再次打印变量x8和x9的值\n\n```\n(lldb) n\nProcess 1192 stopped\n* thread #1: tid = 0x523a6, 0x000000019364e4dc Preferences`-[PSListController specifiers] + 52, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x000000019364e4dc Preferences`-[PSListController specifiers] + 52\nPreferences`-[PSListController specifiers]:\n->  0x19364e4dc <+52>: cbz    x9, 0x19364e550           ; <+168>\n    0x19364e4e0 <+56>: adrp   x9, 53971\n    0x19364e4e4 <+60>: ldrsw  x23, [x9, #540]\n    0x19364e4e8 <+64>: orr    w9, wzr, #0x1\n(lldb) po $x8\n952\n(lldb) po $x9\n<AboutDataSource: 0x131130730>\n```\n此时的变量x9已经变成了`AboutDataSource`，这里验证了我们上一步的猜想，所以我们重点来研究它，我们先找到这个类在哪个framework中，这里使用的是grep命令\n\n```\nLeonLei-MBP:~ gaoshilei$ grep AboutDataSource -r /Users/gaoshilei/Desktop/reverse/iOS-Runtime-Headers-9.1 \n/Users/gaoshilei/Desktop/reverse/iOS-Runtime-Headers-9.1/PrivateFrameworks/PreferencesUI.framework/AboutDataSource.h:@interface AboutDataSource : PSSpecifierDataSource {\n```\n这里要说明一下iOS-Runtime-Headers-9.1这个文件夹是iOS9.1系统的所有头文件（共有+私有），这个你可以自己导（iOS9之后只能用runtime导，class-dump已经不行了），你也可以拿现成的用，github上面已经有雷锋把所有系统的头文件都导出来了，直接下载就可以了。我们发现`AboutDataSource`这个类在`PrivateFrameworks/PreferencesUI.framework`中，先看一下这个类里面有什么方法和属性，有一个方法`- (void)_loadValues;` 我们对它进行分析。这里又要借助IDA分析，把PreferencesUI这个二进制文件丢到IDA里面，在0x19091EBB8这个位置打个断点\n\n```\n(lldb) br s -a 0x19091EBB8+0x2e50000\nBreakpoint 3: where = PreferencesUI`-[AboutDataSource _loadValues] + 1956, address = 0x000000019376ebb8\n```\n接下来我们进入关于来触发断点\n\n```\n(lldb) po (char *) $x28\n\"_setValue:forSpecifierWithKey:\"\n```\n在这里打印变量x28的值，发现它是一个方法名，从名称来看是给`specifier`赋值的，看来我们要寻找的真相已经很近了，让代码走到下面的位置0x19376ebd8\n\n```\nProcess 2107 stopped\n* thread #1: tid = 0xe8e23, 0x000000019376ebd8 PreferencesUI`-[AboutDataSource _loadValues] + 1988, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x000000019376ebd8 PreferencesUI`-[AboutDataSource _loadValues] + 1988\nPreferencesUI`-[AboutDataSource _loadValues]:\n->  0x19376ebd8 <+1988>: bl     0x198e58640               ; MGCopyAnswer\n    0x19376ebdc <+1992>: mov    x22, x0\n    0x19376ebe0 <+1996>: mov    x1, x19\n    0x19376ebe4 <+2000>: bl     0x199a89bc0               ; objc_msgSend\n(lldb) po $x0\nSerialNumber\n```\n此时我们打印的x0是一个`NSCFConstantString`，本质就是一个`NSString`，继续`ni`让程序运行到0x19376ebdc\n\n```\nProcess 2107 stopped\n* thread #1: tid = 0xe8e23, 0x000000019376ebdc PreferencesUI`-[AboutDataSource _loadValues] + 1992, queue = 'com.apple.main-thread', stop reason = instruction step over\n    frame #0: 0x000000019376ebdc PreferencesUI`-[AboutDataSource _loadValues] + 1992\nPreferencesUI`-[AboutDataSource _loadValues]:\n->  0x19376ebdc <+1992>: mov    x22, x0\n    0x19376ebe0 <+1996>: mov    x1, x19\n    0x19376ebe4 <+2000>: bl     0x199a89bc0               ; objc_msgSend\n    0x19376ebe8 <+2004>: cbnz   x0, 0x19376ec4c           ; <+2104>\n(lldb) po $x0\nDNPMVG0EFF9V\n```\n在这里我们打印了变量x0的值为**DNPMVG0EFF9V**，这就是我们苦苦寻找的序列号。不难看出，序列号就是在0x19376ebd8这行拿到的，范围越来越小，敌人无路可逃！下面我们就要对这行进行分析，我们按照之前的步骤，再次走到0x19376ebd8这个位置，这不过这次我们不要`step-over`，我们用`si`跳入看看\n\n```\n(lldb) si\nProcess 2107 stopped\n* thread #1: tid = 0xe8e23, 0x0000000198e58640 libMobileGestalt.dylib`MGCopyAnswer, queue = 'com.apple.main-thread', stop reason = instruction step into\n    frame #0: 0x0000000198e58640 libMobileGestalt.dylib`MGCopyAnswer\nlibMobileGestalt.dylib`MGCopyAnswer:\n->  0x198e58640 <+0>: movz   x1, #0\n    0x198e58644 <+4>: b      0x198e58648               ; ___lldb_unnamed_symbol64$$libMobileGestalt.dylib\n\nlibMobileGestalt.dylib`___lldb_unnamed_symbol64$$libMobileGestalt.dylib:\n    0x198e58648 <+0>: stp    x24, x23, [sp, #-64]!\n    0x198e5864c <+4>: stp    x22, x21, [sp, #16]\n此时跳入了一个静态库libMobileGestalt.dylib，我们可以在usr/lib/ibMobileGestalt.dylib找到它，我们将它扔进IDA，用当前的addr减去libMobileGestalt.dylib的基地址偏移得到它的静态地址0x196008640，对应的是一个函数MGCopyAnswer\n__text:0000000196008640\n__text:0000000196008640 ; =============== S U B R O U T I N E =======================================\n__text:0000000196008640\n__text:0000000196008640\n__text:0000000196008640                 EXPORT _MGCopyAnswer\n__text:0000000196008640 _MGCopyAnswer                           ; CODE XREF: sub_196005958+30\u0018p\n__text:0000000196008640                                         ; sub_196006258+28\u0018p ...\n__text:0000000196008640                 MOV             X1, #0\n__text:0000000196008644                 B               sub_196008648\n__text:0000000196008644 ; End of function _MGCopyAnswer\n```\n这个函数最外层只有两行代码，将立即数0赋给x1，然后跳进了子程序sub_196008648，跳进去之后进行了一些很复杂的运算，这里就不做介绍了，里面的实现大概是这样的：\nx0是作为一个参数传入的，并且这里x0的值为`SerialNumber`，在地址为0x196008678的地方，这个函数中x1变成了一串随机数，有点像MD5加密之后的东西，应该是“钥匙”\n\n```\n(lldb) po (char*) $x1\n\"l92SaBpqIvQs+KBljuwGA\"\n```\n在0x196008690这里，我们`setp-into`这个函数，在函数的末尾返回值的地方0x196007474打个断点，打印返回值x0\n\n```\n(lldb) po $x0\nDNPMVG0EFF9V\n```\n这里的x0由`SerialNumber`变成了真正的序列号，并且就是在0x196008690对应的子程序sub_19600738C里面拿到的，所以我们就这样一个猜测，在`MGCopyAnswer`函数中，x0作为一个参数传入，并且在内部进行了一系列复杂的运算，拿到了获取序列号的“钥匙”x1，然后在sub_19600738C中拿到了最终的序列号。这里笔者也没有对序列号的拿到在进行进一步的深究，这里苹果做了很大的限制，再继续研究恐怕也是收获不大，而且我们在这里已经能拿到序列号了。  \n###\t三、验证结果  \n接下来就是验证的过程了，我们写一个tweak来验证，当然也可以用其他方式来验证：\ntweak的创建这里就不赘述了，我把我的tweak和makefile文件内容贴一下：\n> tweak文件：\n\n```\ntweak.xm:\nextern \"C\" NSString *MGCopyAnswer(NSString*);\n%hook SpringBoard\n- (void)applicationDidFinishLaunching:(id)application {\n%orig;\nNSString *serialNumber = [NSString stringWithFormat:@\"%@\",[MGCopyAnswer(@\"SerialNumber\") autorelease]];\nUIAlertView *alert = [[UIAlertView alloc] initWithTitle:serialNumber message:nil delegate:self cancelButtonTitle:@\"OK\" otherButtonTitles:nil];\n[alert show];\n}\n%end\n```\n这里注入系统的SpringBoard，在SB启动的时候hook住applicationDidFinishLaunching：函数，并且在这个函数里面添加获取序列号的代码，并且以弹框的形式展现出来。  \n> makefile文件:\n\n```\nTHEOS_DEVICE_IP = 192.168.0.115\ninclude $(THEOS)/makefiles/common.mk\nTWEAK_NAME = SerialNumber\nSerialNumber_FILES = Tweak.xm\ninclude $(THEOS_MAKE_PATH)/tweak.mk\nSerialNumber_LDFLAGS = -lMobileGestalt\nafter-install::\n\tinstall.exec \"killall -9 SpringBoard\"\n```\n其中有一行`SerialNumber_LDFLAGS = -lMobileGestalt`千万要注意，使用的时候要加载这个静态库，因为SpringBoard加载的时候我也不确定是否有加载这个库，然后我们验证一下吧！\n![序列号验证-获取](http://upload-images.jianshu.io/upload_images/1787336-de4c49a4ffd6bd91.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)![序列号验证-系统](http://upload-images.jianshu.io/upload_images/1787336-78e60f103a70c27e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)  \n\n [此文参考了《iOS逆向工程（第二版）》](https://www.amazon.cn/iOS应用逆向工程-沙梓社/dp/B00VFDVY7E/ref=sr_1_1?ie=UTF8&qid=1477453672&sr=8-1&keywords=iOS逆向工程)\n","slug":"iPhone查找序列号生成函数","published":1,"updated":"2016-10-31T08:40:23.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuxvnxqc0004lw6qp6a2rv54","content":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br>+<a id=\"more\"></a></excerpt></p>\n<p><the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\"></the></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在iOS7之前我们可以通过<code>- (NSString *)uniqueIdentifier</code>这个方法获取iPhone的唯一标识符，也叫作UDID。不过自从iOS7苹果就把这个方法给禁了，此时我们想要获取iPhone的唯一标识符就很困难。<br>不过苹果提供一个叫做IDFA的标识符，这个IDFA是广告标识符用来追踪广告投放的，不过用户可以在设置中手动重置IDFA，可靠性很低，目前常见的两种标记iPhone的方式为  </p>\n<ul>\n<li>openUDID  </li>\n<li>IDFA或UUID+keychain  </li>\n</ul>\n<p>这两种模式都有个弊端，用户重置手机或者刷机唯一标识符会发生变化，不过对于大多数情况是够用了。看来苹果是把路给封死了，有没有办法拿到之前的UDID呢？我们注意到iPhone的设置通用关于里面有手机的硬件信息，其中有一个serialNumber，这个serialnumber就是我们查询手机是否过保的依据，那么它肯定是唯一的，所以下文是围绕这个进行的探索。最终是可以拿到这个serialNumber的， 不过由于苹果的沙盒限制，所以只能在越狱机中拿到，如果想在非越狱机中拿到必须添加entitlements文件来获取权限，可想而知这个应用是无法上架的。<strong>下文仅作为逆向工程的一种思路和探索，请勿用于非法用途。</strong>  </p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"一、SSH连接手机（USB模式）\"><a href=\"#一、SSH连接手机（USB模式）\" class=\"headerlink\" title=\"一、SSH连接手机（USB模式）\"></a>一、SSH连接手机（USB模式）</h3><h4 id=\"1-映射端口\"><a href=\"#1-映射端口\" class=\"headerlink\" title=\"1.映射端口\"></a>1.映射端口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ /Users/gaoshilei/Desktop/reverse/USBSSH/tcprelay.py -t 22:6666</div><div class=\"line\">Forwarding local port 6666 to remote port 22</div></pre></td></tr></table></figure>\n<h4 id=\"2-连接手机，并且用grep命令快速筛选当前我们要调试的应用Preferences，附加debugserver开始1234端口等待lldb调试\"><a href=\"#2-连接手机，并且用grep命令快速筛选当前我们要调试的应用Preferences，附加debugserver开始1234端口等待lldb调试\" class=\"headerlink\" title=\"2.连接手机，并且用grep命令快速筛选当前我们要调试的应用Preferences，附加debugserver开始1234端口等待lldb调试\"></a>2.连接手机，并且用grep命令快速筛选当前我们要调试的应用Preferences，附加debugserver开始1234端口等待lldb调试</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ ssh root@localhost -p 6666</div><div class=\"line\">iPhone-5S:~ root# ps -e | grep Pre</div><div class=\"line\">  270 ??         0:00.29 /System/Library/PrivateFrameworks/MobileSoftwareUpdate.framework/XPCServices/com.apple.MobileSoftwareUpdate.CleanupPreparePathService.xpc/com.apple.MobileSoftwareUpdate.CleanupPreparePathService</div><div class=\"line\"> 1192 ??         0:14.26 /var/db/stash/_.fP74Fg/Applications/Preferences.app/Preferences</div><div class=\"line\"> 1289 ttys000    0:00.01 grep Pre</div><div class=\"line\">iPhone-5S:~ root# debugserver *:1234 -a &quot;Preferences&quot;</div><div class=\"line\">debugserver-@(#)PROGRAM:debugserver  PROJECT:debugserver-340.3.51.1</div><div class=\"line\"> for arm64.</div><div class=\"line\">Attaching to process Preferences...</div><div class=\"line\">Listening to port 1234 for a connection from *...</div></pre></td></tr></table></figure>\n<h4 id=\"3-完成以上两步接下来就可以进行lldb调试了，首先要把远端（手机）的1234端口映射到本地，跟前面提到的SSH端口映射一样\"><a href=\"#3-完成以上两步接下来就可以进行lldb调试了，首先要把远端（手机）的1234端口映射到本地，跟前面提到的SSH端口映射一样\" class=\"headerlink\" title=\"3.完成以上两步接下来就可以进行lldb调试了，首先要把远端（手机）的1234端口映射到本地，跟前面提到的SSH端口映射一样\"></a>3.完成以上两步接下来就可以进行lldb调试了，首先要把远端（手机）的1234端口映射到本地，跟前面提到的SSH端口映射一样</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ /Users/gaoshilei/Desktop/reverse/USBSSH/tcprelay.py -t 1234:1234</div><div class=\"line\">Forwarding local port 1234 to remote port 1234</div></pre></td></tr></table></figure>\n<h3 id=\"二、通过LLDB、IDA寻找线索\"><a href=\"#二、通过LLDB、IDA寻找线索\" class=\"headerlink\" title=\"二、通过LLDB、IDA寻找线索\"></a>二、通过LLDB、IDA寻找线索</h3><p>lldb的调试端口已经打开，此时我们可以进入调试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ lldb</div><div class=\"line\">(lldb) process connect connect://localhost:1234</div><div class=\"line\">Process 1192 stopped  </div><div class=\"line\">* thread #1: tid = 0x523a6, 0x000000019a3c8a40 libsystem_kernel.dylib`mach_msg_trap + 8, queue = &apos;com.apple.main-thread&apos;, stop reason = signal SIGSTOP  </div><div class=\"line\">    frame #0: 0x000000019a3c8a40 libsystem_kernel.dylib`mach_msg_trap + 8</div><div class=\"line\">libsystem_kernel.dylib`mach_msg_trap:</div><div class=\"line\">-&gt;  0x19a3c8a40 &lt;+8&gt;: ret    </div><div class=\"line\">libsystem_kernel.dylib`mach_msg_overwrite_trap:</div><div class=\"line\">    0x19a3c8a44 &lt;+0&gt;: movn   x16, #0x1f</div><div class=\"line\">    0x19a3c8a48 &lt;+4&gt;: svc    #0x80</div><div class=\"line\">    0x19a3c8a4c &lt;+8&gt;: ret</div></pre></td></tr></table></figure>\n<p>此时我们已经成功进入Preferences的调试阶段，先c一下，让程序继续运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) c</div><div class=\"line\">Process 1192 resuming</div></pre></td></tr></table></figure>\n<p>这么做的原因是我们待会要打印image的基地址偏移，有可能在我们打印的image list中没有我们想要的image。<br>此时我们已经找到到Preference.framework的基地址偏移，见下图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) im li -o -f</div><div class=\"line\">[  0] 0x00000000000dc000 /var/db/stash/_.fP74Fg/Applications/Preferences.app/Preferences(0x00000001000dc000)</div><div class=\"line\">[  1] 0x0000000100100000 /Library/MobileSubstrate/MobileSubstrate.dylib(0x0000000100100000)</div><div class=\"line\">[  2] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/PrivateFrameworks/BulletinBoard.framework/BulletinBoard</div><div class=\"line\">[  3] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation</div><div class=\"line\">[  4] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/Frameworks/IOKit.framework/Versions/A/IOKit</div><div class=\"line\">…</div><div class=\"line\">[ 44] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/PrivateFrameworks/Preferences.framework/Preferences</div><div class=\"line\">…</div></pre></td></tr></table></figure>\n<p>我们要找的image的序号在这里是44，它的基地址偏移为0x2e50000，我们把从iPhone中导出的PrivateFrameworks中的Preferences.framework丢到IDA中进行分析，这个二进制文件比较小，很快就分析完成，在前面我们已经知道iPhone的唯一序列号serial number是通过PSListController生成的，并且我们知道这是一个cell，我们要去调试<code>[PSListController tableView:cellForRowAtIndexPath:]</code>这个方法，从中找到cell值的来源，从而找到获取序列号的方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">__text:00000001908040C8 ; -[PSListController tableView:cellForRowAtIndexPath:]</div><div class=\"line\">__text:00000001908040C8 __PSListController_tableView_cellForRowAtIndexPath__</div><div class=\"line\">__text:00000001908040C8                                         ; DATA XREF: __objc_const:000000019C069B88\u0019o</div><div class=\"line\">__text:00000001908040C8</div><div class=\"line\">__text:00000001908040C8 var_80          = -0x80</div><div class=\"line\">__text:00000001908040C8 var_78          = -0x78</div><div class=\"line\">__text:00000001908040C8 var_70          = -0x70</div><div class=\"line\">__text:00000001908040C8 var_68          = -0x68</div><div class=\"line\">__text:00000001908040C8 var_60          = -0x60</div><div class=\"line\">__text:00000001908040C8 var_50          = -0x50</div><div class=\"line\">__text:00000001908040C8 var_40          = -0x40</div><div class=\"line\">__text:00000001908040C8 var_30          = -0x30</div><div class=\"line\">__text:00000001908040C8 var_20          = -0x20</div><div class=\"line\">__text:00000001908040C8 var_10          = -0x10</div><div class=\"line\">__text:00000001908040C8</div><div class=\"line\">__text:00000001908040C8                 STP             X28, X27, [SP,#var_60]!</div><div class=\"line\">__text:00000001908040CC                 STP             X26, X25, [SP,#0x60+var_50]</div><div class=\"line\">__text:00000001908040D0                 STP             X24, X23, [SP,#0x60+var_40]</div><div class=\"line\">__text:00000001908040D4                 STP             X22, X21, [SP,#0x60+var_30]</div><div class=\"line\">__text:00000001908040D8                 STP             X20, X19, [SP,#0x60+var_20]</div><div class=\"line\">__text:00000001908040DC                 STP             X29, X30, [SP,#0x60+var_10]</div><div class=\"line\">__text:00000001908040E0                 ADD             X29, SP, #0x60+var_10</div><div class=\"line\">__text:00000001908040E4                 SUB             SP, SP, #0x20</div><div class=\"line\">__text:00000001908040E8                 MOV             X21, X3</div><div class=\"line\">__text:00000001908040EC                 MOV             X20, X0</div><div class=\"line\">__text:00000001908040F0                 MOV             X0, X2</div><div class=\"line\">__text:00000001908040F4                 BL              0x96C400A0</div><div class=\"line\">__text:00000001908040F8                 MOV             X26, X0</div><div class=\"line\">__text:00000001908040FC                 ADRP            X8, #off_19DACC568@PAGE</div><div class=\"line\">__text:0000000190804100                 LDR             X1, [X8,#off_19DACC568@PAGEOFF]</div><div class=\"line\">__text:0000000190804104                 MOV             X0, X20</div><div class=\"line\">__text:0000000190804108                 MOV             X2, X21</div><div class=\"line\">__text:000000019080410C                 BL              0x96C39BC0</div><div class=\"line\">__text:0000000190804110                 MOV             X2, X0</div><div class=\"line\">__text:0000000190804114                 ADRP            X8, #_OBJC_IVAR_$_PSListController._specifiers@PAGE ; NSArray *_specifiers;</div><div class=\"line\">__text:0000000190804118                 LDRSW           X27, [X8,#_OBJC_IVAR_$_PSListController._specifiers@PAGEOFF] ; NSArray *_specifiers;</div><div class=\"line\">__text:000000019080411C                 LDR             X0, [X20,X27]</div><div class=\"line\">__text:0000000190804120                 ADRP            X8, #off_19DACC558@PAGE</div><div class=\"line\">……</div></pre></td></tr></table></figure>\n<p>我们在Preference.framework中基地址为0x190804114的位置打个断点，具体的做法是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) br s -a 0x190804114+0x2e50000</div><div class=\"line\">Breakpoint 1: where = Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76, address = 0x0000000193654114</div><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x0000000193654114 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 1.1</div><div class=\"line\">    frame #0: 0x0000000193654114 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76</div><div class=\"line\">Preferences`-[PSListController tableView:cellForRowAtIndexPath:]:</div><div class=\"line\">-&gt;  0x193654114 &lt;+76&gt;: adrp   x8, 53965</div><div class=\"line\">    0x193654118 &lt;+80&gt;: ldrsw  x27, [x8, #516]</div><div class=\"line\">    0x19365411c &lt;+84&gt;: ldr    x0, [x20, x27]</div><div class=\"line\">    0x193654120 &lt;+88&gt;: adrp   x8, 53960</div></pre></td></tr></table></figure>\n<p>这里断点这样打是因为系统加载可执行文件和各种framework的时候会有一个地址偏移，我们在打断点的时候要把这个偏移量加上，这样我们打的断点才是准确的。<br>可以看到我们已经成功打了一个断点，断点的address = 0x193654114。此时我们打印变量x0和x27的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x0</div><div class=\"line\">13</div><div class=\"line\">(lldb) po $x27</div><div class=\"line\">1104</div></pre></td></tr></table></figure>\n<p>我们执行ni让程序继续（这里的<code>ni</code>命令相当于Xcode的那个下箭头命令，也就是下一行）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) ni</div><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x0000000193654118 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 80, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x0000000193654118 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 80</div><div class=\"line\">Preferences`-[PSListController tableView:cellForRowAtIndexPath:]:</div><div class=\"line\">-&gt;  0x193654118 &lt;+80&gt;: ldrsw  x27, [x8, #516]</div><div class=\"line\">    0x19365411c &lt;+84&gt;: ldr    x0, [x20, x27]</div><div class=\"line\">    0x193654120 &lt;+88&gt;: adrp   x8, 53960</div><div class=\"line\">    0x193654124 &lt;+92&gt;: ldr    x22, [x8, #1368]</div><div class=\"line\">(lldb) ni</div><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x000000019365411c Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 84, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x000000019365411c Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 84</div><div class=\"line\">Preferences`-[PSListController tableView:cellForRowAtIndexPath:]:</div><div class=\"line\">-&gt;  0x19365411c &lt;+84&gt;: ldr    x0, [x20, x27]</div><div class=\"line\">    0x193654120 &lt;+88&gt;: adrp   x8, 53960</div><div class=\"line\">    0x193654124 &lt;+92&gt;: ldr    x22, [x8, #1368]</div><div class=\"line\">    0x193654128 &lt;+96&gt;: mov    x1, x22</div><div class=\"line\">(lldb) po $x27</div><div class=\"line\">848</div><div class=\"line\"></div><div class=\"line\">(lldb) po $x0</div><div class=\"line\">13</div></pre></td></tr></table></figure>\n<p>我们ni的两次，程序已经走到0x19080411C的位置，然后我们继续打印变量x0和x27的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x0</div><div class=\"line\">13</div><div class=\"line\">(lldb) po $x27</div><div class=\"line\">1104</div></pre></td></tr></table></figure>\n<p>打印出来的x0和x27都是随机数，还是没有什么收获，我们继续</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) ni</div><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x0000000193654120 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 88, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x0000000193654120 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 88</div><div class=\"line\">Preferences`-[PSListController tableView:cellForRowAtIndexPath:]:</div><div class=\"line\">-&gt;  0x193654120 &lt;+88&gt;:  adrp   x8, 53960</div><div class=\"line\">    0x193654124 &lt;+92&gt;:  ldr    x22, [x8, #1368]</div><div class=\"line\">    0x193654128 &lt;+96&gt;:  mov    x1, x22</div><div class=\"line\">    0x19365412c &lt;+100&gt;: bl     0x199a89bc0               ; objc_msgSend</div><div class=\"line\">(lldb) po $x0</div><div class=\"line\">&lt;__NSArrayI 0x13105a780&gt;(</div><div class=\"line\">G: &lt;PSSpecifier 0x12ff50cf0: ID 0, Name &apos;&apos; target &lt;(null): 0x0&gt;&gt; 0x12ff50cf0,</div><div class=\"line\">&lt;PSSpecifier 0x12ff50f50: ID NAME_CELL_ID, Name &apos;Name&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">G: &lt;PSSpecifier 0x12ff51680: ID 2, Name &apos;&apos; target &lt;(null): 0x0&gt;&gt; 0x12ff51680,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52360: ID NETWORK, Name &apos;Network&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52420: ID SONGS, Name &apos;Songs&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff519f0: ID VIDEOS, Name &apos;Videos&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff51ab0: ID PHOTOS, Name &apos;Photos&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff51b70: ID APPLICATIONS, Name &apos;Applications&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff524e0: ID User Data Capacity, Name &apos;Capacity&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff525a0: ID User Data Available, Name &apos;Available&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff526a0: ID ProductVersion, Name &apos;Version&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52850: ID CARRIER_VERSION, Name &apos;Carrier&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52980: ID ProductModel, Name &apos;Model&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52a60: ID SerialNumber, Name &apos;Serial Number&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52b90: ID MACAddress, Name &apos;Wi-Fi Address&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff51050: ID BTMACAddress, Name &apos;Bluetooth&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12fde95d0: ID ModemVersion, Name &apos;Modem Firmware&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">G: &lt;PSSpecifier 0x131031e90: ID 17, Name &apos;&apos; target &lt;(null): 0x0&gt;&gt; 0x131031e90,</div><div class=\"line\">&lt;PSSpecifier 0x12fde9c40: ID LEGAL_AND_REGULATORY, Name &apos;Legal&apos; target &lt;(null): 0x0&gt;&gt;,</div><div class=\"line\">G: &lt;PSSpecifier 0x131029dc0: ID TRUST_STORE_GROUP, Name &apos;&apos; target &lt;(null): 0x0&gt;&gt; 0x131029dc0,</div><div class=\"line\">&lt;PSSpecifier 0x131033520: ID TRUST_STORE, Name &apos;Trust Store&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>我们让程序执行下一步，发现此时x0已经有值了，可以明显的看出，x0的值是在0x190804114~0x19080411C这段代码生成的，下面我们的工作重点就是寻找这段代码干了什么，胜利就在眼前！下面我们验证一下这里面到底有没有我们要的序列号：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po [[$x0 objectAtIndex:13] class]</div><div class=\"line\">PSSpecifier</div><div class=\"line\">(lldb) po [[$x0 objectAtIndex:13] properties]</div><div class=\"line\">&#123;</div><div class=\"line\">    cellObject = &quot;&lt;PSTableCell: 0x130800000; baseClass = UITableViewCell; frame = (0 565; 320 45); text = &apos;Serial Number&apos;; hidden = YES; autoresize = W; tag = 4; gestureRecognizers = &lt;NSArray: 0x12ff821c0&gt;; layer = &lt;CALayer: 0x12fd7d340&gt;&gt;&quot;;</div><div class=\"line\">    id = SerialNumber;</div><div class=\"line\">    isCopyable = 1;</div><div class=\"line\">    value = DNPMVG0EFF9V;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们打印数组中存放cell数据的object属于哪个类，发现是<code>PSSpecifier</code>，我们找到之前导出的类的头文件，发现这个类有一个叫做<code>properties</code>的实例方法，我们调用一下发现我们要的序列号就在里面<code>value = DNPMVG0EFF9V</code>，这跟iPhone设置中看到的序列号是一致的。猜测这个数组里面存放着系统设置中<code>PSUIAboutController</code>中所有cel的数据，这个数组下一个肯定要传递到cell生成的方法中，这个就不做验证了，大事重要，我们继续找序列号的生成方法。<br>这个<code>PSSpecifier</code>中有一个<code>AboutDataSource</code>对象，这个非常可疑，从名称上可以判断，这个类是专门用于数据处理的，不过在这之前我们还是先验证一下，在0x190804114~0x19080411C这段地址中，执行了<code>_PSListController._specifiers</code>，我们从<code>PSListController</code>的头文件（下文有讲怎么获取）中可以看到有一个specifiers属性，我们在IDA分析的文件中找到<code>[PSListController specifiers]</code>，我们先定位到方法在二进制文件中的位置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">__text:00000001907FE4A8 ; -[PSListController specifiers]</div><div class=\"line\">__text:00000001907FE4A8 __PSListController_specifiers_          ; DATA XREF: __objc_const:000000019C069A08\u0019o</div><div class=\"line\">__text:00000001907FE4A8</div><div class=\"line\">__text:00000001907FE4A8 var_40          = -0x40</div><div class=\"line\">__text:00000001907FE4A8 var_30          = -0x30</div><div class=\"line\">__text:00000001907FE4A8 var_20          = -0x20</div><div class=\"line\">__text:00000001907FE4A8 var_10          = -0x10</div><div class=\"line\">__text:00000001907FE4A8</div><div class=\"line\">__text:00000001907FE4A8                 STP             X24, X23, [SP,#var_40]!</div><div class=\"line\">__text:00000001907FE4AC                 STP             X22, X21, [SP,#0x40+var_30]</div><div class=\"line\">__text:00000001907FE4B0                 STP             X20, X19, [SP,#0x40+var_20]</div><div class=\"line\">__text:00000001907FE4B4                 STP             X29, X30, [SP,#0x40+var_10]</div><div class=\"line\">__text:00000001907FE4B8                 ADD             X29, SP, #0x40+var_10</div><div class=\"line\">__text:00000001907FE4BC                 MOV             X19, X0</div><div class=\"line\">__text:00000001907FE4C0                 ADRP            X8, #_OBJC_IVAR_$_PSListController._specifiers@PAGE ; NSArray *_specifiers;</div><div class=\"line\">__text:00000001907FE4C4                 LDRSW           X22, [X8,#_OBJC_IVAR_$_PSListController._specifiers@PAGEOFF] ; NSArray *_specifiers;</div><div class=\"line\">__text:00000001907FE4C8                 LDR             X8, [X19,X22]</div><div class=\"line\">__text:00000001907FE4CC                 CBNZ            X8, loc_1907FE5E0</div><div class=\"line\">__text:00000001907FE4D0                 ADRP            X8, #_OBJC_IVAR_$_PSListController._dataSource@PAGE ; id &lt;PSSpecifierDataSource&gt; _dataSource;</div><div class=\"line\">__text:00000001907FE4D4                 LDRSW           X8, [X8,#_OBJC_IVAR_$_PSListController._dataSource@PAGEOFF] ; id &lt;PSSpecifierDataSource&gt; _dataSource;</div><div class=\"line\">__text:00000001907FE4D8                 LDR             X9, [X19,X8]</div><div class=\"line\">__text:00000001907FE4DC                 CBZ             X9, loc_1907FE550</div><div class=\"line\">__text:00000001907FE4E0                 ADRP            X9, #_OBJC_IVAR_$_PSListController._requestingSpecifiersFromDataSource@PAGE ; bool _requestingSpecifiersFromDataSource;</div><div class=\"line\">__text:00000001907FE4E4                 LDRSW           X23, [X9,#_OBJC_IVAR_$_PSListController._requestingSpecifiersFromDataSource@PAGEOFF] ; bool _requestingSpecifiersFromDataSource;</div><div class=\"line\">__text:00000001907FE4E8                 MOV             W9, #1</div><div class=\"line\">__text:00000001907FE4EC                 STRB            W9, [X19,X23]</div><div class=\"line\">__text:00000001907FE4F0                 LDR             X20, [X19,X8]</div><div class=\"line\">__text:00000001907FE4F4                 ADRP            X8, #selRef_specifier@PAGE</div><div class=\"line\">__text:00000001907FE4F8                 LDR             X1, [X8,#selRef_specifier@PAGEOFF]</div><div class=\"line\">__text:00000001907FE4FC                 MOV             X0, X19</div><div class=\"line\">__text:00000001907FE500                 BL              0x96C39BC0</div><div class=\"line\">__text:00000001907FE504                 MOV             X29, X29</div><div class=\"line\">__text:00000001907FE508                 BL              0x96C41EF0</div><div class=\"line\">__text:00000001907FE50C                 MOV             X21, X0</div><div class=\"line\">__text:00000001907FE510                 ADRP            X8, #selRef_specifiersForSpecifier_observer_@PAGE</div><div class=\"line\">__text:00000001907FE514                 LDR             X1, </div><div class=\"line\">……</div></pre></td></tr></table></figure>\n<p>然后在这里面下个断点看看会发生什么</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) br s -a 0x1907FE4D0+0x198e58640</div><div class=\"line\">Breakpoint 9: where = Preferences`-[PSListController specifiers] + 40, address = 0x000000019364e4d0</div></pre></td></tr></table></figure>\n<p>我们从设置中进入通用&gt;关于，发现一开始就走到了这个断点，我们猜测，一进入关于页面，系统会首先把所有cell的数据都准备好，然后加载UI</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x000000019364e4d0 Preferences`-[PSListController specifiers] + 40, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 9.1</div><div class=\"line\">    frame #0: 0x000000019364e4d0 Preferences`-[PSListController specifiers] + 40</div><div class=\"line\">Preferences`-[PSListController specifiers]:</div><div class=\"line\">-&gt;  0x19364e4d0 &lt;+40&gt;: adrp   x8, 53971</div><div class=\"line\">    0x19364e4d4 &lt;+44&gt;: ldrsw  x8, [x8, #536]</div><div class=\"line\">    0x19364e4d8 &lt;+48&gt;: ldr    x9, [x19, x8]</div><div class=\"line\">    0x19364e4dc &lt;+52&gt;: cbz    x9, 0x19364e550           ; &lt;+168&gt;</div></pre></td></tr></table></figure>\n<p>我们打印变量x8和x9的值，看一下系统做了什么</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x8</div><div class=\"line\">&lt;nil&gt;</div><div class=\"line\">(lldb) po $x9</div><div class=\"line\">PSUIAboutController</div></pre></td></tr></table></figure>\n<p>并没有数据之类的东西值得我们关注，让断点继续往下走，走到0x19364e4dc的位置，我们再次打印变量x8和x9的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) n</div><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x000000019364e4dc Preferences`-[PSListController specifiers] + 52, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x000000019364e4dc Preferences`-[PSListController specifiers] + 52</div><div class=\"line\">Preferences`-[PSListController specifiers]:</div><div class=\"line\">-&gt;  0x19364e4dc &lt;+52&gt;: cbz    x9, 0x19364e550           ; &lt;+168&gt;</div><div class=\"line\">    0x19364e4e0 &lt;+56&gt;: adrp   x9, 53971</div><div class=\"line\">    0x19364e4e4 &lt;+60&gt;: ldrsw  x23, [x9, #540]</div><div class=\"line\">    0x19364e4e8 &lt;+64&gt;: orr    w9, wzr, #0x1</div><div class=\"line\">(lldb) po $x8</div><div class=\"line\">952</div><div class=\"line\">(lldb) po $x9</div><div class=\"line\">&lt;AboutDataSource: 0x131130730&gt;</div></pre></td></tr></table></figure>\n<p>此时的变量x9已经变成了<code>AboutDataSource</code>，这里验证了我们上一步的猜想，所以我们重点来研究它，我们先找到这个类在哪个framework中，这里使用的是grep命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ grep AboutDataSource -r /Users/gaoshilei/Desktop/reverse/iOS-Runtime-Headers-9.1 </div><div class=\"line\">/Users/gaoshilei/Desktop/reverse/iOS-Runtime-Headers-9.1/PrivateFrameworks/PreferencesUI.framework/AboutDataSource.h:@interface AboutDataSource : PSSpecifierDataSource &#123;</div></pre></td></tr></table></figure>\n<p>这里要说明一下iOS-Runtime-Headers-9.1这个文件夹是iOS9.1系统的所有头文件（共有+私有），这个你可以自己导（iOS9之后只能用runtime导，class-dump已经不行了），你也可以拿现成的用，github上面已经有雷锋把所有系统的头文件都导出来了，直接下载就可以了。我们发现<code>AboutDataSource</code>这个类在<code>PrivateFrameworks/PreferencesUI.framework</code>中，先看一下这个类里面有什么方法和属性，有一个方法<code>- (void)_loadValues;</code> 我们对它进行分析。这里又要借助IDA分析，把PreferencesUI这个二进制文件丢到IDA里面，在0x19091EBB8这个位置打个断点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) br s -a 0x19091EBB8+0x2e50000</div><div class=\"line\">Breakpoint 3: where = PreferencesUI`-[AboutDataSource _loadValues] + 1956, address = 0x000000019376ebb8</div></pre></td></tr></table></figure>\n<p>接下来我们进入关于来触发断点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po (char *) $x28</div><div class=\"line\">&quot;_setValue:forSpecifierWithKey:&quot;</div></pre></td></tr></table></figure>\n<p>在这里打印变量x28的值，发现它是一个方法名，从名称来看是给<code>specifier</code>赋值的，看来我们要寻找的真相已经很近了，让代码走到下面的位置0x19376ebd8</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Process 2107 stopped</div><div class=\"line\">* thread #1: tid = 0xe8e23, 0x000000019376ebd8 PreferencesUI`-[AboutDataSource _loadValues] + 1988, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x000000019376ebd8 PreferencesUI`-[AboutDataSource _loadValues] + 1988</div><div class=\"line\">PreferencesUI`-[AboutDataSource _loadValues]:</div><div class=\"line\">-&gt;  0x19376ebd8 &lt;+1988&gt;: bl     0x198e58640               ; MGCopyAnswer</div><div class=\"line\">    0x19376ebdc &lt;+1992&gt;: mov    x22, x0</div><div class=\"line\">    0x19376ebe0 &lt;+1996&gt;: mov    x1, x19</div><div class=\"line\">    0x19376ebe4 &lt;+2000&gt;: bl     0x199a89bc0               ; objc_msgSend</div><div class=\"line\">(lldb) po $x0</div><div class=\"line\">SerialNumber</div></pre></td></tr></table></figure>\n<p>此时我们打印的x0是一个<code>NSCFConstantString</code>，本质就是一个<code>NSString</code>，继续<code>ni</code>让程序运行到0x19376ebdc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Process 2107 stopped</div><div class=\"line\">* thread #1: tid = 0xe8e23, 0x000000019376ebdc PreferencesUI`-[AboutDataSource _loadValues] + 1992, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x000000019376ebdc PreferencesUI`-[AboutDataSource _loadValues] + 1992</div><div class=\"line\">PreferencesUI`-[AboutDataSource _loadValues]:</div><div class=\"line\">-&gt;  0x19376ebdc &lt;+1992&gt;: mov    x22, x0</div><div class=\"line\">    0x19376ebe0 &lt;+1996&gt;: mov    x1, x19</div><div class=\"line\">    0x19376ebe4 &lt;+2000&gt;: bl     0x199a89bc0               ; objc_msgSend</div><div class=\"line\">    0x19376ebe8 &lt;+2004&gt;: cbnz   x0, 0x19376ec4c           ; &lt;+2104&gt;</div><div class=\"line\">(lldb) po $x0</div><div class=\"line\">DNPMVG0EFF9V</div></pre></td></tr></table></figure>\n<p>在这里我们打印了变量x0的值为<strong>DNPMVG0EFF9V</strong>，这就是我们苦苦寻找的序列号。不难看出，序列号就是在0x19376ebd8这行拿到的，范围越来越小，敌人无路可逃！下面我们就要对这行进行分析，我们按照之前的步骤，再次走到0x19376ebd8这个位置，这不过这次我们不要<code>step-over</code>，我们用<code>si</code>跳入看看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) si</div><div class=\"line\">Process 2107 stopped</div><div class=\"line\">* thread #1: tid = 0xe8e23, 0x0000000198e58640 libMobileGestalt.dylib`MGCopyAnswer, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step into</div><div class=\"line\">    frame #0: 0x0000000198e58640 libMobileGestalt.dylib`MGCopyAnswer</div><div class=\"line\">libMobileGestalt.dylib`MGCopyAnswer:</div><div class=\"line\">-&gt;  0x198e58640 &lt;+0&gt;: movz   x1, #0</div><div class=\"line\">    0x198e58644 &lt;+4&gt;: b      0x198e58648               ; ___lldb_unnamed_symbol64$$libMobileGestalt.dylib</div><div class=\"line\"></div><div class=\"line\">libMobileGestalt.dylib`___lldb_unnamed_symbol64$$libMobileGestalt.dylib:</div><div class=\"line\">    0x198e58648 &lt;+0&gt;: stp    x24, x23, [sp, #-64]!</div><div class=\"line\">    0x198e5864c &lt;+4&gt;: stp    x22, x21, [sp, #16]</div><div class=\"line\">此时跳入了一个静态库libMobileGestalt.dylib，我们可以在usr/lib/ibMobileGestalt.dylib找到它，我们将它扔进IDA，用当前的addr减去libMobileGestalt.dylib的基地址偏移得到它的静态地址0x196008640，对应的是一个函数MGCopyAnswer</div><div class=\"line\">__text:0000000196008640</div><div class=\"line\">__text:0000000196008640 ; =============== S U B R O U T I N E =======================================</div><div class=\"line\">__text:0000000196008640</div><div class=\"line\">__text:0000000196008640</div><div class=\"line\">__text:0000000196008640                 EXPORT _MGCopyAnswer</div><div class=\"line\">__text:0000000196008640 _MGCopyAnswer                           ; CODE XREF: sub_196005958+30\u0018p</div><div class=\"line\">__text:0000000196008640                                         ; sub_196006258+28\u0018p ...</div><div class=\"line\">__text:0000000196008640                 MOV             X1, #0</div><div class=\"line\">__text:0000000196008644                 B               sub_196008648</div><div class=\"line\">__text:0000000196008644 ; End of function _MGCopyAnswer</div></pre></td></tr></table></figure>\n<p>这个函数最外层只有两行代码，将立即数0赋给x1，然后跳进了子程序sub_196008648，跳进去之后进行了一些很复杂的运算，这里就不做介绍了，里面的实现大概是这样的：<br>x0是作为一个参数传入的，并且这里x0的值为<code>SerialNumber</code>，在地址为0x196008678的地方，这个函数中x1变成了一串随机数，有点像MD5加密之后的东西，应该是“钥匙”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po (char*) $x1</div><div class=\"line\">&quot;l92SaBpqIvQs+KBljuwGA&quot;</div></pre></td></tr></table></figure>\n<p>在0x196008690这里，我们<code>setp-into</code>这个函数，在函数的末尾返回值的地方0x196007474打个断点，打印返回值x0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x0</div><div class=\"line\">DNPMVG0EFF9V</div></pre></td></tr></table></figure>\n<p>这里的x0由<code>SerialNumber</code>变成了真正的序列号，并且就是在0x196008690对应的子程序sub_19600738C里面拿到的，所以我们就这样一个猜测，在<code>MGCopyAnswer</code>函数中，x0作为一个参数传入，并且在内部进行了一系列复杂的运算，拿到了获取序列号的“钥匙”x1，然后在sub_19600738C中拿到了最终的序列号。这里笔者也没有对序列号的拿到在进行进一步的深究，这里苹果做了很大的限制，再继续研究恐怕也是收获不大，而且我们在这里已经能拿到序列号了。  </p>\n<h3 id=\"三、验证结果\"><a href=\"#三、验证结果\" class=\"headerlink\" title=\"三、验证结果\"></a>三、验证结果</h3><p>接下来就是验证的过程了，我们写一个tweak来验证，当然也可以用其他方式来验证：<br>tweak的创建这里就不赘述了，我把我的tweak和makefile文件内容贴一下：</p>\n<blockquote>\n<p>tweak文件：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">tweak.xm:</div><div class=\"line\">extern &quot;C&quot; NSString *MGCopyAnswer(NSString*);</div><div class=\"line\">%hook SpringBoard</div><div class=\"line\">- (void)applicationDidFinishLaunching:(id)application &#123;</div><div class=\"line\">%orig;</div><div class=\"line\">NSString *serialNumber = [NSString stringWithFormat:@&quot;%@&quot;,[MGCopyAnswer(@&quot;SerialNumber&quot;) autorelease]];</div><div class=\"line\">UIAlertView *alert = [[UIAlertView alloc] initWithTitle:serialNumber message:nil delegate:self cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];</div><div class=\"line\">[alert show];</div><div class=\"line\">&#125;</div><div class=\"line\">%end</div></pre></td></tr></table></figure>\n<p>这里注入系统的SpringBoard，在SB启动的时候hook住applicationDidFinishLaunching：函数，并且在这个函数里面添加获取序列号的代码，并且以弹框的形式展现出来。  </p>\n<blockquote>\n<p>makefile文件:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">THEOS_DEVICE_IP = 192.168.0.115</div><div class=\"line\">include $(THEOS)/makefiles/common.mk</div><div class=\"line\">TWEAK_NAME = SerialNumber</div><div class=\"line\">SerialNumber_FILES = Tweak.xm</div><div class=\"line\">include $(THEOS_MAKE_PATH)/tweak.mk</div><div class=\"line\">SerialNumber_LDFLAGS = -lMobileGestalt</div><div class=\"line\">after-install::</div><div class=\"line\">\tinstall.exec &quot;killall -9 SpringBoard&quot;</div></pre></td></tr></table></figure>\n<p>其中有一行<code>SerialNumber_LDFLAGS = -lMobileGestalt</code>千万要注意，使用的时候要加载这个静态库，因为SpringBoard加载的时候我也不确定是否有加载这个库，然后我们验证一下吧！<br><img src=\"http://upload-images.jianshu.io/upload_images/1787336-de4c49a4ffd6bd91.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"序列号验证-获取\"><img src=\"http://upload-images.jianshu.io/upload_images/1787336-78e60f103a70c27e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"序列号验证-系统\">  </p>\n<p> <a href=\"https://www.amazon.cn/iOS应用逆向工程-沙梓社/dp/B00VFDVY7E/ref=sr_1_1?ie=UTF8&amp;qid=1477453672&amp;sr=8-1&amp;keywords=iOS逆向工程\" target=\"_blank\" rel=\"external\">此文参考了《iOS逆向工程（第二版）》</a></p>\n","excerpt":"<p><Excerpt in index | 首页摘要><br>+","more":"</p>\n<p><The rest of contents | 余下全文></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在iOS7之前我们可以通过<code>- (NSString *)uniqueIdentifier</code>这个方法获取iPhone的唯一标识符，也叫作UDID。不过自从iOS7苹果就把这个方法给禁了，此时我们想要获取iPhone的唯一标识符就很困难。<br>不过苹果提供一个叫做IDFA的标识符，这个IDFA是广告标识符用来追踪广告投放的，不过用户可以在设置中手动重置IDFA，可靠性很低，目前常见的两种标记iPhone的方式为  </p>\n<ul>\n<li>openUDID  </li>\n<li>IDFA或UUID+keychain  </li>\n</ul>\n<p>这两种模式都有个弊端，用户重置手机或者刷机唯一标识符会发生变化，不过对于大多数情况是够用了。看来苹果是把路给封死了，有没有办法拿到之前的UDID呢？我们注意到iPhone的设置通用关于里面有手机的硬件信息，其中有一个serialNumber，这个serialnumber就是我们查询手机是否过保的依据，那么它肯定是唯一的，所以下文是围绕这个进行的探索。最终是可以拿到这个serialNumber的， 不过由于苹果的沙盒限制，所以只能在越狱机中拿到，如果想在非越狱机中拿到必须添加entitlements文件来获取权限，可想而知这个应用是无法上架的。<strong>下文仅作为逆向工程的一种思路和探索，请勿用于非法用途。</strong>  </p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"一、SSH连接手机（USB模式）\"><a href=\"#一、SSH连接手机（USB模式）\" class=\"headerlink\" title=\"一、SSH连接手机（USB模式）\"></a>一、SSH连接手机（USB模式）</h3><h4 id=\"1-映射端口\"><a href=\"#1-映射端口\" class=\"headerlink\" title=\"1.映射端口\"></a>1.映射端口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ /Users/gaoshilei/Desktop/reverse/USBSSH/tcprelay.py -t 22:6666</div><div class=\"line\">Forwarding local port 6666 to remote port 22</div></pre></td></tr></table></figure>\n<h4 id=\"2-连接手机，并且用grep命令快速筛选当前我们要调试的应用Preferences，附加debugserver开始1234端口等待lldb调试\"><a href=\"#2-连接手机，并且用grep命令快速筛选当前我们要调试的应用Preferences，附加debugserver开始1234端口等待lldb调试\" class=\"headerlink\" title=\"2.连接手机，并且用grep命令快速筛选当前我们要调试的应用Preferences，附加debugserver开始1234端口等待lldb调试\"></a>2.连接手机，并且用grep命令快速筛选当前我们要调试的应用Preferences，附加debugserver开始1234端口等待lldb调试</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ ssh root@localhost -p 6666</div><div class=\"line\">iPhone-5S:~ root# ps -e | grep Pre</div><div class=\"line\">  270 ??         0:00.29 /System/Library/PrivateFrameworks/MobileSoftwareUpdate.framework/XPCServices/com.apple.MobileSoftwareUpdate.CleanupPreparePathService.xpc/com.apple.MobileSoftwareUpdate.CleanupPreparePathService</div><div class=\"line\"> 1192 ??         0:14.26 /var/db/stash/_.fP74Fg/Applications/Preferences.app/Preferences</div><div class=\"line\"> 1289 ttys000    0:00.01 grep Pre</div><div class=\"line\">iPhone-5S:~ root# debugserver *:1234 -a &quot;Preferences&quot;</div><div class=\"line\">debugserver-@(#)PROGRAM:debugserver  PROJECT:debugserver-340.3.51.1</div><div class=\"line\"> for arm64.</div><div class=\"line\">Attaching to process Preferences...</div><div class=\"line\">Listening to port 1234 for a connection from *...</div></pre></td></tr></table></figure>\n<h4 id=\"3-完成以上两步接下来就可以进行lldb调试了，首先要把远端（手机）的1234端口映射到本地，跟前面提到的SSH端口映射一样\"><a href=\"#3-完成以上两步接下来就可以进行lldb调试了，首先要把远端（手机）的1234端口映射到本地，跟前面提到的SSH端口映射一样\" class=\"headerlink\" title=\"3.完成以上两步接下来就可以进行lldb调试了，首先要把远端（手机）的1234端口映射到本地，跟前面提到的SSH端口映射一样\"></a>3.完成以上两步接下来就可以进行lldb调试了，首先要把远端（手机）的1234端口映射到本地，跟前面提到的SSH端口映射一样</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ /Users/gaoshilei/Desktop/reverse/USBSSH/tcprelay.py -t 1234:1234</div><div class=\"line\">Forwarding local port 1234 to remote port 1234</div></pre></td></tr></table></figure>\n<h3 id=\"二、通过LLDB、IDA寻找线索\"><a href=\"#二、通过LLDB、IDA寻找线索\" class=\"headerlink\" title=\"二、通过LLDB、IDA寻找线索\"></a>二、通过LLDB、IDA寻找线索</h3><p>lldb的调试端口已经打开，此时我们可以进入调试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ lldb</div><div class=\"line\">(lldb) process connect connect://localhost:1234</div><div class=\"line\">Process 1192 stopped  </div><div class=\"line\">* thread #1: tid = 0x523a6, 0x000000019a3c8a40 libsystem_kernel.dylib`mach_msg_trap + 8, queue = &apos;com.apple.main-thread&apos;, stop reason = signal SIGSTOP  </div><div class=\"line\">    frame #0: 0x000000019a3c8a40 libsystem_kernel.dylib`mach_msg_trap + 8</div><div class=\"line\">libsystem_kernel.dylib`mach_msg_trap:</div><div class=\"line\">-&gt;  0x19a3c8a40 &lt;+8&gt;: ret    </div><div class=\"line\">libsystem_kernel.dylib`mach_msg_overwrite_trap:</div><div class=\"line\">    0x19a3c8a44 &lt;+0&gt;: movn   x16, #0x1f</div><div class=\"line\">    0x19a3c8a48 &lt;+4&gt;: svc    #0x80</div><div class=\"line\">    0x19a3c8a4c &lt;+8&gt;: ret</div></pre></td></tr></table></figure>\n<p>此时我们已经成功进入Preferences的调试阶段，先c一下，让程序继续运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) c</div><div class=\"line\">Process 1192 resuming</div></pre></td></tr></table></figure>\n<p>这么做的原因是我们待会要打印image的基地址偏移，有可能在我们打印的image list中没有我们想要的image。<br>此时我们已经找到到Preference.framework的基地址偏移，见下图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) im li -o -f</div><div class=\"line\">[  0] 0x00000000000dc000 /var/db/stash/_.fP74Fg/Applications/Preferences.app/Preferences(0x00000001000dc000)</div><div class=\"line\">[  1] 0x0000000100100000 /Library/MobileSubstrate/MobileSubstrate.dylib(0x0000000100100000)</div><div class=\"line\">[  2] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/PrivateFrameworks/BulletinBoard.framework/BulletinBoard</div><div class=\"line\">[  3] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation</div><div class=\"line\">[  4] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/Frameworks/IOKit.framework/Versions/A/IOKit</div><div class=\"line\">…</div><div class=\"line\">[ 44] 0x0000000002e50000 /Users/gaoshilei/Library/Developer/Xcode/iOS DeviceSupport/9.1 (13B143)/Symbols/System/Library/PrivateFrameworks/Preferences.framework/Preferences</div><div class=\"line\">…</div></pre></td></tr></table></figure>\n<p>我们要找的image的序号在这里是44，它的基地址偏移为0x2e50000，我们把从iPhone中导出的PrivateFrameworks中的Preferences.framework丢到IDA中进行分析，这个二进制文件比较小，很快就分析完成，在前面我们已经知道iPhone的唯一序列号serial number是通过PSListController生成的，并且我们知道这是一个cell，我们要去调试<code>[PSListController tableView:cellForRowAtIndexPath:]</code>这个方法，从中找到cell值的来源，从而找到获取序列号的方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">__text:00000001908040C8 ; -[PSListController tableView:cellForRowAtIndexPath:]</div><div class=\"line\">__text:00000001908040C8 __PSListController_tableView_cellForRowAtIndexPath__</div><div class=\"line\">__text:00000001908040C8                                         ; DATA XREF: __objc_const:000000019C069B88\u0019o</div><div class=\"line\">__text:00000001908040C8</div><div class=\"line\">__text:00000001908040C8 var_80          = -0x80</div><div class=\"line\">__text:00000001908040C8 var_78          = -0x78</div><div class=\"line\">__text:00000001908040C8 var_70          = -0x70</div><div class=\"line\">__text:00000001908040C8 var_68          = -0x68</div><div class=\"line\">__text:00000001908040C8 var_60          = -0x60</div><div class=\"line\">__text:00000001908040C8 var_50          = -0x50</div><div class=\"line\">__text:00000001908040C8 var_40          = -0x40</div><div class=\"line\">__text:00000001908040C8 var_30          = -0x30</div><div class=\"line\">__text:00000001908040C8 var_20          = -0x20</div><div class=\"line\">__text:00000001908040C8 var_10          = -0x10</div><div class=\"line\">__text:00000001908040C8</div><div class=\"line\">__text:00000001908040C8                 STP             X28, X27, [SP,#var_60]!</div><div class=\"line\">__text:00000001908040CC                 STP             X26, X25, [SP,#0x60+var_50]</div><div class=\"line\">__text:00000001908040D0                 STP             X24, X23, [SP,#0x60+var_40]</div><div class=\"line\">__text:00000001908040D4                 STP             X22, X21, [SP,#0x60+var_30]</div><div class=\"line\">__text:00000001908040D8                 STP             X20, X19, [SP,#0x60+var_20]</div><div class=\"line\">__text:00000001908040DC                 STP             X29, X30, [SP,#0x60+var_10]</div><div class=\"line\">__text:00000001908040E0                 ADD             X29, SP, #0x60+var_10</div><div class=\"line\">__text:00000001908040E4                 SUB             SP, SP, #0x20</div><div class=\"line\">__text:00000001908040E8                 MOV             X21, X3</div><div class=\"line\">__text:00000001908040EC                 MOV             X20, X0</div><div class=\"line\">__text:00000001908040F0                 MOV             X0, X2</div><div class=\"line\">__text:00000001908040F4                 BL              0x96C400A0</div><div class=\"line\">__text:00000001908040F8                 MOV             X26, X0</div><div class=\"line\">__text:00000001908040FC                 ADRP            X8, #off_19DACC568@PAGE</div><div class=\"line\">__text:0000000190804100                 LDR             X1, [X8,#off_19DACC568@PAGEOFF]</div><div class=\"line\">__text:0000000190804104                 MOV             X0, X20</div><div class=\"line\">__text:0000000190804108                 MOV             X2, X21</div><div class=\"line\">__text:000000019080410C                 BL              0x96C39BC0</div><div class=\"line\">__text:0000000190804110                 MOV             X2, X0</div><div class=\"line\">__text:0000000190804114                 ADRP            X8, #_OBJC_IVAR_$_PSListController._specifiers@PAGE ; NSArray *_specifiers;</div><div class=\"line\">__text:0000000190804118                 LDRSW           X27, [X8,#_OBJC_IVAR_$_PSListController._specifiers@PAGEOFF] ; NSArray *_specifiers;</div><div class=\"line\">__text:000000019080411C                 LDR             X0, [X20,X27]</div><div class=\"line\">__text:0000000190804120                 ADRP            X8, #off_19DACC558@PAGE</div><div class=\"line\">……</div></pre></td></tr></table></figure>\n<p>我们在Preference.framework中基地址为0x190804114的位置打个断点，具体的做法是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) br s -a 0x190804114+0x2e50000</div><div class=\"line\">Breakpoint 1: where = Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76, address = 0x0000000193654114</div><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x0000000193654114 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 1.1</div><div class=\"line\">    frame #0: 0x0000000193654114 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 76</div><div class=\"line\">Preferences`-[PSListController tableView:cellForRowAtIndexPath:]:</div><div class=\"line\">-&gt;  0x193654114 &lt;+76&gt;: adrp   x8, 53965</div><div class=\"line\">    0x193654118 &lt;+80&gt;: ldrsw  x27, [x8, #516]</div><div class=\"line\">    0x19365411c &lt;+84&gt;: ldr    x0, [x20, x27]</div><div class=\"line\">    0x193654120 &lt;+88&gt;: adrp   x8, 53960</div></pre></td></tr></table></figure>\n<p>这里断点这样打是因为系统加载可执行文件和各种framework的时候会有一个地址偏移，我们在打断点的时候要把这个偏移量加上，这样我们打的断点才是准确的。<br>可以看到我们已经成功打了一个断点，断点的address = 0x193654114。此时我们打印变量x0和x27的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x0</div><div class=\"line\">13</div><div class=\"line\">(lldb) po $x27</div><div class=\"line\">1104</div></pre></td></tr></table></figure>\n<p>我们执行ni让程序继续（这里的<code>ni</code>命令相当于Xcode的那个下箭头命令，也就是下一行）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) ni</div><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x0000000193654118 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 80, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x0000000193654118 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 80</div><div class=\"line\">Preferences`-[PSListController tableView:cellForRowAtIndexPath:]:</div><div class=\"line\">-&gt;  0x193654118 &lt;+80&gt;: ldrsw  x27, [x8, #516]</div><div class=\"line\">    0x19365411c &lt;+84&gt;: ldr    x0, [x20, x27]</div><div class=\"line\">    0x193654120 &lt;+88&gt;: adrp   x8, 53960</div><div class=\"line\">    0x193654124 &lt;+92&gt;: ldr    x22, [x8, #1368]</div><div class=\"line\">(lldb) ni</div><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x000000019365411c Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 84, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x000000019365411c Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 84</div><div class=\"line\">Preferences`-[PSListController tableView:cellForRowAtIndexPath:]:</div><div class=\"line\">-&gt;  0x19365411c &lt;+84&gt;: ldr    x0, [x20, x27]</div><div class=\"line\">    0x193654120 &lt;+88&gt;: adrp   x8, 53960</div><div class=\"line\">    0x193654124 &lt;+92&gt;: ldr    x22, [x8, #1368]</div><div class=\"line\">    0x193654128 &lt;+96&gt;: mov    x1, x22</div><div class=\"line\">(lldb) po $x27</div><div class=\"line\">848</div><div class=\"line\"></div><div class=\"line\">(lldb) po $x0</div><div class=\"line\">13</div></pre></td></tr></table></figure>\n<p>我们ni的两次，程序已经走到0x19080411C的位置，然后我们继续打印变量x0和x27的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x0</div><div class=\"line\">13</div><div class=\"line\">(lldb) po $x27</div><div class=\"line\">1104</div></pre></td></tr></table></figure>\n<p>打印出来的x0和x27都是随机数，还是没有什么收获，我们继续</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) ni</div><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x0000000193654120 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 88, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x0000000193654120 Preferences`-[PSListController tableView:cellForRowAtIndexPath:] + 88</div><div class=\"line\">Preferences`-[PSListController tableView:cellForRowAtIndexPath:]:</div><div class=\"line\">-&gt;  0x193654120 &lt;+88&gt;:  adrp   x8, 53960</div><div class=\"line\">    0x193654124 &lt;+92&gt;:  ldr    x22, [x8, #1368]</div><div class=\"line\">    0x193654128 &lt;+96&gt;:  mov    x1, x22</div><div class=\"line\">    0x19365412c &lt;+100&gt;: bl     0x199a89bc0               ; objc_msgSend</div><div class=\"line\">(lldb) po $x0</div><div class=\"line\">&lt;__NSArrayI 0x13105a780&gt;(</div><div class=\"line\">G: &lt;PSSpecifier 0x12ff50cf0: ID 0, Name &apos;&apos; target &lt;(null): 0x0&gt;&gt; 0x12ff50cf0,</div><div class=\"line\">&lt;PSSpecifier 0x12ff50f50: ID NAME_CELL_ID, Name &apos;Name&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">G: &lt;PSSpecifier 0x12ff51680: ID 2, Name &apos;&apos; target &lt;(null): 0x0&gt;&gt; 0x12ff51680,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52360: ID NETWORK, Name &apos;Network&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52420: ID SONGS, Name &apos;Songs&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff519f0: ID VIDEOS, Name &apos;Videos&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff51ab0: ID PHOTOS, Name &apos;Photos&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff51b70: ID APPLICATIONS, Name &apos;Applications&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff524e0: ID User Data Capacity, Name &apos;Capacity&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff525a0: ID User Data Available, Name &apos;Available&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff526a0: ID ProductVersion, Name &apos;Version&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52850: ID CARRIER_VERSION, Name &apos;Carrier&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52980: ID ProductModel, Name &apos;Model&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52a60: ID SerialNumber, Name &apos;Serial Number&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff52b90: ID MACAddress, Name &apos;Wi-Fi Address&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12ff51050: ID BTMACAddress, Name &apos;Bluetooth&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">&lt;PSSpecifier 0x12fde95d0: ID ModemVersion, Name &apos;Modem Firmware&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;,</div><div class=\"line\">G: &lt;PSSpecifier 0x131031e90: ID 17, Name &apos;&apos; target &lt;(null): 0x0&gt;&gt; 0x131031e90,</div><div class=\"line\">&lt;PSSpecifier 0x12fde9c40: ID LEGAL_AND_REGULATORY, Name &apos;Legal&apos; target &lt;(null): 0x0&gt;&gt;,</div><div class=\"line\">G: &lt;PSSpecifier 0x131029dc0: ID TRUST_STORE_GROUP, Name &apos;&apos; target &lt;(null): 0x0&gt;&gt; 0x131029dc0,</div><div class=\"line\">&lt;PSSpecifier 0x131033520: ID TRUST_STORE, Name &apos;Trust Store&apos; target &lt;AboutDataSource: 0x131028390&gt;&gt;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>我们让程序执行下一步，发现此时x0已经有值了，可以明显的看出，x0的值是在0x190804114~0x19080411C这段代码生成的，下面我们的工作重点就是寻找这段代码干了什么，胜利就在眼前！下面我们验证一下这里面到底有没有我们要的序列号：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po [[$x0 objectAtIndex:13] class]</div><div class=\"line\">PSSpecifier</div><div class=\"line\">(lldb) po [[$x0 objectAtIndex:13] properties]</div><div class=\"line\">&#123;</div><div class=\"line\">    cellObject = &quot;&lt;PSTableCell: 0x130800000; baseClass = UITableViewCell; frame = (0 565; 320 45); text = &apos;Serial Number&apos;; hidden = YES; autoresize = W; tag = 4; gestureRecognizers = &lt;NSArray: 0x12ff821c0&gt;; layer = &lt;CALayer: 0x12fd7d340&gt;&gt;&quot;;</div><div class=\"line\">    id = SerialNumber;</div><div class=\"line\">    isCopyable = 1;</div><div class=\"line\">    value = DNPMVG0EFF9V;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们打印数组中存放cell数据的object属于哪个类，发现是<code>PSSpecifier</code>，我们找到之前导出的类的头文件，发现这个类有一个叫做<code>properties</code>的实例方法，我们调用一下发现我们要的序列号就在里面<code>value = DNPMVG0EFF9V</code>，这跟iPhone设置中看到的序列号是一致的。猜测这个数组里面存放着系统设置中<code>PSUIAboutController</code>中所有cel的数据，这个数组下一个肯定要传递到cell生成的方法中，这个就不做验证了，大事重要，我们继续找序列号的生成方法。<br>这个<code>PSSpecifier</code>中有一个<code>AboutDataSource</code>对象，这个非常可疑，从名称上可以判断，这个类是专门用于数据处理的，不过在这之前我们还是先验证一下，在0x190804114~0x19080411C这段地址中，执行了<code>_PSListController._specifiers</code>，我们从<code>PSListController</code>的头文件（下文有讲怎么获取）中可以看到有一个specifiers属性，我们在IDA分析的文件中找到<code>[PSListController specifiers]</code>，我们先定位到方法在二进制文件中的位置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">__text:00000001907FE4A8 ; -[PSListController specifiers]</div><div class=\"line\">__text:00000001907FE4A8 __PSListController_specifiers_          ; DATA XREF: __objc_const:000000019C069A08\u0019o</div><div class=\"line\">__text:00000001907FE4A8</div><div class=\"line\">__text:00000001907FE4A8 var_40          = -0x40</div><div class=\"line\">__text:00000001907FE4A8 var_30          = -0x30</div><div class=\"line\">__text:00000001907FE4A8 var_20          = -0x20</div><div class=\"line\">__text:00000001907FE4A8 var_10          = -0x10</div><div class=\"line\">__text:00000001907FE4A8</div><div class=\"line\">__text:00000001907FE4A8                 STP             X24, X23, [SP,#var_40]!</div><div class=\"line\">__text:00000001907FE4AC                 STP             X22, X21, [SP,#0x40+var_30]</div><div class=\"line\">__text:00000001907FE4B0                 STP             X20, X19, [SP,#0x40+var_20]</div><div class=\"line\">__text:00000001907FE4B4                 STP             X29, X30, [SP,#0x40+var_10]</div><div class=\"line\">__text:00000001907FE4B8                 ADD             X29, SP, #0x40+var_10</div><div class=\"line\">__text:00000001907FE4BC                 MOV             X19, X0</div><div class=\"line\">__text:00000001907FE4C0                 ADRP            X8, #_OBJC_IVAR_$_PSListController._specifiers@PAGE ; NSArray *_specifiers;</div><div class=\"line\">__text:00000001907FE4C4                 LDRSW           X22, [X8,#_OBJC_IVAR_$_PSListController._specifiers@PAGEOFF] ; NSArray *_specifiers;</div><div class=\"line\">__text:00000001907FE4C8                 LDR             X8, [X19,X22]</div><div class=\"line\">__text:00000001907FE4CC                 CBNZ            X8, loc_1907FE5E0</div><div class=\"line\">__text:00000001907FE4D0                 ADRP            X8, #_OBJC_IVAR_$_PSListController._dataSource@PAGE ; id &lt;PSSpecifierDataSource&gt; _dataSource;</div><div class=\"line\">__text:00000001907FE4D4                 LDRSW           X8, [X8,#_OBJC_IVAR_$_PSListController._dataSource@PAGEOFF] ; id &lt;PSSpecifierDataSource&gt; _dataSource;</div><div class=\"line\">__text:00000001907FE4D8                 LDR             X9, [X19,X8]</div><div class=\"line\">__text:00000001907FE4DC                 CBZ             X9, loc_1907FE550</div><div class=\"line\">__text:00000001907FE4E0                 ADRP            X9, #_OBJC_IVAR_$_PSListController._requestingSpecifiersFromDataSource@PAGE ; bool _requestingSpecifiersFromDataSource;</div><div class=\"line\">__text:00000001907FE4E4                 LDRSW           X23, [X9,#_OBJC_IVAR_$_PSListController._requestingSpecifiersFromDataSource@PAGEOFF] ; bool _requestingSpecifiersFromDataSource;</div><div class=\"line\">__text:00000001907FE4E8                 MOV             W9, #1</div><div class=\"line\">__text:00000001907FE4EC                 STRB            W9, [X19,X23]</div><div class=\"line\">__text:00000001907FE4F0                 LDR             X20, [X19,X8]</div><div class=\"line\">__text:00000001907FE4F4                 ADRP            X8, #selRef_specifier@PAGE</div><div class=\"line\">__text:00000001907FE4F8                 LDR             X1, [X8,#selRef_specifier@PAGEOFF]</div><div class=\"line\">__text:00000001907FE4FC                 MOV             X0, X19</div><div class=\"line\">__text:00000001907FE500                 BL              0x96C39BC0</div><div class=\"line\">__text:00000001907FE504                 MOV             X29, X29</div><div class=\"line\">__text:00000001907FE508                 BL              0x96C41EF0</div><div class=\"line\">__text:00000001907FE50C                 MOV             X21, X0</div><div class=\"line\">__text:00000001907FE510                 ADRP            X8, #selRef_specifiersForSpecifier_observer_@PAGE</div><div class=\"line\">__text:00000001907FE514                 LDR             X1, </div><div class=\"line\">……</div></pre></td></tr></table></figure>\n<p>然后在这里面下个断点看看会发生什么</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) br s -a 0x1907FE4D0+0x198e58640</div><div class=\"line\">Breakpoint 9: where = Preferences`-[PSListController specifiers] + 40, address = 0x000000019364e4d0</div></pre></td></tr></table></figure>\n<p>我们从设置中进入通用&gt;关于，发现一开始就走到了这个断点，我们猜测，一进入关于页面，系统会首先把所有cell的数据都准备好，然后加载UI</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x000000019364e4d0 Preferences`-[PSListController specifiers] + 40, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 9.1</div><div class=\"line\">    frame #0: 0x000000019364e4d0 Preferences`-[PSListController specifiers] + 40</div><div class=\"line\">Preferences`-[PSListController specifiers]:</div><div class=\"line\">-&gt;  0x19364e4d0 &lt;+40&gt;: adrp   x8, 53971</div><div class=\"line\">    0x19364e4d4 &lt;+44&gt;: ldrsw  x8, [x8, #536]</div><div class=\"line\">    0x19364e4d8 &lt;+48&gt;: ldr    x9, [x19, x8]</div><div class=\"line\">    0x19364e4dc &lt;+52&gt;: cbz    x9, 0x19364e550           ; &lt;+168&gt;</div></pre></td></tr></table></figure>\n<p>我们打印变量x8和x9的值，看一下系统做了什么</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x8</div><div class=\"line\">&lt;nil&gt;</div><div class=\"line\">(lldb) po $x9</div><div class=\"line\">PSUIAboutController</div></pre></td></tr></table></figure>\n<p>并没有数据之类的东西值得我们关注，让断点继续往下走，走到0x19364e4dc的位置，我们再次打印变量x8和x9的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) n</div><div class=\"line\">Process 1192 stopped</div><div class=\"line\">* thread #1: tid = 0x523a6, 0x000000019364e4dc Preferences`-[PSListController specifiers] + 52, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x000000019364e4dc Preferences`-[PSListController specifiers] + 52</div><div class=\"line\">Preferences`-[PSListController specifiers]:</div><div class=\"line\">-&gt;  0x19364e4dc &lt;+52&gt;: cbz    x9, 0x19364e550           ; &lt;+168&gt;</div><div class=\"line\">    0x19364e4e0 &lt;+56&gt;: adrp   x9, 53971</div><div class=\"line\">    0x19364e4e4 &lt;+60&gt;: ldrsw  x23, [x9, #540]</div><div class=\"line\">    0x19364e4e8 &lt;+64&gt;: orr    w9, wzr, #0x1</div><div class=\"line\">(lldb) po $x8</div><div class=\"line\">952</div><div class=\"line\">(lldb) po $x9</div><div class=\"line\">&lt;AboutDataSource: 0x131130730&gt;</div></pre></td></tr></table></figure>\n<p>此时的变量x9已经变成了<code>AboutDataSource</code>，这里验证了我们上一步的猜想，所以我们重点来研究它，我们先找到这个类在哪个framework中，这里使用的是grep命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LeonLei-MBP:~ gaoshilei$ grep AboutDataSource -r /Users/gaoshilei/Desktop/reverse/iOS-Runtime-Headers-9.1 </div><div class=\"line\">/Users/gaoshilei/Desktop/reverse/iOS-Runtime-Headers-9.1/PrivateFrameworks/PreferencesUI.framework/AboutDataSource.h:@interface AboutDataSource : PSSpecifierDataSource &#123;</div></pre></td></tr></table></figure>\n<p>这里要说明一下iOS-Runtime-Headers-9.1这个文件夹是iOS9.1系统的所有头文件（共有+私有），这个你可以自己导（iOS9之后只能用runtime导，class-dump已经不行了），你也可以拿现成的用，github上面已经有雷锋把所有系统的头文件都导出来了，直接下载就可以了。我们发现<code>AboutDataSource</code>这个类在<code>PrivateFrameworks/PreferencesUI.framework</code>中，先看一下这个类里面有什么方法和属性，有一个方法<code>- (void)_loadValues;</code> 我们对它进行分析。这里又要借助IDA分析，把PreferencesUI这个二进制文件丢到IDA里面，在0x19091EBB8这个位置打个断点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) br s -a 0x19091EBB8+0x2e50000</div><div class=\"line\">Breakpoint 3: where = PreferencesUI`-[AboutDataSource _loadValues] + 1956, address = 0x000000019376ebb8</div></pre></td></tr></table></figure>\n<p>接下来我们进入关于来触发断点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po (char *) $x28</div><div class=\"line\">&quot;_setValue:forSpecifierWithKey:&quot;</div></pre></td></tr></table></figure>\n<p>在这里打印变量x28的值，发现它是一个方法名，从名称来看是给<code>specifier</code>赋值的，看来我们要寻找的真相已经很近了，让代码走到下面的位置0x19376ebd8</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Process 2107 stopped</div><div class=\"line\">* thread #1: tid = 0xe8e23, 0x000000019376ebd8 PreferencesUI`-[AboutDataSource _loadValues] + 1988, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x000000019376ebd8 PreferencesUI`-[AboutDataSource _loadValues] + 1988</div><div class=\"line\">PreferencesUI`-[AboutDataSource _loadValues]:</div><div class=\"line\">-&gt;  0x19376ebd8 &lt;+1988&gt;: bl     0x198e58640               ; MGCopyAnswer</div><div class=\"line\">    0x19376ebdc &lt;+1992&gt;: mov    x22, x0</div><div class=\"line\">    0x19376ebe0 &lt;+1996&gt;: mov    x1, x19</div><div class=\"line\">    0x19376ebe4 &lt;+2000&gt;: bl     0x199a89bc0               ; objc_msgSend</div><div class=\"line\">(lldb) po $x0</div><div class=\"line\">SerialNumber</div></pre></td></tr></table></figure>\n<p>此时我们打印的x0是一个<code>NSCFConstantString</code>，本质就是一个<code>NSString</code>，继续<code>ni</code>让程序运行到0x19376ebdc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Process 2107 stopped</div><div class=\"line\">* thread #1: tid = 0xe8e23, 0x000000019376ebdc PreferencesUI`-[AboutDataSource _loadValues] + 1992, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class=\"line\">    frame #0: 0x000000019376ebdc PreferencesUI`-[AboutDataSource _loadValues] + 1992</div><div class=\"line\">PreferencesUI`-[AboutDataSource _loadValues]:</div><div class=\"line\">-&gt;  0x19376ebdc &lt;+1992&gt;: mov    x22, x0</div><div class=\"line\">    0x19376ebe0 &lt;+1996&gt;: mov    x1, x19</div><div class=\"line\">    0x19376ebe4 &lt;+2000&gt;: bl     0x199a89bc0               ; objc_msgSend</div><div class=\"line\">    0x19376ebe8 &lt;+2004&gt;: cbnz   x0, 0x19376ec4c           ; &lt;+2104&gt;</div><div class=\"line\">(lldb) po $x0</div><div class=\"line\">DNPMVG0EFF9V</div></pre></td></tr></table></figure>\n<p>在这里我们打印了变量x0的值为<strong>DNPMVG0EFF9V</strong>，这就是我们苦苦寻找的序列号。不难看出，序列号就是在0x19376ebd8这行拿到的，范围越来越小，敌人无路可逃！下面我们就要对这行进行分析，我们按照之前的步骤，再次走到0x19376ebd8这个位置，这不过这次我们不要<code>step-over</code>，我们用<code>si</code>跳入看看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) si</div><div class=\"line\">Process 2107 stopped</div><div class=\"line\">* thread #1: tid = 0xe8e23, 0x0000000198e58640 libMobileGestalt.dylib`MGCopyAnswer, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step into</div><div class=\"line\">    frame #0: 0x0000000198e58640 libMobileGestalt.dylib`MGCopyAnswer</div><div class=\"line\">libMobileGestalt.dylib`MGCopyAnswer:</div><div class=\"line\">-&gt;  0x198e58640 &lt;+0&gt;: movz   x1, #0</div><div class=\"line\">    0x198e58644 &lt;+4&gt;: b      0x198e58648               ; ___lldb_unnamed_symbol64$$libMobileGestalt.dylib</div><div class=\"line\"></div><div class=\"line\">libMobileGestalt.dylib`___lldb_unnamed_symbol64$$libMobileGestalt.dylib:</div><div class=\"line\">    0x198e58648 &lt;+0&gt;: stp    x24, x23, [sp, #-64]!</div><div class=\"line\">    0x198e5864c &lt;+4&gt;: stp    x22, x21, [sp, #16]</div><div class=\"line\">此时跳入了一个静态库libMobileGestalt.dylib，我们可以在usr/lib/ibMobileGestalt.dylib找到它，我们将它扔进IDA，用当前的addr减去libMobileGestalt.dylib的基地址偏移得到它的静态地址0x196008640，对应的是一个函数MGCopyAnswer</div><div class=\"line\">__text:0000000196008640</div><div class=\"line\">__text:0000000196008640 ; =============== S U B R O U T I N E =======================================</div><div class=\"line\">__text:0000000196008640</div><div class=\"line\">__text:0000000196008640</div><div class=\"line\">__text:0000000196008640                 EXPORT _MGCopyAnswer</div><div class=\"line\">__text:0000000196008640 _MGCopyAnswer                           ; CODE XREF: sub_196005958+30\u0018p</div><div class=\"line\">__text:0000000196008640                                         ; sub_196006258+28\u0018p ...</div><div class=\"line\">__text:0000000196008640                 MOV             X1, #0</div><div class=\"line\">__text:0000000196008644                 B               sub_196008648</div><div class=\"line\">__text:0000000196008644 ; End of function _MGCopyAnswer</div></pre></td></tr></table></figure>\n<p>这个函数最外层只有两行代码，将立即数0赋给x1，然后跳进了子程序sub_196008648，跳进去之后进行了一些很复杂的运算，这里就不做介绍了，里面的实现大概是这样的：<br>x0是作为一个参数传入的，并且这里x0的值为<code>SerialNumber</code>，在地址为0x196008678的地方，这个函数中x1变成了一串随机数，有点像MD5加密之后的东西，应该是“钥匙”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po (char*) $x1</div><div class=\"line\">&quot;l92SaBpqIvQs+KBljuwGA&quot;</div></pre></td></tr></table></figure>\n<p>在0x196008690这里，我们<code>setp-into</code>这个函数，在函数的末尾返回值的地方0x196007474打个断点，打印返回值x0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po $x0</div><div class=\"line\">DNPMVG0EFF9V</div></pre></td></tr></table></figure>\n<p>这里的x0由<code>SerialNumber</code>变成了真正的序列号，并且就是在0x196008690对应的子程序sub_19600738C里面拿到的，所以我们就这样一个猜测，在<code>MGCopyAnswer</code>函数中，x0作为一个参数传入，并且在内部进行了一系列复杂的运算，拿到了获取序列号的“钥匙”x1，然后在sub_19600738C中拿到了最终的序列号。这里笔者也没有对序列号的拿到在进行进一步的深究，这里苹果做了很大的限制，再继续研究恐怕也是收获不大，而且我们在这里已经能拿到序列号了。  </p>\n<h3 id=\"三、验证结果\"><a href=\"#三、验证结果\" class=\"headerlink\" title=\"三、验证结果\"></a>三、验证结果</h3><p>接下来就是验证的过程了，我们写一个tweak来验证，当然也可以用其他方式来验证：<br>tweak的创建这里就不赘述了，我把我的tweak和makefile文件内容贴一下：</p>\n<blockquote>\n<p>tweak文件：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">tweak.xm:</div><div class=\"line\">extern &quot;C&quot; NSString *MGCopyAnswer(NSString*);</div><div class=\"line\">%hook SpringBoard</div><div class=\"line\">- (void)applicationDidFinishLaunching:(id)application &#123;</div><div class=\"line\">%orig;</div><div class=\"line\">NSString *serialNumber = [NSString stringWithFormat:@&quot;%@&quot;,[MGCopyAnswer(@&quot;SerialNumber&quot;) autorelease]];</div><div class=\"line\">UIAlertView *alert = [[UIAlertView alloc] initWithTitle:serialNumber message:nil delegate:self cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];</div><div class=\"line\">[alert show];</div><div class=\"line\">&#125;</div><div class=\"line\">%end</div></pre></td></tr></table></figure>\n<p>这里注入系统的SpringBoard，在SB启动的时候hook住applicationDidFinishLaunching：函数，并且在这个函数里面添加获取序列号的代码，并且以弹框的形式展现出来。  </p>\n<blockquote>\n<p>makefile文件:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">THEOS_DEVICE_IP = 192.168.0.115</div><div class=\"line\">include $(THEOS)/makefiles/common.mk</div><div class=\"line\">TWEAK_NAME = SerialNumber</div><div class=\"line\">SerialNumber_FILES = Tweak.xm</div><div class=\"line\">include $(THEOS_MAKE_PATH)/tweak.mk</div><div class=\"line\">SerialNumber_LDFLAGS = -lMobileGestalt</div><div class=\"line\">after-install::</div><div class=\"line\">\tinstall.exec &quot;killall -9 SpringBoard&quot;</div></pre></td></tr></table></figure>\n<p>其中有一行<code>SerialNumber_LDFLAGS = -lMobileGestalt</code>千万要注意，使用的时候要加载这个静态库，因为SpringBoard加载的时候我也不确定是否有加载这个库，然后我们验证一下吧！<br><img src=\"http://upload-images.jianshu.io/upload_images/1787336-de4c49a4ffd6bd91.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"序列号验证-获取\"><img src=\"http://upload-images.jianshu.io/upload_images/1787336-78e60f103a70c27e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"序列号验证-系统\">  </p>\n<p> <a href=\"https://www.amazon.cn/iOS应用逆向工程-沙梓社/dp/B00VFDVY7E/ref=sr_1_1?ie=UTF8&amp;qid=1477453672&amp;sr=8-1&amp;keywords=iOS逆向工程\">此文参考了《iOS逆向工程（第二版）》</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciuxvnxpp0000lw6q0hv9gg2u","category_id":"ciuxvnxq50002lw6qbqyxr909","_id":"ciuxvnxqh0006lw6q67hg4xzk"}],"PostTag":[{"post_id":"ciuxvnxpp0000lw6q0hv9gg2u","tag_id":"ciuxvnxqa0003lw6q266w6wr7","_id":"ciuxvnxqv000dlw6qe7c1gyy8"},{"post_id":"ciuxvnxpp0000lw6q0hv9gg2u","tag_id":"ciuxvnxqe0005lw6qb7ucw69p","_id":"ciuxvnxqw000elw6qhxq4i6zk"},{"post_id":"ciuxvnxpp0000lw6q0hv9gg2u","tag_id":"ciuxvnxqh0007lw6qf9y5oq7o","_id":"ciuxvnxqw000flw6qpnw0m98c"},{"post_id":"ciuxvnxpp0000lw6q0hv9gg2u","tag_id":"ciuxvnxqi0008lw6q28chwpey","_id":"ciuxvnxqw000glw6qvlaj8i09"},{"post_id":"ciuxvnxpp0000lw6q0hv9gg2u","tag_id":"ciuxvnxqk0009lw6qa5jw3yz6","_id":"ciuxvnxqx000hlw6q0zx95doa"},{"post_id":"ciuxvnxpp0000lw6q0hv9gg2u","tag_id":"ciuxvnxql000alw6qktpe4iw3","_id":"ciuxvnxqx000ilw6qmakscn7x"},{"post_id":"ciuxvnxpp0000lw6q0hv9gg2u","tag_id":"ciuxvnxqq000blw6q5yr5gxfu","_id":"ciuxvnxqy000jlw6q359mxa0v"},{"post_id":"ciuxvnxpp0000lw6q0hv9gg2u","tag_id":"ciuxvnxqs000clw6qcfj0ok32","_id":"ciuxvnxqy000klw6q7spgnrl6"}],"Tag":[{"name":"GitHub","_id":"ciuxvnxqa0003lw6q266w6wr7"},{"name":"Hexo","_id":"ciuxvnxqe0005lw6qb7ucw69p"},{"name":"WordPress","_id":"ciuxvnxqh0007lw6qf9y5oq7o"},{"name":"JavaScript","_id":"ciuxvnxqi0008lw6q28chwpey"},{"name":"Markdown","_id":"ciuxvnxqk0009lw6qa5jw3yz6"},{"name":"HTML","_id":"ciuxvnxql000alw6qktpe4iw3"},{"name":"CSS","_id":"ciuxvnxqq000blw6q5yr5gxfu"},{"name":"jQuery","_id":"ciuxvnxqs000clw6qcfj0ok32"}]}}